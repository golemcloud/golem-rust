// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod golem {
    #[allow(dead_code)]
    pub mod api {
        #[allow(dead_code, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
            /// An index into the persistent log storing all performed operations of a worker
            pub type OplogIndex = u64;
            /// Represents a Golem component's version
            pub type ComponentVersion = u64;
            /// UUID
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            /// Represents a Golem component
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ComponentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ComponentId {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ComponentId")
                        .field("uuid", &self.uuid)
                        .finish()
                }
            }
            /// Represents a Golem worker
            #[derive(Clone)]
            pub struct WorkerId {
                pub component_id: ComponentId,
                pub worker_name: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerId {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerId")
                        .field("component-id", &self.component_id)
                        .field("worker-name", &self.worker_name)
                        .finish()
                }
            }
            /// A promise ID is a value that can be passed to an external Golem API to complete that promise
            /// from an arbitrary external source, while Golem workers can await for this completion.
            #[derive(Clone)]
            pub struct PromiseId {
                pub worker_id: WorkerId,
                pub oplog_idx: OplogIndex,
            }
            impl ::core::fmt::Debug for PromiseId {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PromiseId")
                        .field("worker-id", &self.worker_id)
                        .field("oplog-idx", &self.oplog_idx)
                        .finish()
                }
            }
            /// Represents a Golem Cloud account
            #[derive(Clone)]
            pub struct AccountId {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AccountId {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("AccountId")
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Configures how the executor retries failures
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RetryPolicy {
                /// The maximum number of retries before the worker becomes permanently failed
                pub max_attempts: u32,
                /// The minimum delay between retries (applied to the first retry)
                pub min_delay: Duration,
                /// The maximum delay between retries
                pub max_delay: Duration,
                /// Multiplier applied to the delay on each retry to implement exponential backoff
                pub multiplier: f64,
                /// The maximum amount of jitter to add to the delay
                pub max_jitter_factor: Option<f64>,
            }
            impl ::core::fmt::Debug for RetryPolicy {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("RetryPolicy")
                        .field("max-attempts", &self.max_attempts)
                        .field("min-delay", &self.min_delay)
                        .field("max-delay", &self.max_delay)
                        .field("multiplier", &self.multiplier)
                        .field("max-jitter-factor", &self.max_jitter_factor)
                        .finish()
                }
            }
            /// Configurable persistence level for workers
            #[derive(Clone, Copy)]
            pub enum PersistenceLevel {
                PersistNothing,
                PersistRemoteSideEffects,
                Smart,
            }
            impl ::core::fmt::Debug for PersistenceLevel {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        PersistenceLevel::PersistNothing => {
                            f.debug_tuple("PersistenceLevel::PersistNothing").finish()
                        }
                        PersistenceLevel::PersistRemoteSideEffects => f
                            .debug_tuple("PersistenceLevel::PersistRemoteSideEffects")
                            .finish(),
                        PersistenceLevel::Smart => {
                            f.debug_tuple("PersistenceLevel::Smart").finish()
                        }
                    }
                }
            }
            /// Describes how to update a worker to a different component version
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum UpdateMode {
                /// Automatic update tries to recover the worker using the new component version
                /// and may fail if there is a divergence.
                Automatic,
                /// Manual, snapshot-based update uses a user-defined implementation of the `save-snapshot` interface
                /// to store the worker's state, and a user-defined implementation of the `load-snapshot` interface to
                /// load it into the new version.
                SnapshotBased,
            }
            impl ::core::fmt::Debug for UpdateMode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        UpdateMode::Automatic => f.debug_tuple("UpdateMode::Automatic").finish(),
                        UpdateMode::SnapshotBased => {
                            f.debug_tuple("UpdateMode::SnapshotBased").finish()
                        }
                    }
                }
            }

            impl UpdateMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> UpdateMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => UpdateMode::Automatic,
                        1 => UpdateMode::SnapshotBased,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum FilterComparator {
                Equal,
                NotEqual,
                GreaterEqual,
                Greater,
                LessEqual,
                Less,
            }
            impl ::core::fmt::Debug for FilterComparator {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        FilterComparator::Equal => {
                            f.debug_tuple("FilterComparator::Equal").finish()
                        }
                        FilterComparator::NotEqual => {
                            f.debug_tuple("FilterComparator::NotEqual").finish()
                        }
                        FilterComparator::GreaterEqual => {
                            f.debug_tuple("FilterComparator::GreaterEqual").finish()
                        }
                        FilterComparator::Greater => {
                            f.debug_tuple("FilterComparator::Greater").finish()
                        }
                        FilterComparator::LessEqual => {
                            f.debug_tuple("FilterComparator::LessEqual").finish()
                        }
                        FilterComparator::Less => f.debug_tuple("FilterComparator::Less").finish(),
                    }
                }
            }

            impl FilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> FilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => FilterComparator::Equal,
                        1 => FilterComparator::NotEqual,
                        2 => FilterComparator::GreaterEqual,
                        3 => FilterComparator::Greater,
                        4 => FilterComparator::LessEqual,
                        5 => FilterComparator::Less,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum StringFilterComparator {
                Equal,
                NotEqual,
                Like,
                NotLike,
            }
            impl ::core::fmt::Debug for StringFilterComparator {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        StringFilterComparator::Equal => {
                            f.debug_tuple("StringFilterComparator::Equal").finish()
                        }
                        StringFilterComparator::NotEqual => {
                            f.debug_tuple("StringFilterComparator::NotEqual").finish()
                        }
                        StringFilterComparator::Like => {
                            f.debug_tuple("StringFilterComparator::Like").finish()
                        }
                        StringFilterComparator::NotLike => {
                            f.debug_tuple("StringFilterComparator::NotLike").finish()
                        }
                    }
                }
            }

            impl StringFilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> StringFilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => StringFilterComparator::Equal,
                        1 => StringFilterComparator::NotEqual,
                        2 => StringFilterComparator::Like,
                        3 => StringFilterComparator::NotLike,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum WorkerStatus {
                /// The worker is running an invoked function
                Running,
                /// The worker is ready to run an invoked function
                Idle,
                /// An invocation is active but waiting for something (sleeping, waiting for a promise)
                Suspended,
                /// The last invocation was interrupted but will be resumed
                Interrupted,
                /// The last invocation failed and a retry was scheduled
                Retrying,
                /// The last invocation failed and the worker can no longer be used
                Failed,
                /// The worker exited after a successful invocation and can no longer be invoked
                Exited,
            }
            impl ::core::fmt::Debug for WorkerStatus {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        WorkerStatus::Running => f.debug_tuple("WorkerStatus::Running").finish(),
                        WorkerStatus::Idle => f.debug_tuple("WorkerStatus::Idle").finish(),
                        WorkerStatus::Suspended => {
                            f.debug_tuple("WorkerStatus::Suspended").finish()
                        }
                        WorkerStatus::Interrupted => {
                            f.debug_tuple("WorkerStatus::Interrupted").finish()
                        }
                        WorkerStatus::Retrying => f.debug_tuple("WorkerStatus::Retrying").finish(),
                        WorkerStatus::Failed => f.debug_tuple("WorkerStatus::Failed").finish(),
                        WorkerStatus::Exited => f.debug_tuple("WorkerStatus::Exited").finish(),
                    }
                }
            }

            impl WorkerStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> WorkerStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => WorkerStatus::Running,
                        1 => WorkerStatus::Idle,
                        2 => WorkerStatus::Suspended,
                        3 => WorkerStatus::Interrupted,
                        4 => WorkerStatus::Retrying,
                        5 => WorkerStatus::Failed,
                        6 => WorkerStatus::Exited,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct WorkerNameFilter {
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerNameFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerNameFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerStatusFilter {
                pub comparator: FilterComparator,
                pub value: WorkerStatus,
            }
            impl ::core::fmt::Debug for WorkerStatusFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerStatusFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerVersionFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerVersionFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerVersionFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerCreatedAtFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerCreatedAtFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerCreatedAtFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerEnvFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerEnvFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerEnvFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum WorkerPropertyFilter {
                Name(WorkerNameFilter),
                Status(WorkerStatusFilter),
                Version(WorkerVersionFilter),
                CreatedAt(WorkerCreatedAtFilter),
                Env(WorkerEnvFilter),
            }
            impl ::core::fmt::Debug for WorkerPropertyFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        WorkerPropertyFilter::Name(e) => f
                            .debug_tuple("WorkerPropertyFilter::Name")
                            .field(e)
                            .finish(),
                        WorkerPropertyFilter::Status(e) => f
                            .debug_tuple("WorkerPropertyFilter::Status")
                            .field(e)
                            .finish(),
                        WorkerPropertyFilter::Version(e) => f
                            .debug_tuple("WorkerPropertyFilter::Version")
                            .field(e)
                            .finish(),
                        WorkerPropertyFilter::CreatedAt(e) => f
                            .debug_tuple("WorkerPropertyFilter::CreatedAt")
                            .field(e)
                            .finish(),
                        WorkerPropertyFilter::Env(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Env").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerAllFilter {
                pub filters: _rt::Vec<WorkerPropertyFilter>,
            }
            impl ::core::fmt::Debug for WorkerAllFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAllFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerAnyFilter {
                pub filters: _rt::Vec<WorkerAllFilter>,
            }
            impl ::core::fmt::Debug for WorkerAnyFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAnyFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerMetadata {
                pub worker_id: WorkerId,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub status: WorkerStatus,
                pub component_version: u64,
                pub retry_count: u64,
            }
            impl ::core::fmt::Debug for WorkerMetadata {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerMetadata")
                        .field("worker-id", &self.worker_id)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("status", &self.status)
                        .field("component-version", &self.component_version)
                        .field("retry-count", &self.retry_count)
                        .finish()
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetWorkers {
                handle: _rt::Resource<GetWorkers>,
            }

            impl GetWorkers {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for GetWorkers {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]get-workers"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(
                    component_id: ComponentId,
                    filter: Option<&WorkerAnyFilter>,
                    precise: bool,
                ) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let ComponentId { uuid: uuid0 } = component_id;
                        let Uuid {
                            high_bits: high_bits1,
                            low_bits: low_bits1,
                        } = uuid0;
                        let (result14_0, result14_1, result14_2) = match filter {
                            Some(e) => {
                                let WorkerAnyFilter { filters: filters2 } = e;
                                let vec13 = filters2;
                                let len13 = vec13.len();
                                let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec13.len() * 8,
                                    4,
                                );
                                let result13 = if layout13.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout13);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec13.into_iter().enumerate() {
                                    let base = result13.add(i * 8);
                                    {
                                        let WorkerAllFilter { filters: filters3 } = e;
                                        let vec12 = filters3;
                                        let len12 = vec12.len();
                                        let layout12 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec12.len() * 32,
                                                8,
                                            );
                                        let result12 = if layout12.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout12);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec12.into_iter().enumerate() {
                                            let base = result12.add(i * 32);
                                            {
                                                match e {
                                                    WorkerPropertyFilter::Name(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        let WorkerNameFilter {
                                                            comparator: comparator4,
                                                            value: value4,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (comparator4.clone() as i32) as u8;
                                                        let vec5 = value4;
                                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                                        let len5 = vec5.len();
                                                        *base.add(16).cast::<usize>() = len5;
                                                        *base.add(12).cast::<*mut u8>() =
                                                            ptr5.cast_mut();
                                                    }
                                                    WorkerPropertyFilter::Status(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        let WorkerStatusFilter {
                                                            comparator: comparator6,
                                                            value: value6,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (comparator6.clone() as i32) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (value6.clone() as i32) as u8;
                                                    }
                                                    WorkerPropertyFilter::Version(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        let WorkerVersionFilter {
                                                            comparator: comparator7,
                                                            value: value7,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (comparator7.clone() as i32) as u8;
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(value7);
                                                    }
                                                    WorkerPropertyFilter::CreatedAt(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        let WorkerCreatedAtFilter {
                                                            comparator: comparator8,
                                                            value: value8,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (comparator8.clone() as i32) as u8;
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(value8);
                                                    }
                                                    WorkerPropertyFilter::Env(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        let WorkerEnvFilter {
                                                            name: name9,
                                                            comparator: comparator9,
                                                            value: value9,
                                                        } = e;
                                                        let vec10 = name9;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base.add(12).cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr10.cast_mut();
                                                        *base.add(16).cast::<u8>() =
                                                            (comparator9.clone() as i32) as u8;
                                                        let vec11 = value9;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base.add(24).cast::<usize>() = len11;
                                                        *base.add(20).cast::<*mut u8>() =
                                                            ptr11.cast_mut();
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(4).cast::<usize>() = len12;
                                        *base.add(0).cast::<*mut u8>() = result12;
                                        cleanup_list.extend_from_slice(&[(result12, layout12)]);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result13, layout13)]);

                                (1i32, result13, len13)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]get-workers"]
                            fn wit_import(
                                _: i64,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: i32, _: *mut u8, _: usize, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits1),
                            _rt::as_i64(low_bits1),
                            result14_0,
                            result14_1,
                            result14_2,
                            match &precise {
                                true => 1,
                                false => 0,
                            },
                        );
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        GetWorkers::from_handle(ret as u32)
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<WorkerMetadata>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.0")]
                        extern "C" {
                            #[link_name = "[method]get-workers.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base27 = l2;
                                    let len27 = l3;
                                    let mut result27 = _rt::Vec::with_capacity(len27);
                                    for i in 0..len27 {
                                        let base = base27.add(i * 64);
                                        let e27 = {
                                            let l4 = *base.add(0).cast::<i64>();
                                            let l5 = *base.add(8).cast::<i64>();
                                            let l6 = *base.add(16).cast::<*mut u8>();
                                            let l7 = *base.add(20).cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                                            let l9 = *base.add(24).cast::<*mut u8>();
                                            let l10 = *base.add(28).cast::<usize>();
                                            let base14 = l9;
                                            let len14 = l10;
                                            let mut result14 = _rt::Vec::with_capacity(len14);
                                            for i in 0..len14 {
                                                let base = base14.add(i * 8);
                                                let e14 = {
                                                    let l11 = *base.add(0).cast::<*mut u8>();
                                                    let l12 = *base.add(4).cast::<usize>();
                                                    let len13 = l12;
                                                    let bytes13 = _rt::Vec::from_raw_parts(
                                                        l11.cast(),
                                                        len13,
                                                        len13,
                                                    );

                                                    _rt::string_lift(bytes13)
                                                };
                                                result14.push(e14);
                                            }
                                            _rt::cabi_dealloc(base14, len14 * 8, 4);
                                            let l15 = *base.add(32).cast::<*mut u8>();
                                            let l16 = *base.add(36).cast::<usize>();
                                            let base23 = l15;
                                            let len23 = l16;
                                            let mut result23 = _rt::Vec::with_capacity(len23);
                                            for i in 0..len23 {
                                                let base = base23.add(i * 16);
                                                let e23 = {
                                                    let l17 = *base.add(0).cast::<*mut u8>();
                                                    let l18 = *base.add(4).cast::<usize>();
                                                    let len19 = l18;
                                                    let bytes19 = _rt::Vec::from_raw_parts(
                                                        l17.cast(),
                                                        len19,
                                                        len19,
                                                    );
                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                    let l21 = *base.add(12).cast::<usize>();
                                                    let len22 = l21;
                                                    let bytes22 = _rt::Vec::from_raw_parts(
                                                        l20.cast(),
                                                        len22,
                                                        len22,
                                                    );

                                                    (
                                                        _rt::string_lift(bytes19),
                                                        _rt::string_lift(bytes22),
                                                    )
                                                };
                                                result23.push(e23);
                                            }
                                            _rt::cabi_dealloc(base23, len23 * 16, 4);
                                            let l24 = i32::from(*base.add(40).cast::<u8>());
                                            let l25 = *base.add(48).cast::<i64>();
                                            let l26 = *base.add(56).cast::<i64>();

                                            WorkerMetadata {
                                                worker_id: WorkerId {
                                                    component_id: ComponentId {
                                                        uuid: Uuid {
                                                            high_bits: l4 as u64,
                                                            low_bits: l5 as u64,
                                                        },
                                                    },
                                                    worker_name: _rt::string_lift(bytes8),
                                                },
                                                args: result14,
                                                env: result23,
                                                status: WorkerStatus::_lift(l24 as u8),
                                                component_version: l25 as u64,
                                                retry_count: l26 as u64,
                                            }
                                        };
                                        result27.push(e27);
                                    }
                                    _rt::cabi_dealloc(base27, len27 * 64, 8);

                                    result27
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a new promise
            pub fn create_promise() -> PromiseId {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "create-promise"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                    let l4 = *ptr0.add(20).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *ptr0.add(24).cast::<i64>();
                    PromiseId {
                        worker_id: WorkerId {
                            component_id: ComponentId {
                                uuid: Uuid {
                                    high_bits: l1 as u64,
                                    low_bits: l2 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes5),
                        },
                        oplog_idx: l6 as u64,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Suspends execution until the given promise gets completed, and returns the payload passed to
            /// the promise completion.
            pub fn await_promise(promise_id: &PromiseId) -> _rt::Vec<u8> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let PromiseId {
                        worker_id: worker_id0,
                        oplog_idx: oplog_idx0,
                    } = promise_id;
                    let WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "await-promise"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                        ptr5,
                    );
                    let l6 = *ptr5.add(0).cast::<*mut u8>();
                    let l7 = *ptr5.add(4).cast::<usize>();
                    let len8 = l7;
                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Completes the given promise with the given payload. Returns true if the promise was completed, false
            /// if the promise was already completed. The payload is passed to the worker that is awaiting the promise.
            pub fn complete_promise(promise_id: &PromiseId, data: &[u8]) -> bool {
                unsafe {
                    let PromiseId {
                        worker_id: worker_id0,
                        oplog_idx: oplog_idx0,
                    } = promise_id;
                    let WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = data;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "complete-promise"]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                        ptr5.cast_mut(),
                        len5,
                    );
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Deletes the given promise
            pub fn delete_promise(promise_id: &PromiseId) {
                unsafe {
                    let PromiseId {
                        worker_id: worker_id0,
                        oplog_idx: oplog_idx0,
                    } = promise_id;
                    let WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "delete-promise"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current position in the persistent op log
            pub fn get_oplog_index() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-oplog-index"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Makes the current worker travel back in time and continue execution from the given position in the persistent
            /// op log.
            pub fn set_oplog_index(oplog_idx: OplogIndex) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "set-oplog-index"]
                        fn wit_import(_: i64);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(oplog_idx));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Blocks the execution until the oplog has been written to at least the specified number of replicas,
            /// or the maximum number of replicas if the requested number is higher.
            pub fn oplog_commit(replicas: u8) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "oplog-commit"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i32(&replicas));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Marks the beginning of an atomic operation.
            /// In case of a failure within the region selected by `mark-begin-operation` and `mark-end-operation`
            /// the whole region will be reexecuted on retry.
            /// The end of the region is when `mark-end-operation` is called with the returned oplog-index.
            pub fn mark_begin_operation() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "mark-begin-operation"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Commits this atomic operation. After `mark-end-operation` is called for a given index, further calls
            /// with the same parameter will do nothing.
            pub fn mark_end_operation(begin: OplogIndex) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "mark-end-operation"]
                        fn wit_import(_: i64);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(begin));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current retry policy associated with the worker
            pub fn get_retry_policy() -> RetryPolicy {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-retry-policy"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i32>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<i64>();
                    let l4 = *ptr0.add(24).cast::<f64>();
                    let l5 = i32::from(*ptr0.add(32).cast::<u8>());
                    RetryPolicy {
                        max_attempts: l1 as u32,
                        min_delay: l2 as u64,
                        max_delay: l3 as u64,
                        multiplier: l4,
                        max_jitter_factor: match l5 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l6 = *ptr0.add(40).cast::<f64>();

                                    l6
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Overrides the current retry policy associated with the worker. Following this call, `get-retry-policy` will return the
            /// new retry policy.
            pub fn set_retry_policy(new_retry_policy: RetryPolicy) {
                unsafe {
                    let RetryPolicy {
                        max_attempts: max_attempts0,
                        min_delay: min_delay0,
                        max_delay: max_delay0,
                        multiplier: multiplier0,
                        max_jitter_factor: max_jitter_factor0,
                    } = new_retry_policy;
                    let (result1_0, result1_1) = match max_jitter_factor0 {
                        Some(e) => (1i32, _rt::as_f64(e)),
                        None => (0i32, 0.0f64),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "set-retry-policy"]
                        fn wit_import(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i32(max_attempts0),
                        _rt::as_i64(min_delay0),
                        _rt::as_i64(max_delay0),
                        _rt::as_f64(multiplier0),
                        result1_0,
                        result1_1,
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the worker's current persistence level.
            pub fn get_oplog_persistence_level() -> PersistenceLevel {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-oplog-persistence-level"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    let v0 = match ret {
                        0 => PersistenceLevel::PersistNothing,
                        1 => PersistenceLevel::PersistRemoteSideEffects,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            PersistenceLevel::Smart
                        }
                    };
                    v0
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the worker's current persistence level. This can increase the performance of execution in cases where durable
            /// execution is not required.
            pub fn set_oplog_persistence_level(new_persistence_level: PersistenceLevel) {
                unsafe {
                    let result0 = match new_persistence_level {
                        PersistenceLevel::PersistNothing => 0i32,
                        PersistenceLevel::PersistRemoteSideEffects => 1i32,
                        PersistenceLevel::Smart => 2i32,
                    };

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "set-oplog-persistence-level"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(result0);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current idempotence mode. See `set-idempotence-mode` for details.
            pub fn get_idempotence_mode() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-idempotence-mode"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the current idempotence mode. The default is true.
            /// True means side-effects are treated idempotent and Golem guarantees at-least-once semantics.
            /// In case of false the executor provides at-most-once semantics, failing the worker in case it is
            /// not known if the side effect was already executed.
            pub fn set_idempotence_mode(idempotent: bool) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "set-idempotence-mode"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(match &idempotent {
                        true => 1,
                        false => 0,
                    });
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Generates an idempotency key. This operation will never be replayed —
            /// i.e. not only is this key generated, but it is persisted and committed, such that the key can be used in third-party systems (e.g. payment processing)
            /// to introduce idempotence.
            pub fn generate_idempotency_key() -> Uuid {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "generate-idempotency-key"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    Uuid {
                        high_bits: l1 as u64,
                        low_bits: l2 as u64,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Initiates an update attempt for the given worker. The function returns immediately once the request has been processed,
            /// not waiting for the worker to get updated.
            pub fn update_worker(
                worker_id: &WorkerId,
                target_version: ComponentVersion,
                mode: UpdateMode,
            ) {
                unsafe {
                    let WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let ComponentId { uuid: uuid1 } = component_id0;
                    let Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "update-worker"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64, _: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64, _: i32) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits2),
                        _rt::as_i64(low_bits2),
                        ptr3.cast_mut(),
                        len3,
                        _rt::as_i64(target_version),
                        mode.clone() as i32,
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get current worker metadata
            pub fn get_self_metadata() -> WorkerMetadata {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 64]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 64]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-self-metadata"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                    let l4 = *ptr0.add(20).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *ptr0.add(24).cast::<*mut u8>();
                    let l7 = *ptr0.add(28).cast::<usize>();
                    let base11 = l6;
                    let len11 = l7;
                    let mut result11 = _rt::Vec::with_capacity(len11);
                    for i in 0..len11 {
                        let base = base11.add(i * 8);
                        let e11 = {
                            let l8 = *base.add(0).cast::<*mut u8>();
                            let l9 = *base.add(4).cast::<usize>();
                            let len10 = l9;
                            let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                            _rt::string_lift(bytes10)
                        };
                        result11.push(e11);
                    }
                    _rt::cabi_dealloc(base11, len11 * 8, 4);
                    let l12 = *ptr0.add(32).cast::<*mut u8>();
                    let l13 = *ptr0.add(36).cast::<usize>();
                    let base20 = l12;
                    let len20 = l13;
                    let mut result20 = _rt::Vec::with_capacity(len20);
                    for i in 0..len20 {
                        let base = base20.add(i * 16);
                        let e20 = {
                            let l14 = *base.add(0).cast::<*mut u8>();
                            let l15 = *base.add(4).cast::<usize>();
                            let len16 = l15;
                            let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);
                            let l17 = *base.add(8).cast::<*mut u8>();
                            let l18 = *base.add(12).cast::<usize>();
                            let len19 = l18;
                            let bytes19 = _rt::Vec::from_raw_parts(l17.cast(), len19, len19);

                            (_rt::string_lift(bytes16), _rt::string_lift(bytes19))
                        };
                        result20.push(e20);
                    }
                    _rt::cabi_dealloc(base20, len20 * 16, 4);
                    let l21 = i32::from(*ptr0.add(40).cast::<u8>());
                    let l22 = *ptr0.add(48).cast::<i64>();
                    let l23 = *ptr0.add(56).cast::<i64>();
                    WorkerMetadata {
                        worker_id: WorkerId {
                            component_id: ComponentId {
                                uuid: Uuid {
                                    high_bits: l1 as u64,
                                    low_bits: l2 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes5),
                        },
                        args: result11,
                        env: result20,
                        status: WorkerStatus::_lift(l21 as u8),
                        component_version: l22 as u64,
                        retry_count: l23 as u64,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get worker metadata
            pub fn get_worker_metadata(worker_id: &WorkerId) -> Option<WorkerMetadata> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 72]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 72]);
                    let WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let ComponentId { uuid: uuid1 } = component_id0;
                    let Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-worker-metadata"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits2),
                        _rt::as_i64(low_bits2),
                        ptr3.cast_mut(),
                        len3,
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => None,
                        1 => {
                            let e = {
                                let l6 = *ptr4.add(8).cast::<i64>();
                                let l7 = *ptr4.add(16).cast::<i64>();
                                let l8 = *ptr4.add(24).cast::<*mut u8>();
                                let l9 = *ptr4.add(28).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                                let l11 = *ptr4.add(32).cast::<*mut u8>();
                                let l12 = *ptr4.add(36).cast::<usize>();
                                let base16 = l11;
                                let len16 = l12;
                                let mut result16 = _rt::Vec::with_capacity(len16);
                                for i in 0..len16 {
                                    let base = base16.add(i * 8);
                                    let e16 = {
                                        let l13 = *base.add(0).cast::<*mut u8>();
                                        let l14 = *base.add(4).cast::<usize>();
                                        let len15 = l14;
                                        let bytes15 =
                                            _rt::Vec::from_raw_parts(l13.cast(), len15, len15);

                                        _rt::string_lift(bytes15)
                                    };
                                    result16.push(e16);
                                }
                                _rt::cabi_dealloc(base16, len16 * 8, 4);
                                let l17 = *ptr4.add(40).cast::<*mut u8>();
                                let l18 = *ptr4.add(44).cast::<usize>();
                                let base25 = l17;
                                let len25 = l18;
                                let mut result25 = _rt::Vec::with_capacity(len25);
                                for i in 0..len25 {
                                    let base = base25.add(i * 16);
                                    let e25 = {
                                        let l19 = *base.add(0).cast::<*mut u8>();
                                        let l20 = *base.add(4).cast::<usize>();
                                        let len21 = l20;
                                        let bytes21 =
                                            _rt::Vec::from_raw_parts(l19.cast(), len21, len21);
                                        let l22 = *base.add(8).cast::<*mut u8>();
                                        let l23 = *base.add(12).cast::<usize>();
                                        let len24 = l23;
                                        let bytes24 =
                                            _rt::Vec::from_raw_parts(l22.cast(), len24, len24);

                                        (_rt::string_lift(bytes21), _rt::string_lift(bytes24))
                                    };
                                    result25.push(e25);
                                }
                                _rt::cabi_dealloc(base25, len25 * 16, 4);
                                let l26 = i32::from(*ptr4.add(48).cast::<u8>());
                                let l27 = *ptr4.add(56).cast::<i64>();
                                let l28 = *ptr4.add(64).cast::<i64>();

                                WorkerMetadata {
                                    worker_id: WorkerId {
                                        component_id: ComponentId {
                                            uuid: Uuid {
                                                high_bits: l6 as u64,
                                                low_bits: l7 as u64,
                                            },
                                        },
                                        worker_name: _rt::string_lift(bytes10),
                                    },
                                    args: result16,
                                    env: result25,
                                    status: WorkerStatus::_lift(l26 as u8),
                                    component_version: l27 as u64,
                                    retry_count: l28 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod oplog {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type WitValue = super::super::super::golem::rpc::types::WitValue;
            pub type AccountId = super::super::super::golem::api::host::AccountId;
            pub type ComponentVersion = super::super::super::golem::api::host::ComponentVersion;
            pub type OplogIndex = super::super::super::golem::api::host::OplogIndex;
            pub type RetryPolicy = super::super::super::golem::api::host::RetryPolicy;
            pub type Uuid = super::super::super::golem::api::host::Uuid;
            pub type WorkerId = super::super::super::golem::api::host::WorkerId;
            #[derive(Clone, Copy)]
            pub enum WrappedFunctionType {
                /// The side-effect reads from the worker's local state (for example local file system,
                /// random generator, etc.)
                ReadLocal,
                /// The side-effect writes to the worker's local state (for example local file system)
                WriteLocal,
                /// The side-effect reads from external state (for example a key-value store)
                ReadRemote,
                /// The side-effect manipulates external state (for example an RPC call)
                WriteRemote,
                /// The side-effect manipulates external state through multiple invoked functions (for example
                /// a HTTP request where reading the response involves multiple host function calls)
                ///
                /// On the first invocation of the batch, the parameter should be `None` - this triggers
                /// writing a `BeginRemoteWrite` entry in the oplog. Followup invocations should contain
                /// this entry's index as the parameter. In batched remote writes it is the caller's responsibility
                /// to manually write an `EndRemoteWrite` entry (using `end_function`) when the operation is completed.
                WriteRemoteBatched(Option<OplogIndex>),
            }
            impl ::core::fmt::Debug for WrappedFunctionType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        WrappedFunctionType::ReadLocal => {
                            f.debug_tuple("WrappedFunctionType::ReadLocal").finish()
                        }
                        WrappedFunctionType::WriteLocal => {
                            f.debug_tuple("WrappedFunctionType::WriteLocal").finish()
                        }
                        WrappedFunctionType::ReadRemote => {
                            f.debug_tuple("WrappedFunctionType::ReadRemote").finish()
                        }
                        WrappedFunctionType::WriteRemote => {
                            f.debug_tuple("WrappedFunctionType::WriteRemote").finish()
                        }
                        WrappedFunctionType::WriteRemoteBatched(e) => f
                            .debug_tuple("WrappedFunctionType::WriteRemoteBatched")
                            .field(e)
                            .finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct PluginInstallationDescription {
                pub installation_id: Uuid,
                pub name: _rt::String,
                pub version: _rt::String,
                pub parameters: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for PluginInstallationDescription {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PluginInstallationDescription")
                        .field("installation-id", &self.installation_id)
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("parameters", &self.parameters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CreateParameters {
                pub timestamp: Datetime,
                pub worker_id: WorkerId,
                pub component_version: ComponentVersion,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub account_id: AccountId,
                pub parent: Option<WorkerId>,
                pub component_size: u64,
                pub initial_total_linear_memory_size: u64,
                pub initial_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for CreateParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("CreateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("worker-id", &self.worker_id)
                        .field("component-version", &self.component_version)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("account-id", &self.account_id)
                        .field("parent", &self.parent)
                        .field("component-size", &self.component_size)
                        .field(
                            "initial-total-linear-memory-size",
                            &self.initial_total_linear_memory_size,
                        )
                        .field("initial-active-plugins", &self.initial_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ImportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: WitValue,
                pub response: WitValue,
                pub wrapped_function_type: WrappedFunctionType,
            }
            impl ::core::fmt::Debug for ImportedFunctionInvokedParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ImportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("response", &self.response)
                        .field("wrapped-function-type", &self.wrapped_function_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: _rt::Vec<WitValue>,
                pub idempotency_key: _rt::String,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvokedParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("idempotency-key", &self.idempotency_key)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionCompletedParameters {
                pub timestamp: Datetime,
                pub response: WitValue,
                pub consumed_fuel: i64,
            }
            impl ::core::fmt::Debug for ExportedFunctionCompletedParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionCompletedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("response", &self.response)
                        .field("consumed-fuel", &self.consumed_fuel)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ErrorParameters {
                pub timestamp: Datetime,
                pub error: _rt::String,
            }
            impl ::core::fmt::Debug for ErrorParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ErrorParameters")
                        .field("timestamp", &self.timestamp)
                        .field("error", &self.error)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct JumpParameters {
                pub timestamp: Datetime,
                pub start: OplogIndex,
                pub end: OplogIndex,
            }
            impl ::core::fmt::Debug for JumpParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("JumpParameters")
                        .field("timestamp", &self.timestamp)
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ChangeRetryPolicyParameters {
                pub timestamp: Datetime,
                pub retry_policy: RetryPolicy,
            }
            impl ::core::fmt::Debug for ChangeRetryPolicyParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ChangeRetryPolicyParameters")
                        .field("timestamp", &self.timestamp)
                        .field("retry-policy", &self.retry_policy)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndAtomicRegionParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndAtomicRegionParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EndAtomicRegionParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndRemoteWriteParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndRemoteWriteParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EndRemoteWriteParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvocationParameters {
                pub idempotency_key: _rt::String,
                pub function_name: _rt::String,
                pub input: Option<_rt::Vec<WitValue>>,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvocationParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvocationParameters")
                        .field("idempotency-key", &self.idempotency_key)
                        .field("function-name", &self.function_name)
                        .field("input", &self.input)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum WorkerInvocation {
                ExportedFunction(ExportedFunctionInvocationParameters),
                ManualUpdate(ComponentVersion),
            }
            impl ::core::fmt::Debug for WorkerInvocation {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        WorkerInvocation::ExportedFunction(e) => f
                            .debug_tuple("WorkerInvocation::ExportedFunction")
                            .field(e)
                            .finish(),
                        WorkerInvocation::ManualUpdate(e) => f
                            .debug_tuple("WorkerInvocation::ManualUpdate")
                            .field(e)
                            .finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingWorkerInvocationParameters {
                pub timestamp: Datetime,
                pub invocation: WorkerInvocation,
            }
            impl ::core::fmt::Debug for PendingWorkerInvocationParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PendingWorkerInvocationParameters")
                        .field("timestamp", &self.timestamp)
                        .field("invocation", &self.invocation)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum UpdateDescription {
                /// Automatic update by replaying the oplog on the new version
                AutoUpdate,
                /// Custom update by loading a given snapshot on the new version
                SnapshotBased(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for UpdateDescription {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        UpdateDescription::AutoUpdate => {
                            f.debug_tuple("UpdateDescription::AutoUpdate").finish()
                        }
                        UpdateDescription::SnapshotBased(e) => f
                            .debug_tuple("UpdateDescription::SnapshotBased")
                            .field(e)
                            .finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub update_description: UpdateDescription,
            }
            impl ::core::fmt::Debug for PendingUpdateParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PendingUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("update-description", &self.update_description)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SuccessfulUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub new_component_size: u64,
                pub new_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for SuccessfulUpdateParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("SuccessfulUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("new-component-size", &self.new_component_size)
                        .field("new-active-plugins", &self.new_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct FailedUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub details: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for FailedUpdateParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("FailedUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("details", &self.details)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct GrowMemoryParameters {
                pub timestamp: Datetime,
                pub delta: u64,
            }
            impl ::core::fmt::Debug for GrowMemoryParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("GrowMemoryParameters")
                        .field("timestamp", &self.timestamp)
                        .field("delta", &self.delta)
                        .finish()
                }
            }
            pub type WorkerResourceId = u64;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct CreateResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: WorkerResourceId,
            }
            impl ::core::fmt::Debug for CreateResourceParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("CreateResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct DropResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: WorkerResourceId,
            }
            impl ::core::fmt::Debug for DropResourceParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DropResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DescribeResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: WorkerResourceId,
                pub resource_name: _rt::String,
                pub resource_params: _rt::Vec<WitValue>,
            }
            impl ::core::fmt::Debug for DescribeResourceParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DescribeResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .field("resource-name", &self.resource_name)
                        .field("resource-params", &self.resource_params)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum LogLevel {
                Stdout,
                Stderr,
                Trace,
                Debug,
                Info,
                Warn,
                Error,
                Critical,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Stdout => f.debug_tuple("LogLevel::Stdout").finish(),
                        LogLevel::Stderr => f.debug_tuple("LogLevel::Stderr").finish(),
                        LogLevel::Trace => f.debug_tuple("LogLevel::Trace").finish(),
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                        LogLevel::Critical => f.debug_tuple("LogLevel::Critical").finish(),
                    }
                }
            }

            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => LogLevel::Stdout,
                        1 => LogLevel::Stderr,
                        2 => LogLevel::Trace,
                        3 => LogLevel::Debug,
                        4 => LogLevel::Info,
                        5 => LogLevel::Warn,
                        6 => LogLevel::Error,
                        7 => LogLevel::Critical,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct LogParameters {
                pub timestamp: Datetime,
                pub level: LogLevel,
                pub context: _rt::String,
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for LogParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("LogParameters")
                        .field("timestamp", &self.timestamp)
                        .field("level", &self.level)
                        .field("context", &self.context)
                        .field("message", &self.message)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ActivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for ActivatePluginParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ActivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DeactivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for DeactivatePluginParameters {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DeactivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum OplogEntry {
                /// The initial worker oplog entry
                Create(CreateParameters),
                /// The worker invoked a host function
                ImportedFunctionInvoked(ImportedFunctionInvokedParameters),
                /// The worker has been invoked
                ExportedFunctionInvoked(ExportedFunctionInvokedParameters),
                /// The worker has completed an invocation
                ExportedFunctionCompleted(ExportedFunctionCompletedParameters),
                /// Worker suspended
                Suspend(Datetime),
                /// Worker failed
                Error(ErrorParameters),
                /// Marker entry added when get-oplog-index is called from the worker, to make the jumping behavior
                /// more predictable.
                NoOp(Datetime),
                /// The worker needs to recover up to the given target oplog index and continue running from
                /// the source oplog index from there
                /// `jump` is an oplog region representing that from the end of that region we want to go back to the start and
                /// ignore all recorded operations in between.
                Jump(JumpParameters),
                /// Indicates that the worker has been interrupted at this point.
                /// Only used to recompute the worker's (cached) status, has no effect on execution.
                Interrupted(Datetime),
                /// Indicates that the worker has been exited using WASI's exit function.
                Exited(Datetime),
                /// Overrides the worker's retry policy
                ChangeRetryPolicy(ChangeRetryPolicyParameters),
                /// Begins an atomic region. All oplog entries after `BeginAtomicRegion` are to be ignored during
                /// recovery except if there is a corresponding `EndAtomicRegion` entry.
                BeginAtomicRegion(Datetime),
                /// Ends an atomic region. All oplog entries between the corresponding `BeginAtomicRegion` and this
                /// entry are to be considered during recovery, and the begin/end markers can be removed during oplog
                /// compaction.
                EndAtomicRegion(EndAtomicRegionParameters),
                /// Begins a remote write operation. Only used when idempotence mode is off. In this case each
                /// remote write must be surrounded by a `BeginRemoteWrite` and `EndRemoteWrite` log pair and
                /// unfinished remote writes cannot be recovered.
                BeginRemoteWrite(Datetime),
                /// Marks the end of a remote write operation. Only used when idempotence mode is off.
                EndRemoteWrite(EndRemoteWriteParameters),
                /// An invocation request arrived while the worker was busy
                PendingWorkerInvocation(PendingWorkerInvocationParameters),
                /// An update request arrived and will be applied as soon the worker restarts
                PendingUpdate(PendingUpdateParameters),
                /// An update was successfully applied
                SuccessfulUpdate(SuccessfulUpdateParameters),
                /// An update failed to be applied
                FailedUpdate(FailedUpdateParameters),
                /// Increased total linear memory size
                GrowMemory(GrowMemoryParameters),
                /// Created a resource instance
                CreateResource(CreateResourceParameters),
                /// Dropped a resource instance
                DropResource(DropResourceParameters),
                /// Adds additional information for a created resource instance
                DescribeResource(DescribeResourceParameters),
                /// The worker emitted a log message
                Log(LogParameters),
                /// The worker's has been restarted, forgetting all its history
                Restart(Datetime),
                /// Activates a plugin
                ActivatePlugin(ActivatePluginParameters),
                /// Deactivates a plugin
                DeactivatePlugin(DeactivatePluginParameters),
            }
            impl ::core::fmt::Debug for OplogEntry {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        OplogEntry::Create(e) => {
                            f.debug_tuple("OplogEntry::Create").field(e).finish()
                        }
                        OplogEntry::ImportedFunctionInvoked(e) => f
                            .debug_tuple("OplogEntry::ImportedFunctionInvoked")
                            .field(e)
                            .finish(),
                        OplogEntry::ExportedFunctionInvoked(e) => f
                            .debug_tuple("OplogEntry::ExportedFunctionInvoked")
                            .field(e)
                            .finish(),
                        OplogEntry::ExportedFunctionCompleted(e) => f
                            .debug_tuple("OplogEntry::ExportedFunctionCompleted")
                            .field(e)
                            .finish(),
                        OplogEntry::Suspend(e) => {
                            f.debug_tuple("OplogEntry::Suspend").field(e).finish()
                        }
                        OplogEntry::Error(e) => {
                            f.debug_tuple("OplogEntry::Error").field(e).finish()
                        }
                        OplogEntry::NoOp(e) => f.debug_tuple("OplogEntry::NoOp").field(e).finish(),
                        OplogEntry::Jump(e) => f.debug_tuple("OplogEntry::Jump").field(e).finish(),
                        OplogEntry::Interrupted(e) => {
                            f.debug_tuple("OplogEntry::Interrupted").field(e).finish()
                        }
                        OplogEntry::Exited(e) => {
                            f.debug_tuple("OplogEntry::Exited").field(e).finish()
                        }
                        OplogEntry::ChangeRetryPolicy(e) => f
                            .debug_tuple("OplogEntry::ChangeRetryPolicy")
                            .field(e)
                            .finish(),
                        OplogEntry::BeginAtomicRegion(e) => f
                            .debug_tuple("OplogEntry::BeginAtomicRegion")
                            .field(e)
                            .finish(),
                        OplogEntry::EndAtomicRegion(e) => f
                            .debug_tuple("OplogEntry::EndAtomicRegion")
                            .field(e)
                            .finish(),
                        OplogEntry::BeginRemoteWrite(e) => f
                            .debug_tuple("OplogEntry::BeginRemoteWrite")
                            .field(e)
                            .finish(),
                        OplogEntry::EndRemoteWrite(e) => f
                            .debug_tuple("OplogEntry::EndRemoteWrite")
                            .field(e)
                            .finish(),
                        OplogEntry::PendingWorkerInvocation(e) => f
                            .debug_tuple("OplogEntry::PendingWorkerInvocation")
                            .field(e)
                            .finish(),
                        OplogEntry::PendingUpdate(e) => {
                            f.debug_tuple("OplogEntry::PendingUpdate").field(e).finish()
                        }
                        OplogEntry::SuccessfulUpdate(e) => f
                            .debug_tuple("OplogEntry::SuccessfulUpdate")
                            .field(e)
                            .finish(),
                        OplogEntry::FailedUpdate(e) => {
                            f.debug_tuple("OplogEntry::FailedUpdate").field(e).finish()
                        }
                        OplogEntry::GrowMemory(e) => {
                            f.debug_tuple("OplogEntry::GrowMemory").field(e).finish()
                        }
                        OplogEntry::CreateResource(e) => f
                            .debug_tuple("OplogEntry::CreateResource")
                            .field(e)
                            .finish(),
                        OplogEntry::DropResource(e) => {
                            f.debug_tuple("OplogEntry::DropResource").field(e).finish()
                        }
                        OplogEntry::DescribeResource(e) => f
                            .debug_tuple("OplogEntry::DescribeResource")
                            .field(e)
                            .finish(),
                        OplogEntry::Log(e) => f.debug_tuple("OplogEntry::Log").field(e).finish(),
                        OplogEntry::Restart(e) => {
                            f.debug_tuple("OplogEntry::Restart").field(e).finish()
                        }
                        OplogEntry::ActivatePlugin(e) => f
                            .debug_tuple("OplogEntry::ActivatePlugin")
                            .field(e)
                            .finish(),
                        OplogEntry::DeactivatePlugin(e) => f
                            .debug_tuple("OplogEntry::DeactivatePlugin")
                            .field(e)
                            .finish(),
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetOplog {
                handle: _rt::Resource<GetOplog>,
            }

            impl GetOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for GetOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]get-oplog"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct SearchOplog {
                handle: _rt::Resource<SearchOplog>,
            }

            impl SearchOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for SearchOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]search-oplog"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId, start: OplogIndex) -> Self {
                    unsafe {
                        let super::super::super::golem::api::host::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::api::host::ComponentId { uuid: uuid1 } =
                            component_id0;
                        let super::super::super::golem::api::host::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]get-oplog"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(start),
                        );
                        GetOplog::from_handle(ret as u32)
                    }
                }
            }
            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<OplogEntry>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[method]get-oplog.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base527 = l2;
                                    let len527 = l3;
                                    let mut result527 = _rt::Vec::with_capacity(len527);
                                    for i in 0..len527 {
                                        let base = base527.add(i * 136);
                                        let e527 = {
                                            let l4 = i32::from(*base.add(0).cast::<u8>());
                                            let v526 = match l4 {
                                                0 => {
                                                    let e526 = {
                                                        let l5 = *base.add(8).cast::<i64>();
                                                        let l6 = *base.add(16).cast::<i32>();
                                                        let l7 = *base.add(24).cast::<i64>();
                                                        let l8 = *base.add(32).cast::<i64>();
                                                        let l9 = *base.add(40).cast::<*mut u8>();
                                                        let l10 = *base.add(44).cast::<usize>();
                                                        let len11 = l10;
                                                        let bytes11 = _rt::Vec::from_raw_parts(
                                                            l9.cast(),
                                                            len11,
                                                            len11,
                                                        );
                                                        let l12 = *base.add(48).cast::<i64>();
                                                        let l13 = *base.add(56).cast::<*mut u8>();
                                                        let l14 = *base.add(60).cast::<usize>();
                                                        let base18 = l13;
                                                        let len18 = l14;
                                                        let mut result18 =
                                                            _rt::Vec::with_capacity(len18);
                                                        for i in 0..len18 {
                                                            let base = base18.add(i * 8);
                                                            let e18 = {
                                                                let l15 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l16 =
                                                                    *base.add(4).cast::<usize>();
                                                                let len17 = l16;
                                                                let bytes17 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l15.cast(),
                                                                        len17,
                                                                        len17,
                                                                    );

                                                                _rt::string_lift(bytes17)
                                                            };
                                                            result18.push(e18);
                                                        }
                                                        _rt::cabi_dealloc(base18, len18 * 8, 4);
                                                        let l19 = *base.add(64).cast::<*mut u8>();
                                                        let l20 = *base.add(68).cast::<usize>();
                                                        let base27 = l19;
                                                        let len27 = l20;
                                                        let mut result27 =
                                                            _rt::Vec::with_capacity(len27);
                                                        for i in 0..len27 {
                                                            let base = base27.add(i * 16);
                                                            let e27 = {
                                                                let l21 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l22 =
                                                                    *base.add(4).cast::<usize>();
                                                                let len23 = l22;
                                                                let bytes23 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l21.cast(),
                                                                        len23,
                                                                        len23,
                                                                    );
                                                                let l24 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l25 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len26 = l25;
                                                                let bytes26 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l24.cast(),
                                                                        len26,
                                                                        len26,
                                                                    );

                                                                (
                                                                    _rt::string_lift(bytes23),
                                                                    _rt::string_lift(bytes26),
                                                                )
                                                            };
                                                            result27.push(e27);
                                                        }
                                                        _rt::cabi_dealloc(base27, len27 * 16, 4);
                                                        let l28 = *base.add(72).cast::<*mut u8>();
                                                        let l29 = *base.add(76).cast::<usize>();
                                                        let len30 = l29;
                                                        let bytes30 = _rt::Vec::from_raw_parts(
                                                            l28.cast(),
                                                            len30,
                                                            len30,
                                                        );
                                                        let l31 =
                                                            i32::from(*base.add(80).cast::<u8>());
                                                        let l37 = *base.add(112).cast::<i64>();
                                                        let l38 = *base.add(120).cast::<i64>();
                                                        let l39 = *base.add(128).cast::<*mut u8>();
                                                        let l40 = *base.add(132).cast::<usize>();
                                                        let base58 = l39;
                                                        let len58 = l40;
                                                        let mut result58 =
                                                            _rt::Vec::with_capacity(len58);
                                                        for i in 0..len58 {
                                                            let base = base58.add(i * 40);
                                                            let e58 = {
                                                                let l41 =
                                                                    *base.add(0).cast::<i64>();
                                                                let l42 =
                                                                    *base.add(8).cast::<i64>();
                                                                let l43 =
                                                                    *base.add(16).cast::<*mut u8>();
                                                                let l44 =
                                                                    *base.add(20).cast::<usize>();
                                                                let len45 = l44;
                                                                let bytes45 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l43.cast(),
                                                                        len45,
                                                                        len45,
                                                                    );
                                                                let l46 =
                                                                    *base.add(24).cast::<*mut u8>();
                                                                let l47 =
                                                                    *base.add(28).cast::<usize>();
                                                                let len48 = l47;
                                                                let bytes48 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l46.cast(),
                                                                        len48,
                                                                        len48,
                                                                    );
                                                                let l49 =
                                                                    *base.add(32).cast::<*mut u8>();
                                                                let l50 =
                                                                    *base.add(36).cast::<usize>();
                                                                let base57 = l49;
                                                                let len57 = l50;
                                                                let mut result57 =
                                                                    _rt::Vec::with_capacity(len57);
                                                                for i in 0..len57 {
                                                                    let base = base57.add(i * 16);
                                                                    let e57 = {
                                                                        let l51 = *base
                                                                            .add(0)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l52 = *base
                                                                            .add(4)
                                                                            .cast::<usize>();
                                                                        let len53 = l52;
                                                                        let bytes53 = _rt::Vec::from_raw_parts(l51.cast(), len53, len53);
                                                                        let l54 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l55 = *base
                                                                            .add(12)
                                                                            .cast::<usize>();
                                                                        let len56 = l55;
                                                                        let bytes56 = _rt::Vec::from_raw_parts(l54.cast(), len56, len56);

                                                                        (
                                                                            _rt::string_lift(
                                                                                bytes53,
                                                                            ),
                                                                            _rt::string_lift(
                                                                                bytes56,
                                                                            ),
                                                                        )
                                                                    };
                                                                    result57.push(e57);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base57,
                                                                    len57 * 16,
                                                                    4,
                                                                );

                                                                PluginInstallationDescription{
                                  installation_id: super::super::super::golem::api::host::Uuid{
                                    high_bits: l41 as u64,
                                    low_bits: l42 as u64,
                                  },
                                  name: _rt::string_lift(bytes45),
                                  version: _rt::string_lift(bytes48),
                                  parameters: result57,
                                }
                                                            };
                                                            result58.push(e58);
                                                        }
                                                        _rt::cabi_dealloc(base58, len58 * 40, 8);

                                                        CreateParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l5 as u64,
                                nanoseconds: l6 as u32,
                              },
                              worker_id: super::super::super::golem::api::host::WorkerId{
                                component_id: super::super::super::golem::api::host::ComponentId{
                                  uuid: super::super::super::golem::api::host::Uuid{
                                    high_bits: l7 as u64,
                                    low_bits: l8 as u64,
                                  },
                                },
                                worker_name: _rt::string_lift(bytes11),
                              },
                              component_version: l12 as u64,
                              args: result18,
                              env: result27,
                              account_id: super::super::super::golem::api::host::AccountId{
                                value: _rt::string_lift(bytes30),
                              },
                              parent: match l31 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l32 = *base.add(88).cast::<i64>();
                                    let l33 = *base.add(96).cast::<i64>();
                                    let l34 = *base.add(104).cast::<*mut u8>();
                                    let l35 = *base.add(108).cast::<usize>();
                                    let len36 = l35;
                                    let bytes36 = _rt::Vec::from_raw_parts(l34.cast(), len36, len36);

                                    super::super::super::golem::api::host::WorkerId{
                                      component_id: super::super::super::golem::api::host::ComponentId{
                                        uuid: super::super::super::golem::api::host::Uuid{
                                          high_bits: l32 as u64,
                                          low_bits: l33 as u64,
                                        },
                                      },
                                      worker_name: _rt::string_lift(bytes36),
                                    }
                                  };
                                  Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                              },
                              component_size: l37 as u64,
                              initial_total_linear_memory_size: l38 as u64,
                              initial_active_plugins: result58,
                            }
                                                    };
                                                    OplogEntry::Create(e526)
                                                }
                                                1 => {
                                                    let e526 = {
                                                        let l59 = *base.add(8).cast::<i64>();
                                                        let l60 = *base.add(16).cast::<i32>();
                                                        let l61 = *base.add(24).cast::<*mut u8>();
                                                        let l62 = *base.add(28).cast::<usize>();
                                                        let len63 = l62;
                                                        let bytes63 = _rt::Vec::from_raw_parts(
                                                            l61.cast(),
                                                            len63,
                                                            len63,
                                                        );
                                                        let l64 = *base.add(32).cast::<*mut u8>();
                                                        let l65 = *base.add(36).cast::<usize>();
                                                        let base111 = l64;
                                                        let len111 = l65;
                                                        let mut result111 =
                                                            _rt::Vec::with_capacity(len111);
                                                        for i in 0..len111 {
                                                            let base = base111.add(i * 24);
                                                            let e111 = {
                                                                let l66 = i32::from(
                                                                    *base.add(0).cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::rpc::types::WitNode as V110;
                                                                let v110 = match l66 {
                                                                    0 => {
                                                                        let e110 = {
                                                                            let l67 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l68 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len69 = l68;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l67.cast(),
                                                                                len69,
                                                                                len69,
                                                                            )
                                                                        };
                                                                        V110::RecordValue(e110)
                                                                    }
                                                                    1 => {
                                                                        let e110 = {
                                                                            let l70 = *base
                                                                                .add(8)
                                                                                .cast::<i32>(
                                                                            );
                                                                            let l71 = i32::from(
                                                                                *base
                                                                                    .add(12)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (l70 as u32, match l71 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l72 = *base.add(16).cast::<i32>();

                                            l72
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        V110::VariantValue(e110)
                                                                    }
                                                                    2 => {
                                                                        let e110 = {
                                                                            let l73 = *base
                                                                                .add(8)
                                                                                .cast::<i32>(
                                                                            );

                                                                            l73 as u32
                                                                        };
                                                                        V110::EnumValue(e110)
                                                                    }
                                                                    3 => {
                                                                        let e110 = {
                                                                            let l74 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l75 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let base77 = l74;
                                                                            let len77 = l75;
                                                                            let mut result77 = _rt::Vec::with_capacity(len77);
                                                                            for i in 0..len77 {
                                                                                let base = base77
                                                                                    .add(i * 1);
                                                                                let e77 = {
                                                                                    let l76 = i32::from(*base.add(0).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l76 as u8,
                                                                                    )
                                                                                };
                                                                                result77.push(e77);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base77,
                                                                                len77 * 1,
                                                                                1,
                                                                            );

                                                                            result77
                                                                        };
                                                                        V110::FlagsValue(e110)
                                                                    }
                                                                    4 => {
                                                                        let e110 = {
                                                                            let l78 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l79 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len80 = l79;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l78.cast(),
                                                                                len80,
                                                                                len80,
                                                                            )
                                                                        };
                                                                        V110::TupleValue(e110)
                                                                    }
                                                                    5 => {
                                                                        let e110 = {
                                                                            let l81 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l82 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len83 = l82;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l81.cast(),
                                                                                len83,
                                                                                len83,
                                                                            )
                                                                        };
                                                                        V110::ListValue(e110)
                                                                    }
                                                                    6 => {
                                                                        let e110 = {
                                                                            let l84 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l84 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l85 = *base.add(12).cast::<i32>();

                                            l85
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V110::OptionValue(e110)
                                                                    }
                                                                    7 => {
                                                                        let e110 = {
                                                                            let l86 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l86 {
                                        0 => {
                                          let e = {
                                            let l87 = i32::from(*base.add(12).cast::<u8>());

                                            match l87 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l88 = *base.add(16).cast::<i32>();

                                                  l88
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l89 = i32::from(*base.add(12).cast::<u8>());

                                            match l89 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l90 = *base.add(16).cast::<i32>();

                                                  l90
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V110::ResultValue(e110)
                                                                    }
                                                                    8 => {
                                                                        let e110 = {
                                                                            let l91 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            l91 as u8
                                                                        };
                                                                        V110::PrimU8(e110)
                                                                    }
                                                                    9 => {
                                                                        let e110 = {
                                                                            let l92 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u16>(),
                                                                            );

                                                                            l92 as u16
                                                                        };
                                                                        V110::PrimU16(e110)
                                                                    }
                                                                    10 => {
                                                                        let e110 = {
                                                                            let l93 = *base
                                                                                .add(8)
                                                                                .cast::<i32>(
                                                                            );

                                                                            l93 as u32
                                                                        };
                                                                        V110::PrimU32(e110)
                                                                    }
                                                                    11 => {
                                                                        let e110 = {
                                                                            let l94 = *base
                                                                                .add(8)
                                                                                .cast::<i64>(
                                                                            );

                                                                            l94 as u64
                                                                        };
                                                                        V110::PrimU64(e110)
                                                                    }
                                                                    12 => {
                                                                        let e110 = {
                                                                            let l95 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i8>(),
                                                                            );

                                                                            l95 as i8
                                                                        };
                                                                        V110::PrimS8(e110)
                                                                    }
                                                                    13 => {
                                                                        let e110 = {
                                                                            let l96 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i16>(),
                                                                            );

                                                                            l96 as i16
                                                                        };
                                                                        V110::PrimS16(e110)
                                                                    }
                                                                    14 => {
                                                                        let e110 = {
                                                                            let l97 = *base
                                                                                .add(8)
                                                                                .cast::<i32>(
                                                                            );

                                                                            l97
                                                                        };
                                                                        V110::PrimS32(e110)
                                                                    }
                                                                    15 => {
                                                                        let e110 = {
                                                                            let l98 = *base
                                                                                .add(8)
                                                                                .cast::<i64>(
                                                                            );

                                                                            l98
                                                                        };
                                                                        V110::PrimS64(e110)
                                                                    }
                                                                    16 => {
                                                                        let e110 = {
                                                                            let l99 = *base
                                                                                .add(8)
                                                                                .cast::<f32>(
                                                                            );

                                                                            l99
                                                                        };
                                                                        V110::PrimFloat32(e110)
                                                                    }
                                                                    17 => {
                                                                        let e110 = {
                                                                            let l100 = *base
                                                                                .add(8)
                                                                                .cast::<f64>();

                                                                            l100
                                                                        };
                                                                        V110::PrimFloat64(e110)
                                                                    }
                                                                    18 => {
                                                                        let e110 = {
                                                                            let l101 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            _rt::char_lift(
                                                                                l101 as u32,
                                                                            )
                                                                        };
                                                                        V110::PrimChar(e110)
                                                                    }
                                                                    19 => {
                                                                        let e110 = {
                                                                            let l102 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l102 as u8,
                                                                            )
                                                                        };
                                                                        V110::PrimBool(e110)
                                                                    }
                                                                    20 => {
                                                                        let e110 = {
                                                                            let l103 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l104 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len105 = l104;
                                                                            let bytes105 = _rt::Vec::from_raw_parts(l103.cast(), len105, len105);

                                                                            _rt::string_lift(
                                                                                bytes105,
                                                                            )
                                                                        };
                                                                        V110::PrimString(e110)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e110 = {
                                                                            let l106 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l107 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len108 = l107;
                                                                            let bytes108 = _rt::Vec::from_raw_parts(l106.cast(), len108, len108);
                                                                            let l109 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            (super::super::super::golem::rpc::types::Uri{
                                        value: _rt::string_lift(bytes108),
                                      }, l109 as u64)
                                                                        };
                                                                        V110::Handle(e110)
                                                                    }
                                                                };

                                                                v110
                                                            };
                                                            result111.push(e111);
                                                        }
                                                        _rt::cabi_dealloc(base111, len111 * 24, 8);
                                                        let l112 = *base.add(40).cast::<*mut u8>();
                                                        let l113 = *base.add(44).cast::<usize>();
                                                        let base159 = l112;
                                                        let len159 = l113;
                                                        let mut result159 =
                                                            _rt::Vec::with_capacity(len159);
                                                        for i in 0..len159 {
                                                            let base = base159.add(i * 24);
                                                            let e159 = {
                                                                let l114 = i32::from(
                                                                    *base.add(0).cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::rpc::types::WitNode as V158;
                                                                let v158 = match l114 {
                                                                    0 => {
                                                                        let e158 = {
                                                                            let l115 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l116 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len117 = l116;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l115.cast(),
                                                                                len117,
                                                                                len117,
                                                                            )
                                                                        };
                                                                        V158::RecordValue(e158)
                                                                    }
                                                                    1 => {
                                                                        let e158 = {
                                                                            let l118 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();
                                                                            let l119 = i32::from(
                                                                                *base
                                                                                    .add(12)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (l118 as u32, match l119 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l120 = *base.add(16).cast::<i32>();

                                            l120
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        V158::VariantValue(e158)
                                                                    }
                                                                    2 => {
                                                                        let e158 = {
                                                                            let l121 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l121 as u32
                                                                        };
                                                                        V158::EnumValue(e158)
                                                                    }
                                                                    3 => {
                                                                        let e158 = {
                                                                            let l122 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l123 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let base125 = l122;
                                                                            let len125 = l123;
                                                                            let mut result125 = _rt::Vec::with_capacity(len125);
                                                                            for i in 0..len125 {
                                                                                let base = base125
                                                                                    .add(i * 1);
                                                                                let e125 = {
                                                                                    let l124 = i32::from(*base.add(0).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l124 as u8,
                                                                                    )
                                                                                };
                                                                                result125
                                                                                    .push(e125);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base125,
                                                                                len125 * 1,
                                                                                1,
                                                                            );

                                                                            result125
                                                                        };
                                                                        V158::FlagsValue(e158)
                                                                    }
                                                                    4 => {
                                                                        let e158 = {
                                                                            let l126 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l127 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len128 = l127;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l126.cast(),
                                                                                len128,
                                                                                len128,
                                                                            )
                                                                        };
                                                                        V158::TupleValue(e158)
                                                                    }
                                                                    5 => {
                                                                        let e158 = {
                                                                            let l129 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l130 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len131 = l130;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l129.cast(),
                                                                                len131,
                                                                                len131,
                                                                            )
                                                                        };
                                                                        V158::ListValue(e158)
                                                                    }
                                                                    6 => {
                                                                        let e158 = {
                                                                            let l132 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l132 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l133 = *base.add(12).cast::<i32>();

                                            l133
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V158::OptionValue(e158)
                                                                    }
                                                                    7 => {
                                                                        let e158 = {
                                                                            let l134 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l134 {
                                        0 => {
                                          let e = {
                                            let l135 = i32::from(*base.add(12).cast::<u8>());

                                            match l135 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l136 = *base.add(16).cast::<i32>();

                                                  l136
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l137 = i32::from(*base.add(12).cast::<u8>());

                                            match l137 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l138 = *base.add(16).cast::<i32>();

                                                  l138
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V158::ResultValue(e158)
                                                                    }
                                                                    8 => {
                                                                        let e158 = {
                                                                            let l139 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            l139 as u8
                                                                        };
                                                                        V158::PrimU8(e158)
                                                                    }
                                                                    9 => {
                                                                        let e158 = {
                                                                            let l140 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u16>(),
                                                                            );

                                                                            l140 as u16
                                                                        };
                                                                        V158::PrimU16(e158)
                                                                    }
                                                                    10 => {
                                                                        let e158 = {
                                                                            let l141 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l141 as u32
                                                                        };
                                                                        V158::PrimU32(e158)
                                                                    }
                                                                    11 => {
                                                                        let e158 = {
                                                                            let l142 = *base
                                                                                .add(8)
                                                                                .cast::<i64>();

                                                                            l142 as u64
                                                                        };
                                                                        V158::PrimU64(e158)
                                                                    }
                                                                    12 => {
                                                                        let e158 = {
                                                                            let l143 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i8>(),
                                                                            );

                                                                            l143 as i8
                                                                        };
                                                                        V158::PrimS8(e158)
                                                                    }
                                                                    13 => {
                                                                        let e158 = {
                                                                            let l144 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i16>(),
                                                                            );

                                                                            l144 as i16
                                                                        };
                                                                        V158::PrimS16(e158)
                                                                    }
                                                                    14 => {
                                                                        let e158 = {
                                                                            let l145 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l145
                                                                        };
                                                                        V158::PrimS32(e158)
                                                                    }
                                                                    15 => {
                                                                        let e158 = {
                                                                            let l146 = *base
                                                                                .add(8)
                                                                                .cast::<i64>();

                                                                            l146
                                                                        };
                                                                        V158::PrimS64(e158)
                                                                    }
                                                                    16 => {
                                                                        let e158 = {
                                                                            let l147 = *base
                                                                                .add(8)
                                                                                .cast::<f32>();

                                                                            l147
                                                                        };
                                                                        V158::PrimFloat32(e158)
                                                                    }
                                                                    17 => {
                                                                        let e158 = {
                                                                            let l148 = *base
                                                                                .add(8)
                                                                                .cast::<f64>();

                                                                            l148
                                                                        };
                                                                        V158::PrimFloat64(e158)
                                                                    }
                                                                    18 => {
                                                                        let e158 = {
                                                                            let l149 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            _rt::char_lift(
                                                                                l149 as u32,
                                                                            )
                                                                        };
                                                                        V158::PrimChar(e158)
                                                                    }
                                                                    19 => {
                                                                        let e158 = {
                                                                            let l150 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l150 as u8,
                                                                            )
                                                                        };
                                                                        V158::PrimBool(e158)
                                                                    }
                                                                    20 => {
                                                                        let e158 = {
                                                                            let l151 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l152 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len153 = l152;
                                                                            let bytes153 = _rt::Vec::from_raw_parts(l151.cast(), len153, len153);

                                                                            _rt::string_lift(
                                                                                bytes153,
                                                                            )
                                                                        };
                                                                        V158::PrimString(e158)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e158 = {
                                                                            let l154 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l155 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len156 = l155;
                                                                            let bytes156 = _rt::Vec::from_raw_parts(l154.cast(), len156, len156);
                                                                            let l157 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            (super::super::super::golem::rpc::types::Uri{
                                        value: _rt::string_lift(bytes156),
                                      }, l157 as u64)
                                                                        };
                                                                        V158::Handle(e158)
                                                                    }
                                                                };

                                                                v158
                                                            };
                                                            result159.push(e159);
                                                        }
                                                        _rt::cabi_dealloc(base159, len159 * 24, 8);
                                                        let l160 =
                                                            i32::from(*base.add(48).cast::<u8>());
                                                        let v163 = match l160 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 4,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e163 = {
                                                                    let l161 = i32::from(
                                                                        *base.add(56).cast::<u8>(),
                                                                    );

                                                                    match l161 {
                                    0 => None,
                                    1 => {
                                      let e = {
                                        let l162 = *base.add(64).cast::<i64>();

                                        l162 as u64
                                      };
                                      Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                  }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e163)
                                                            }
                                                        };

                                                        ImportedFunctionInvokedParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l59 as u64,
                                nanoseconds: l60 as u32,
                              },
                              function_name: _rt::string_lift(bytes63),
                              request: super::super::super::golem::rpc::types::WitValue{
                                nodes: result111,
                              },
                              response: super::super::super::golem::rpc::types::WitValue{
                                nodes: result159,
                              },
                              wrapped_function_type: v163,
                            }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e526)
                                                }
                                                2 => {
                                                    let e526 = {
                                                        let l164 = *base.add(8).cast::<i64>();
                                                        let l165 = *base.add(16).cast::<i32>();
                                                        let l166 = *base.add(24).cast::<*mut u8>();
                                                        let l167 = *base.add(28).cast::<usize>();
                                                        let len168 = l167;
                                                        let bytes168 = _rt::Vec::from_raw_parts(
                                                            l166.cast(),
                                                            len168,
                                                            len168,
                                                        );
                                                        let l169 = *base.add(32).cast::<*mut u8>();
                                                        let l170 = *base.add(36).cast::<usize>();
                                                        let base219 = l169;
                                                        let len219 = l170;
                                                        let mut result219 =
                                                            _rt::Vec::with_capacity(len219);
                                                        for i in 0..len219 {
                                                            let base = base219.add(i * 8);
                                                            let e219 = {
                                                                let l171 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l172 =
                                                                    *base.add(4).cast::<usize>();
                                                                let base218 = l171;
                                                                let len218 = l172;
                                                                let mut result218 =
                                                                    _rt::Vec::with_capacity(len218);
                                                                for i in 0..len218 {
                                                                    let base = base218.add(i * 24);
                                                                    let e218 = {
                                                                        let l173 = i32::from(
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        use super::super::super::golem::rpc::types::WitNode as V217;
                                                                        let v217 = match l173 {
                                                                            0 => {
                                                                                let e217 = {
                                                                                    let l174 = *base.add(8).cast::<*mut u8>();
                                                                                    let l175 = *base.add(12).cast::<usize>();
                                                                                    let len176 =
                                                                                        l175;

                                                                                    _rt::Vec::from_raw_parts(l174.cast(), len176, len176)
                                                                                };
                                                                                V217::RecordValue(
                                                                                    e217,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e217 = {
                                                                                    let l177 = *base.add(8).cast::<i32>();
                                                                                    let l178 = i32::from(*base.add(12).cast::<u8>());

                                                                                    (l177 as u32, match l178 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l179 = *base.add(16).cast::<i32>();

                                                l179
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          })
                                                                                };
                                                                                V217::VariantValue(
                                                                                    e217,
                                                                                )
                                                                            }
                                                                            2 => {
                                                                                let e217 = {
                                                                                    let l180 = *base.add(8).cast::<i32>();

                                                                                    l180 as u32
                                                                                };
                                                                                V217::EnumValue(
                                                                                    e217,
                                                                                )
                                                                            }
                                                                            3 => {
                                                                                let e217 = {
                                                                                    let l181 = *base.add(8).cast::<*mut u8>();
                                                                                    let l182 = *base.add(12).cast::<usize>();
                                                                                    let base184 =
                                                                                        l181;
                                                                                    let len184 =
                                                                                        l182;
                                                                                    let mut result184 = _rt::Vec::with_capacity(len184);
                                                                                    for i in
                                                                                        0..len184
                                                                                    {
                                                                                        let base = base184.add(i * 1);
                                                                                        let e184 = {
                                                                                            let l183 = i32::from(*base.add(0).cast::<u8>());

                                                                                            _rt::bool_lift(l183 as u8)
                                                                                        };
                                                                                        result184
                                                                                            .push(
                                                                                            e184,
                                                                                        );
                                                                                    }
                                                                                    _rt::cabi_dealloc(base184, len184 * 1, 1);

                                                                                    result184
                                                                                };
                                                                                V217::FlagsValue(
                                                                                    e217,
                                                                                )
                                                                            }
                                                                            4 => {
                                                                                let e217 = {
                                                                                    let l185 = *base.add(8).cast::<*mut u8>();
                                                                                    let l186 = *base.add(12).cast::<usize>();
                                                                                    let len187 =
                                                                                        l186;

                                                                                    _rt::Vec::from_raw_parts(l185.cast(), len187, len187)
                                                                                };
                                                                                V217::TupleValue(
                                                                                    e217,
                                                                                )
                                                                            }
                                                                            5 => {
                                                                                let e217 = {
                                                                                    let l188 = *base.add(8).cast::<*mut u8>();
                                                                                    let l189 = *base.add(12).cast::<usize>();
                                                                                    let len190 =
                                                                                        l189;

                                                                                    _rt::Vec::from_raw_parts(l188.cast(), len190, len190)
                                                                                };
                                                                                V217::ListValue(
                                                                                    e217,
                                                                                )
                                                                            }
                                                                            6 => {
                                                                                let e217 = {
                                                                                    let l191 = i32::from(*base.add(8).cast::<u8>());

                                                                                    match l191 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l192 = *base.add(12).cast::<i32>();

                                                l192
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }
                                                                                };
                                                                                V217::OptionValue(
                                                                                    e217,
                                                                                )
                                                                            }
                                                                            7 => {
                                                                                let e217 = {
                                                                                    let l193 = i32::from(*base.add(8).cast::<u8>());

                                                                                    match l193 {
                                            0 => {
                                              let e = {
                                                let l194 = i32::from(*base.add(12).cast::<u8>());

                                                match l194 {
                                                  0 => None,
                                                  1 => {
                                                    let e = {
                                                      let l195 = *base.add(16).cast::<i32>();

                                                      l195
                                                    };
                                                    Some(e)
                                                  }
                                                  _ => _rt::invalid_enum_discriminant(),
                                                }
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l196 = i32::from(*base.add(12).cast::<u8>());

                                                match l196 {
                                                  0 => None,
                                                  1 => {
                                                    let e = {
                                                      let l197 = *base.add(16).cast::<i32>();

                                                      l197
                                                    };
                                                    Some(e)
                                                  }
                                                  _ => _rt::invalid_enum_discriminant(),
                                                }
                                              };
                                              Err(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }
                                                                                };
                                                                                V217::ResultValue(
                                                                                    e217,
                                                                                )
                                                                            }
                                                                            8 => {
                                                                                let e217 = {
                                                                                    let l198 = i32::from(*base.add(8).cast::<u8>());

                                                                                    l198 as u8
                                                                                };
                                                                                V217::PrimU8(e217)
                                                                            }
                                                                            9 => {
                                                                                let e217 = {
                                                                                    let l199 = i32::from(*base.add(8).cast::<u16>());

                                                                                    l199 as u16
                                                                                };
                                                                                V217::PrimU16(e217)
                                                                            }
                                                                            10 => {
                                                                                let e217 = {
                                                                                    let l200 = *base.add(8).cast::<i32>();

                                                                                    l200 as u32
                                                                                };
                                                                                V217::PrimU32(e217)
                                                                            }
                                                                            11 => {
                                                                                let e217 = {
                                                                                    let l201 = *base.add(8).cast::<i64>();

                                                                                    l201 as u64
                                                                                };
                                                                                V217::PrimU64(e217)
                                                                            }
                                                                            12 => {
                                                                                let e217 = {
                                                                                    let l202 = i32::from(*base.add(8).cast::<i8>());

                                                                                    l202 as i8
                                                                                };
                                                                                V217::PrimS8(e217)
                                                                            }
                                                                            13 => {
                                                                                let e217 = {
                                                                                    let l203 = i32::from(*base.add(8).cast::<i16>());

                                                                                    l203 as i16
                                                                                };
                                                                                V217::PrimS16(e217)
                                                                            }
                                                                            14 => {
                                                                                let e217 = {
                                                                                    let l204 = *base.add(8).cast::<i32>();

                                                                                    l204
                                                                                };
                                                                                V217::PrimS32(e217)
                                                                            }
                                                                            15 => {
                                                                                let e217 = {
                                                                                    let l205 = *base.add(8).cast::<i64>();

                                                                                    l205
                                                                                };
                                                                                V217::PrimS64(e217)
                                                                            }
                                                                            16 => {
                                                                                let e217 = {
                                                                                    let l206 = *base.add(8).cast::<f32>();

                                                                                    l206
                                                                                };
                                                                                V217::PrimFloat32(
                                                                                    e217,
                                                                                )
                                                                            }
                                                                            17 => {
                                                                                let e217 = {
                                                                                    let l207 = *base.add(8).cast::<f64>();

                                                                                    l207
                                                                                };
                                                                                V217::PrimFloat64(
                                                                                    e217,
                                                                                )
                                                                            }
                                                                            18 => {
                                                                                let e217 = {
                                                                                    let l208 = *base.add(8).cast::<i32>();

                                                                                    _rt::char_lift(
                                                                                        l208 as u32,
                                                                                    )
                                                                                };
                                                                                V217::PrimChar(e217)
                                                                            }
                                                                            19 => {
                                                                                let e217 = {
                                                                                    let l209 = i32::from(*base.add(8).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l209 as u8,
                                                                                    )
                                                                                };
                                                                                V217::PrimBool(e217)
                                                                            }
                                                                            20 => {
                                                                                let e217 = {
                                                                                    let l210 = *base.add(8).cast::<*mut u8>();
                                                                                    let l211 = *base.add(12).cast::<usize>();
                                                                                    let len212 =
                                                                                        l211;
                                                                                    let bytes212 = _rt::Vec::from_raw_parts(l210.cast(), len212, len212);

                                                                                    _rt::string_lift(
                                                                                        bytes212,
                                                                                    )
                                                                                };
                                                                                V217::PrimString(
                                                                                    e217,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e217 = {
                                                                                    let l213 = *base.add(8).cast::<*mut u8>();
                                                                                    let l214 = *base.add(12).cast::<usize>();
                                                                                    let len215 =
                                                                                        l214;
                                                                                    let bytes215 = _rt::Vec::from_raw_parts(l213.cast(), len215, len215);
                                                                                    let l216 = *base.add(16).cast::<i64>();

                                                                                    (super::super::super::golem::rpc::types::Uri{
                                            value: _rt::string_lift(bytes215),
                                          }, l216 as u64)
                                                                                };
                                                                                V217::Handle(e217)
                                                                            }
                                                                        };

                                                                        v217
                                                                    };
                                                                    result218.push(e218);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base218,
                                                                    len218 * 24,
                                                                    8,
                                                                );

                                                                super::super::super::golem::rpc::types::WitValue{
                                  nodes: result218,
                                }
                                                            };
                                                            result219.push(e219);
                                                        }
                                                        _rt::cabi_dealloc(base219, len219 * 8, 4);
                                                        let l220 = *base.add(40).cast::<*mut u8>();
                                                        let l221 = *base.add(44).cast::<usize>();
                                                        let len222 = l221;
                                                        let bytes222 = _rt::Vec::from_raw_parts(
                                                            l220.cast(),
                                                            len222,
                                                            len222,
                                                        );

                                                        ExportedFunctionInvokedParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l164 as u64,
                                nanoseconds: l165 as u32,
                              },
                              function_name: _rt::string_lift(bytes168),
                              request: result219,
                              idempotency_key: _rt::string_lift(bytes222),
                            }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e526)
                                                }
                                                3 => {
                                                    let e526 = {
                                                        let l223 = *base.add(8).cast::<i64>();
                                                        let l224 = *base.add(16).cast::<i32>();
                                                        let l225 = *base.add(24).cast::<*mut u8>();
                                                        let l226 = *base.add(28).cast::<usize>();
                                                        let base272 = l225;
                                                        let len272 = l226;
                                                        let mut result272 =
                                                            _rt::Vec::with_capacity(len272);
                                                        for i in 0..len272 {
                                                            let base = base272.add(i * 24);
                                                            let e272 = {
                                                                let l227 = i32::from(
                                                                    *base.add(0).cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::rpc::types::WitNode as V271;
                                                                let v271 = match l227 {
                                                                    0 => {
                                                                        let e271 = {
                                                                            let l228 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l229 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len230 = l229;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l228.cast(),
                                                                                len230,
                                                                                len230,
                                                                            )
                                                                        };
                                                                        V271::RecordValue(e271)
                                                                    }
                                                                    1 => {
                                                                        let e271 = {
                                                                            let l231 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();
                                                                            let l232 = i32::from(
                                                                                *base
                                                                                    .add(12)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (l231 as u32, match l232 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l233 = *base.add(16).cast::<i32>();

                                            l233
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        V271::VariantValue(e271)
                                                                    }
                                                                    2 => {
                                                                        let e271 = {
                                                                            let l234 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l234 as u32
                                                                        };
                                                                        V271::EnumValue(e271)
                                                                    }
                                                                    3 => {
                                                                        let e271 = {
                                                                            let l235 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l236 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let base238 = l235;
                                                                            let len238 = l236;
                                                                            let mut result238 = _rt::Vec::with_capacity(len238);
                                                                            for i in 0..len238 {
                                                                                let base = base238
                                                                                    .add(i * 1);
                                                                                let e238 = {
                                                                                    let l237 = i32::from(*base.add(0).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l237 as u8,
                                                                                    )
                                                                                };
                                                                                result238
                                                                                    .push(e238);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base238,
                                                                                len238 * 1,
                                                                                1,
                                                                            );

                                                                            result238
                                                                        };
                                                                        V271::FlagsValue(e271)
                                                                    }
                                                                    4 => {
                                                                        let e271 = {
                                                                            let l239 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l240 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len241 = l240;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l239.cast(),
                                                                                len241,
                                                                                len241,
                                                                            )
                                                                        };
                                                                        V271::TupleValue(e271)
                                                                    }
                                                                    5 => {
                                                                        let e271 = {
                                                                            let l242 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l243 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len244 = l243;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l242.cast(),
                                                                                len244,
                                                                                len244,
                                                                            )
                                                                        };
                                                                        V271::ListValue(e271)
                                                                    }
                                                                    6 => {
                                                                        let e271 = {
                                                                            let l245 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l245 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l246 = *base.add(12).cast::<i32>();

                                            l246
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V271::OptionValue(e271)
                                                                    }
                                                                    7 => {
                                                                        let e271 = {
                                                                            let l247 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l247 {
                                        0 => {
                                          let e = {
                                            let l248 = i32::from(*base.add(12).cast::<u8>());

                                            match l248 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l249 = *base.add(16).cast::<i32>();

                                                  l249
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l250 = i32::from(*base.add(12).cast::<u8>());

                                            match l250 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l251 = *base.add(16).cast::<i32>();

                                                  l251
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V271::ResultValue(e271)
                                                                    }
                                                                    8 => {
                                                                        let e271 = {
                                                                            let l252 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            l252 as u8
                                                                        };
                                                                        V271::PrimU8(e271)
                                                                    }
                                                                    9 => {
                                                                        let e271 = {
                                                                            let l253 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u16>(),
                                                                            );

                                                                            l253 as u16
                                                                        };
                                                                        V271::PrimU16(e271)
                                                                    }
                                                                    10 => {
                                                                        let e271 = {
                                                                            let l254 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l254 as u32
                                                                        };
                                                                        V271::PrimU32(e271)
                                                                    }
                                                                    11 => {
                                                                        let e271 = {
                                                                            let l255 = *base
                                                                                .add(8)
                                                                                .cast::<i64>();

                                                                            l255 as u64
                                                                        };
                                                                        V271::PrimU64(e271)
                                                                    }
                                                                    12 => {
                                                                        let e271 = {
                                                                            let l256 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i8>(),
                                                                            );

                                                                            l256 as i8
                                                                        };
                                                                        V271::PrimS8(e271)
                                                                    }
                                                                    13 => {
                                                                        let e271 = {
                                                                            let l257 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i16>(),
                                                                            );

                                                                            l257 as i16
                                                                        };
                                                                        V271::PrimS16(e271)
                                                                    }
                                                                    14 => {
                                                                        let e271 = {
                                                                            let l258 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l258
                                                                        };
                                                                        V271::PrimS32(e271)
                                                                    }
                                                                    15 => {
                                                                        let e271 = {
                                                                            let l259 = *base
                                                                                .add(8)
                                                                                .cast::<i64>();

                                                                            l259
                                                                        };
                                                                        V271::PrimS64(e271)
                                                                    }
                                                                    16 => {
                                                                        let e271 = {
                                                                            let l260 = *base
                                                                                .add(8)
                                                                                .cast::<f32>();

                                                                            l260
                                                                        };
                                                                        V271::PrimFloat32(e271)
                                                                    }
                                                                    17 => {
                                                                        let e271 = {
                                                                            let l261 = *base
                                                                                .add(8)
                                                                                .cast::<f64>();

                                                                            l261
                                                                        };
                                                                        V271::PrimFloat64(e271)
                                                                    }
                                                                    18 => {
                                                                        let e271 = {
                                                                            let l262 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            _rt::char_lift(
                                                                                l262 as u32,
                                                                            )
                                                                        };
                                                                        V271::PrimChar(e271)
                                                                    }
                                                                    19 => {
                                                                        let e271 = {
                                                                            let l263 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l263 as u8,
                                                                            )
                                                                        };
                                                                        V271::PrimBool(e271)
                                                                    }
                                                                    20 => {
                                                                        let e271 = {
                                                                            let l264 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l265 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len266 = l265;
                                                                            let bytes266 = _rt::Vec::from_raw_parts(l264.cast(), len266, len266);

                                                                            _rt::string_lift(
                                                                                bytes266,
                                                                            )
                                                                        };
                                                                        V271::PrimString(e271)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e271 = {
                                                                            let l267 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l268 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len269 = l268;
                                                                            let bytes269 = _rt::Vec::from_raw_parts(l267.cast(), len269, len269);
                                                                            let l270 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            (super::super::super::golem::rpc::types::Uri{
                                        value: _rt::string_lift(bytes269),
                                      }, l270 as u64)
                                                                        };
                                                                        V271::Handle(e271)
                                                                    }
                                                                };

                                                                v271
                                                            };
                                                            result272.push(e272);
                                                        }
                                                        _rt::cabi_dealloc(base272, len272 * 24, 8);
                                                        let l273 = *base.add(32).cast::<i64>();

                                                        ExportedFunctionCompletedParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l223 as u64,
                                nanoseconds: l224 as u32,
                              },
                              response: super::super::super::golem::rpc::types::WitValue{
                                nodes: result272,
                              },
                              consumed_fuel: l273,
                            }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e526)
                                                }
                                                4 => {
                                                    let e526 = {
                                                        let l274 = *base.add(8).cast::<i64>();
                                                        let l275 = *base.add(16).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l274 as u64,
                              nanoseconds: l275 as u32,
                            }
                                                    };
                                                    OplogEntry::Suspend(e526)
                                                }
                                                5 => {
                                                    let e526 = {
                                                        let l276 = *base.add(8).cast::<i64>();
                                                        let l277 = *base.add(16).cast::<i32>();
                                                        let l278 = *base.add(24).cast::<*mut u8>();
                                                        let l279 = *base.add(28).cast::<usize>();
                                                        let len280 = l279;
                                                        let bytes280 = _rt::Vec::from_raw_parts(
                                                            l278.cast(),
                                                            len280,
                                                            len280,
                                                        );

                                                        ErrorParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l276 as u64,
                                nanoseconds: l277 as u32,
                              },
                              error: _rt::string_lift(bytes280),
                            }
                                                    };
                                                    OplogEntry::Error(e526)
                                                }
                                                6 => {
                                                    let e526 = {
                                                        let l281 = *base.add(8).cast::<i64>();
                                                        let l282 = *base.add(16).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l281 as u64,
                              nanoseconds: l282 as u32,
                            }
                                                    };
                                                    OplogEntry::NoOp(e526)
                                                }
                                                7 => {
                                                    let e526 = {
                                                        let l283 = *base.add(8).cast::<i64>();
                                                        let l284 = *base.add(16).cast::<i32>();
                                                        let l285 = *base.add(24).cast::<i64>();
                                                        let l286 = *base.add(32).cast::<i64>();

                                                        JumpParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l283 as u64,
                                nanoseconds: l284 as u32,
                              },
                              start: l285 as u64,
                              end: l286 as u64,
                            }
                                                    };
                                                    OplogEntry::Jump(e526)
                                                }
                                                8 => {
                                                    let e526 = {
                                                        let l287 = *base.add(8).cast::<i64>();
                                                        let l288 = *base.add(16).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l287 as u64,
                              nanoseconds: l288 as u32,
                            }
                                                    };
                                                    OplogEntry::Interrupted(e526)
                                                }
                                                9 => {
                                                    let e526 = {
                                                        let l289 = *base.add(8).cast::<i64>();
                                                        let l290 = *base.add(16).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l289 as u64,
                              nanoseconds: l290 as u32,
                            }
                                                    };
                                                    OplogEntry::Exited(e526)
                                                }
                                                10 => {
                                                    let e526 = {
                                                        let l291 = *base.add(8).cast::<i64>();
                                                        let l292 = *base.add(16).cast::<i32>();
                                                        let l293 = *base.add(24).cast::<i32>();
                                                        let l294 = *base.add(32).cast::<i64>();
                                                        let l295 = *base.add(40).cast::<i64>();
                                                        let l296 = *base.add(48).cast::<f64>();
                                                        let l297 =
                                                            i32::from(*base.add(56).cast::<u8>());

                                                        ChangeRetryPolicyParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l291 as u64,
                                nanoseconds: l292 as u32,
                              },
                              retry_policy: super::super::super::golem::api::host::RetryPolicy{
                                max_attempts: l293 as u32,
                                min_delay: l294 as u64,
                                max_delay: l295 as u64,
                                multiplier: l296,
                                max_jitter_factor: match l297 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l298 = *base.add(64).cast::<f64>();

                                      l298
                                    };
                                    Some(e)
                                  }
                                  _ => _rt::invalid_enum_discriminant(),
                                },
                              },
                            }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e526)
                                                }
                                                11 => {
                                                    let e526 = {
                                                        let l299 = *base.add(8).cast::<i64>();
                                                        let l300 = *base.add(16).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l299 as u64,
                              nanoseconds: l300 as u32,
                            }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e526)
                                                }
                                                12 => {
                                                    let e526 = {
                                                        let l301 = *base.add(8).cast::<i64>();
                                                        let l302 = *base.add(16).cast::<i32>();
                                                        let l303 = *base.add(24).cast::<i64>();

                                                        EndAtomicRegionParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l301 as u64,
                                nanoseconds: l302 as u32,
                              },
                              begin_index: l303 as u64,
                            }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e526)
                                                }
                                                13 => {
                                                    let e526 = {
                                                        let l304 = *base.add(8).cast::<i64>();
                                                        let l305 = *base.add(16).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l304 as u64,
                              nanoseconds: l305 as u32,
                            }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e526)
                                                }
                                                14 => {
                                                    let e526 = {
                                                        let l306 = *base.add(8).cast::<i64>();
                                                        let l307 = *base.add(16).cast::<i32>();
                                                        let l308 = *base.add(24).cast::<i64>();

                                                        EndRemoteWriteParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l306 as u64,
                                nanoseconds: l307 as u32,
                              },
                              begin_index: l308 as u64,
                            }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e526)
                                                }
                                                15 => {
                                                    let e526 = {
                                                        let l309 = *base.add(8).cast::<i64>();
                                                        let l310 = *base.add(16).cast::<i32>();
                                                        let l311 =
                                                            i32::from(*base.add(24).cast::<u8>());
                                                        let v371 = match l311 {
                                                            0 => {
                                                                let e371 = {
                                                                    let l312 = *base
                                                                        .add(32)
                                                                        .cast::<*mut u8>();
                                                                    let l313 = *base
                                                                        .add(36)
                                                                        .cast::<usize>();
                                                                    let len314 = l313;
                                                                    let bytes314 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l312.cast(),
                                                                            len314,
                                                                            len314,
                                                                        );
                                                                    let l315 = *base
                                                                        .add(40)
                                                                        .cast::<*mut u8>();
                                                                    let l316 = *base
                                                                        .add(44)
                                                                        .cast::<usize>();
                                                                    let len317 = l316;
                                                                    let bytes317 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l315.cast(),
                                                                            len317,
                                                                            len317,
                                                                        );
                                                                    let l318 = i32::from(
                                                                        *base.add(48).cast::<u8>(),
                                                                    );

                                                                    ExportedFunctionInvocationParameters{
                                    idempotency_key: _rt::string_lift(bytes314),
                                    function_name: _rt::string_lift(bytes317),
                                    input: match l318 {
                                      0 => None,
                                      1 => {
                                        let e = {
                                          let l319 = *base.add(52).cast::<*mut u8>();
                                          let l320 = *base.add(56).cast::<usize>();
                                          let base369 = l319;
                                          let len369 = l320;
                                          let mut result369 = _rt::Vec::with_capacity(len369);
                                          for i in 0..len369 {
                                            let base = base369.add(i * 8);
                                            let e369 = {
                                              let l321 = *base.add(0).cast::<*mut u8>();
                                              let l322 = *base.add(4).cast::<usize>();
                                              let base368 = l321;
                                              let len368 = l322;
                                              let mut result368 = _rt::Vec::with_capacity(len368);
                                              for i in 0..len368 {
                                                let base = base368.add(i * 24);
                                                let e368 = {
                                                  let l323 = i32::from(*base.add(0).cast::<u8>());
                                                  use super::super::super::golem::rpc::types::WitNode as V367;
                                                  let v367 = match l323 {
                                                    0 => {
                                                      let e367 = {
                                                        let l324 = *base.add(8).cast::<*mut u8>();
                                                        let l325 = *base.add(12).cast::<usize>();
                                                        let len326 = l325;

                                                        _rt::Vec::from_raw_parts(l324.cast(), len326, len326)
                                                      };
                                                      V367::RecordValue(e367)
                                                    }
                                                    1 => {
                                                      let e367 = {
                                                        let l327 = *base.add(8).cast::<i32>();
                                                        let l328 = i32::from(*base.add(12).cast::<u8>());

                                                        (l327 as u32, match l328 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l329 = *base.add(16).cast::<i32>();

                                                              l329
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        })
                                                      };
                                                      V367::VariantValue(e367)
                                                    }
                                                    2 => {
                                                      let e367 = {
                                                        let l330 = *base.add(8).cast::<i32>();

                                                        l330 as u32
                                                      };
                                                      V367::EnumValue(e367)
                                                    }
                                                    3 => {
                                                      let e367 = {
                                                        let l331 = *base.add(8).cast::<*mut u8>();
                                                        let l332 = *base.add(12).cast::<usize>();
                                                        let base334 = l331;
                                                        let len334 = l332;
                                                        let mut result334 = _rt::Vec::with_capacity(len334);
                                                        for i in 0..len334 {
                                                          let base = base334.add(i * 1);
                                                          let e334 = {
                                                            let l333 = i32::from(*base.add(0).cast::<u8>());

                                                            _rt::bool_lift(l333 as u8)
                                                          };
                                                          result334.push(e334);
                                                        }
                                                        _rt::cabi_dealloc(base334, len334 * 1, 1);

                                                        result334
                                                      };
                                                      V367::FlagsValue(e367)
                                                    }
                                                    4 => {
                                                      let e367 = {
                                                        let l335 = *base.add(8).cast::<*mut u8>();
                                                        let l336 = *base.add(12).cast::<usize>();
                                                        let len337 = l336;

                                                        _rt::Vec::from_raw_parts(l335.cast(), len337, len337)
                                                      };
                                                      V367::TupleValue(e367)
                                                    }
                                                    5 => {
                                                      let e367 = {
                                                        let l338 = *base.add(8).cast::<*mut u8>();
                                                        let l339 = *base.add(12).cast::<usize>();
                                                        let len340 = l339;

                                                        _rt::Vec::from_raw_parts(l338.cast(), len340, len340)
                                                      };
                                                      V367::ListValue(e367)
                                                    }
                                                    6 => {
                                                      let e367 = {
                                                        let l341 = i32::from(*base.add(8).cast::<u8>());

                                                        match l341 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l342 = *base.add(12).cast::<i32>();

                                                              l342
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                      };
                                                      V367::OptionValue(e367)
                                                    }
                                                    7 => {
                                                      let e367 = {
                                                        let l343 = i32::from(*base.add(8).cast::<u8>());

                                                        match l343 {
                                                          0 => {
                                                            let e = {
                                                              let l344 = i32::from(*base.add(12).cast::<u8>());

                                                              match l344 {
                                                                0 => None,
                                                                1 => {
                                                                  let e = {
                                                                    let l345 = *base.add(16).cast::<i32>();

                                                                    l345
                                                                  };
                                                                  Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                              }
                                                            };
                                                            Ok(e)
                                                          }
                                                          1 => {
                                                            let e = {
                                                              let l346 = i32::from(*base.add(12).cast::<u8>());

                                                              match l346 {
                                                                0 => None,
                                                                1 => {
                                                                  let e = {
                                                                    let l347 = *base.add(16).cast::<i32>();

                                                                    l347
                                                                  };
                                                                  Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                              }
                                                            };
                                                            Err(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                      };
                                                      V367::ResultValue(e367)
                                                    }
                                                    8 => {
                                                      let e367 = {
                                                        let l348 = i32::from(*base.add(8).cast::<u8>());

                                                        l348 as u8
                                                      };
                                                      V367::PrimU8(e367)
                                                    }
                                                    9 => {
                                                      let e367 = {
                                                        let l349 = i32::from(*base.add(8).cast::<u16>());

                                                        l349 as u16
                                                      };
                                                      V367::PrimU16(e367)
                                                    }
                                                    10 => {
                                                      let e367 = {
                                                        let l350 = *base.add(8).cast::<i32>();

                                                        l350 as u32
                                                      };
                                                      V367::PrimU32(e367)
                                                    }
                                                    11 => {
                                                      let e367 = {
                                                        let l351 = *base.add(8).cast::<i64>();

                                                        l351 as u64
                                                      };
                                                      V367::PrimU64(e367)
                                                    }
                                                    12 => {
                                                      let e367 = {
                                                        let l352 = i32::from(*base.add(8).cast::<i8>());

                                                        l352 as i8
                                                      };
                                                      V367::PrimS8(e367)
                                                    }
                                                    13 => {
                                                      let e367 = {
                                                        let l353 = i32::from(*base.add(8).cast::<i16>());

                                                        l353 as i16
                                                      };
                                                      V367::PrimS16(e367)
                                                    }
                                                    14 => {
                                                      let e367 = {
                                                        let l354 = *base.add(8).cast::<i32>();

                                                        l354
                                                      };
                                                      V367::PrimS32(e367)
                                                    }
                                                    15 => {
                                                      let e367 = {
                                                        let l355 = *base.add(8).cast::<i64>();

                                                        l355
                                                      };
                                                      V367::PrimS64(e367)
                                                    }
                                                    16 => {
                                                      let e367 = {
                                                        let l356 = *base.add(8).cast::<f32>();

                                                        l356
                                                      };
                                                      V367::PrimFloat32(e367)
                                                    }
                                                    17 => {
                                                      let e367 = {
                                                        let l357 = *base.add(8).cast::<f64>();

                                                        l357
                                                      };
                                                      V367::PrimFloat64(e367)
                                                    }
                                                    18 => {
                                                      let e367 = {
                                                        let l358 = *base.add(8).cast::<i32>();

                                                        _rt::char_lift(l358 as u32)
                                                      };
                                                      V367::PrimChar(e367)
                                                    }
                                                    19 => {
                                                      let e367 = {
                                                        let l359 = i32::from(*base.add(8).cast::<u8>());

                                                        _rt::bool_lift(l359 as u8)
                                                      };
                                                      V367::PrimBool(e367)
                                                    }
                                                    20 => {
                                                      let e367 = {
                                                        let l360 = *base.add(8).cast::<*mut u8>();
                                                        let l361 = *base.add(12).cast::<usize>();
                                                        let len362 = l361;
                                                        let bytes362 = _rt::Vec::from_raw_parts(l360.cast(), len362, len362);

                                                        _rt::string_lift(bytes362)
                                                      };
                                                      V367::PrimString(e367)
                                                    }
                                                    n => {
                                                      debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                      let e367 = {
                                                        let l363 = *base.add(8).cast::<*mut u8>();
                                                        let l364 = *base.add(12).cast::<usize>();
                                                        let len365 = l364;
                                                        let bytes365 = _rt::Vec::from_raw_parts(l363.cast(), len365, len365);
                                                        let l366 = *base.add(16).cast::<i64>();

                                                        (super::super::super::golem::rpc::types::Uri{
                                                          value: _rt::string_lift(bytes365),
                                                        }, l366 as u64)
                                                      };
                                                      V367::Handle(e367)
                                                    }
                                                  };

                                                  v367
                                                };
                                                result368.push(e368);
                                              }
                                              _rt::cabi_dealloc(base368, len368 * 24, 8);

                                              super::super::super::golem::rpc::types::WitValue{
                                                nodes: result368,
                                              }
                                            };
                                            result369.push(e369);
                                          }
                                          _rt::cabi_dealloc(base369, len369 * 8, 4);

                                          result369
                                        };
                                        Some(e)
                                      }
                                      _ => _rt::invalid_enum_discriminant(),
                                    },
                                  }
                                                                };
                                                                WorkerInvocation::ExportedFunction(
                                                                    e371,
                                                                )
                                                            }
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 1,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e371 = {
                                                                    let l370 =
                                                                        *base.add(32).cast::<i64>();

                                                                    l370 as u64
                                                                };
                                                                WorkerInvocation::ManualUpdate(e371)
                                                            }
                                                        };

                                                        PendingWorkerInvocationParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l309 as u64,
                                nanoseconds: l310 as u32,
                              },
                              invocation: v371,
                            }
                                                    };
                                                    OplogEntry::PendingWorkerInvocation(e526)
                                                }
                                                16 => {
                                                    let e526 = {
                                                        let l372 = *base.add(8).cast::<i64>();
                                                        let l373 = *base.add(16).cast::<i32>();
                                                        let l374 = *base.add(24).cast::<i64>();
                                                        let l375 =
                                                            i32::from(*base.add(32).cast::<u8>());
                                                        let v379 = match l375 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 1,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e379 = {
                                                                    let l376 = *base
                                                                        .add(36)
                                                                        .cast::<*mut u8>();
                                                                    let l377 = *base
                                                                        .add(40)
                                                                        .cast::<usize>();
                                                                    let len378 = l377;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l376.cast(),
                                                                        len378,
                                                                        len378,
                                                                    )
                                                                };
                                                                UpdateDescription::SnapshotBased(
                                                                    e379,
                                                                )
                                                            }
                                                        };

                                                        PendingUpdateParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l372 as u64,
                                nanoseconds: l373 as u32,
                              },
                              target_version: l374 as u64,
                              update_description: v379,
                            }
                                                    };
                                                    OplogEntry::PendingUpdate(e526)
                                                }
                                                17 => {
                                                    let e526 = {
                                                        let l380 = *base.add(8).cast::<i64>();
                                                        let l381 = *base.add(16).cast::<i32>();
                                                        let l382 = *base.add(24).cast::<i64>();
                                                        let l383 = *base.add(32).cast::<i64>();
                                                        let l384 = *base.add(40).cast::<*mut u8>();
                                                        let l385 = *base.add(44).cast::<usize>();
                                                        let base403 = l384;
                                                        let len403 = l385;
                                                        let mut result403 =
                                                            _rt::Vec::with_capacity(len403);
                                                        for i in 0..len403 {
                                                            let base = base403.add(i * 40);
                                                            let e403 = {
                                                                let l386 =
                                                                    *base.add(0).cast::<i64>();
                                                                let l387 =
                                                                    *base.add(8).cast::<i64>();
                                                                let l388 =
                                                                    *base.add(16).cast::<*mut u8>();
                                                                let l389 =
                                                                    *base.add(20).cast::<usize>();
                                                                let len390 = l389;
                                                                let bytes390 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l388.cast(),
                                                                        len390,
                                                                        len390,
                                                                    );
                                                                let l391 =
                                                                    *base.add(24).cast::<*mut u8>();
                                                                let l392 =
                                                                    *base.add(28).cast::<usize>();
                                                                let len393 = l392;
                                                                let bytes393 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l391.cast(),
                                                                        len393,
                                                                        len393,
                                                                    );
                                                                let l394 =
                                                                    *base.add(32).cast::<*mut u8>();
                                                                let l395 =
                                                                    *base.add(36).cast::<usize>();
                                                                let base402 = l394;
                                                                let len402 = l395;
                                                                let mut result402 =
                                                                    _rt::Vec::with_capacity(len402);
                                                                for i in 0..len402 {
                                                                    let base = base402.add(i * 16);
                                                                    let e402 = {
                                                                        let l396 = *base
                                                                            .add(0)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l397 = *base
                                                                            .add(4)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let len398 = l397;
                                                                        let bytes398 = _rt::Vec::from_raw_parts(l396.cast(), len398, len398);
                                                                        let l399 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l400 = *base
                                                                            .add(12)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let len401 = l400;
                                                                        let bytes401 = _rt::Vec::from_raw_parts(l399.cast(), len401, len401);

                                                                        (
                                                                            _rt::string_lift(
                                                                                bytes398,
                                                                            ),
                                                                            _rt::string_lift(
                                                                                bytes401,
                                                                            ),
                                                                        )
                                                                    };
                                                                    result402.push(e402);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base402,
                                                                    len402 * 16,
                                                                    4,
                                                                );

                                                                PluginInstallationDescription{
                                  installation_id: super::super::super::golem::api::host::Uuid{
                                    high_bits: l386 as u64,
                                    low_bits: l387 as u64,
                                  },
                                  name: _rt::string_lift(bytes390),
                                  version: _rt::string_lift(bytes393),
                                  parameters: result402,
                                }
                                                            };
                                                            result403.push(e403);
                                                        }
                                                        _rt::cabi_dealloc(base403, len403 * 40, 8);

                                                        SuccessfulUpdateParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l380 as u64,
                                nanoseconds: l381 as u32,
                              },
                              target_version: l382 as u64,
                              new_component_size: l383 as u64,
                              new_active_plugins: result403,
                            }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e526)
                                                }
                                                18 => {
                                                    let e526 = {
                                                        let l404 = *base.add(8).cast::<i64>();
                                                        let l405 = *base.add(16).cast::<i32>();
                                                        let l406 = *base.add(24).cast::<i64>();
                                                        let l407 =
                                                            i32::from(*base.add(32).cast::<u8>());

                                                        FailedUpdateParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l404 as u64,
                                nanoseconds: l405 as u32,
                              },
                              target_version: l406 as u64,
                              details: match l407 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l408 = *base.add(36).cast::<*mut u8>();
                                    let l409 = *base.add(40).cast::<usize>();
                                    let len410 = l409;
                                    let bytes410 = _rt::Vec::from_raw_parts(l408.cast(), len410, len410);

                                    _rt::string_lift(bytes410)
                                  };
                                  Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                              },
                            }
                                                    };
                                                    OplogEntry::FailedUpdate(e526)
                                                }
                                                19 => {
                                                    let e526 = {
                                                        let l411 = *base.add(8).cast::<i64>();
                                                        let l412 = *base.add(16).cast::<i32>();
                                                        let l413 = *base.add(24).cast::<i64>();

                                                        GrowMemoryParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l411 as u64,
                                nanoseconds: l412 as u32,
                              },
                              delta: l413 as u64,
                            }
                                                    };
                                                    OplogEntry::GrowMemory(e526)
                                                }
                                                20 => {
                                                    let e526 = {
                                                        let l414 = *base.add(8).cast::<i64>();
                                                        let l415 = *base.add(16).cast::<i32>();
                                                        let l416 = *base.add(24).cast::<i64>();

                                                        CreateResourceParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l414 as u64,
                                nanoseconds: l415 as u32,
                              },
                              resource_id: l416 as u64,
                            }
                                                    };
                                                    OplogEntry::CreateResource(e526)
                                                }
                                                21 => {
                                                    let e526 = {
                                                        let l417 = *base.add(8).cast::<i64>();
                                                        let l418 = *base.add(16).cast::<i32>();
                                                        let l419 = *base.add(24).cast::<i64>();

                                                        DropResourceParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l417 as u64,
                                nanoseconds: l418 as u32,
                              },
                              resource_id: l419 as u64,
                            }
                                                    };
                                                    OplogEntry::DropResource(e526)
                                                }
                                                22 => {
                                                    let e526 = {
                                                        let l420 = *base.add(8).cast::<i64>();
                                                        let l421 = *base.add(16).cast::<i32>();
                                                        let l422 = *base.add(24).cast::<i64>();
                                                        let l423 = *base.add(32).cast::<*mut u8>();
                                                        let l424 = *base.add(36).cast::<usize>();
                                                        let len425 = l424;
                                                        let bytes425 = _rt::Vec::from_raw_parts(
                                                            l423.cast(),
                                                            len425,
                                                            len425,
                                                        );
                                                        let l426 = *base.add(40).cast::<*mut u8>();
                                                        let l427 = *base.add(44).cast::<usize>();
                                                        let base476 = l426;
                                                        let len476 = l427;
                                                        let mut result476 =
                                                            _rt::Vec::with_capacity(len476);
                                                        for i in 0..len476 {
                                                            let base = base476.add(i * 8);
                                                            let e476 = {
                                                                let l428 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l429 =
                                                                    *base.add(4).cast::<usize>();
                                                                let base475 = l428;
                                                                let len475 = l429;
                                                                let mut result475 =
                                                                    _rt::Vec::with_capacity(len475);
                                                                for i in 0..len475 {
                                                                    let base = base475.add(i * 24);
                                                                    let e475 = {
                                                                        let l430 = i32::from(
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        use super::super::super::golem::rpc::types::WitNode as V474;
                                                                        let v474 = match l430 {
                                                                            0 => {
                                                                                let e474 = {
                                                                                    let l431 = *base.add(8).cast::<*mut u8>();
                                                                                    let l432 = *base.add(12).cast::<usize>();
                                                                                    let len433 =
                                                                                        l432;

                                                                                    _rt::Vec::from_raw_parts(l431.cast(), len433, len433)
                                                                                };
                                                                                V474::RecordValue(
                                                                                    e474,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e474 = {
                                                                                    let l434 = *base.add(8).cast::<i32>();
                                                                                    let l435 = i32::from(*base.add(12).cast::<u8>());

                                                                                    (l434 as u32, match l435 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l436 = *base.add(16).cast::<i32>();

                                                l436
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          })
                                                                                };
                                                                                V474::VariantValue(
                                                                                    e474,
                                                                                )
                                                                            }
                                                                            2 => {
                                                                                let e474 = {
                                                                                    let l437 = *base.add(8).cast::<i32>();

                                                                                    l437 as u32
                                                                                };
                                                                                V474::EnumValue(
                                                                                    e474,
                                                                                )
                                                                            }
                                                                            3 => {
                                                                                let e474 = {
                                                                                    let l438 = *base.add(8).cast::<*mut u8>();
                                                                                    let l439 = *base.add(12).cast::<usize>();
                                                                                    let base441 =
                                                                                        l438;
                                                                                    let len441 =
                                                                                        l439;
                                                                                    let mut result441 = _rt::Vec::with_capacity(len441);
                                                                                    for i in
                                                                                        0..len441
                                                                                    {
                                                                                        let base = base441.add(i * 1);
                                                                                        let e441 = {
                                                                                            let l440 = i32::from(*base.add(0).cast::<u8>());

                                                                                            _rt::bool_lift(l440 as u8)
                                                                                        };
                                                                                        result441
                                                                                            .push(
                                                                                            e441,
                                                                                        );
                                                                                    }
                                                                                    _rt::cabi_dealloc(base441, len441 * 1, 1);

                                                                                    result441
                                                                                };
                                                                                V474::FlagsValue(
                                                                                    e474,
                                                                                )
                                                                            }
                                                                            4 => {
                                                                                let e474 = {
                                                                                    let l442 = *base.add(8).cast::<*mut u8>();
                                                                                    let l443 = *base.add(12).cast::<usize>();
                                                                                    let len444 =
                                                                                        l443;

                                                                                    _rt::Vec::from_raw_parts(l442.cast(), len444, len444)
                                                                                };
                                                                                V474::TupleValue(
                                                                                    e474,
                                                                                )
                                                                            }
                                                                            5 => {
                                                                                let e474 = {
                                                                                    let l445 = *base.add(8).cast::<*mut u8>();
                                                                                    let l446 = *base.add(12).cast::<usize>();
                                                                                    let len447 =
                                                                                        l446;

                                                                                    _rt::Vec::from_raw_parts(l445.cast(), len447, len447)
                                                                                };
                                                                                V474::ListValue(
                                                                                    e474,
                                                                                )
                                                                            }
                                                                            6 => {
                                                                                let e474 = {
                                                                                    let l448 = i32::from(*base.add(8).cast::<u8>());

                                                                                    match l448 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l449 = *base.add(12).cast::<i32>();

                                                l449
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }
                                                                                };
                                                                                V474::OptionValue(
                                                                                    e474,
                                                                                )
                                                                            }
                                                                            7 => {
                                                                                let e474 = {
                                                                                    let l450 = i32::from(*base.add(8).cast::<u8>());

                                                                                    match l450 {
                                            0 => {
                                              let e = {
                                                let l451 = i32::from(*base.add(12).cast::<u8>());

                                                match l451 {
                                                  0 => None,
                                                  1 => {
                                                    let e = {
                                                      let l452 = *base.add(16).cast::<i32>();

                                                      l452
                                                    };
                                                    Some(e)
                                                  }
                                                  _ => _rt::invalid_enum_discriminant(),
                                                }
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l453 = i32::from(*base.add(12).cast::<u8>());

                                                match l453 {
                                                  0 => None,
                                                  1 => {
                                                    let e = {
                                                      let l454 = *base.add(16).cast::<i32>();

                                                      l454
                                                    };
                                                    Some(e)
                                                  }
                                                  _ => _rt::invalid_enum_discriminant(),
                                                }
                                              };
                                              Err(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }
                                                                                };
                                                                                V474::ResultValue(
                                                                                    e474,
                                                                                )
                                                                            }
                                                                            8 => {
                                                                                let e474 = {
                                                                                    let l455 = i32::from(*base.add(8).cast::<u8>());

                                                                                    l455 as u8
                                                                                };
                                                                                V474::PrimU8(e474)
                                                                            }
                                                                            9 => {
                                                                                let e474 = {
                                                                                    let l456 = i32::from(*base.add(8).cast::<u16>());

                                                                                    l456 as u16
                                                                                };
                                                                                V474::PrimU16(e474)
                                                                            }
                                                                            10 => {
                                                                                let e474 = {
                                                                                    let l457 = *base.add(8).cast::<i32>();

                                                                                    l457 as u32
                                                                                };
                                                                                V474::PrimU32(e474)
                                                                            }
                                                                            11 => {
                                                                                let e474 = {
                                                                                    let l458 = *base.add(8).cast::<i64>();

                                                                                    l458 as u64
                                                                                };
                                                                                V474::PrimU64(e474)
                                                                            }
                                                                            12 => {
                                                                                let e474 = {
                                                                                    let l459 = i32::from(*base.add(8).cast::<i8>());

                                                                                    l459 as i8
                                                                                };
                                                                                V474::PrimS8(e474)
                                                                            }
                                                                            13 => {
                                                                                let e474 = {
                                                                                    let l460 = i32::from(*base.add(8).cast::<i16>());

                                                                                    l460 as i16
                                                                                };
                                                                                V474::PrimS16(e474)
                                                                            }
                                                                            14 => {
                                                                                let e474 = {
                                                                                    let l461 = *base.add(8).cast::<i32>();

                                                                                    l461
                                                                                };
                                                                                V474::PrimS32(e474)
                                                                            }
                                                                            15 => {
                                                                                let e474 = {
                                                                                    let l462 = *base.add(8).cast::<i64>();

                                                                                    l462
                                                                                };
                                                                                V474::PrimS64(e474)
                                                                            }
                                                                            16 => {
                                                                                let e474 = {
                                                                                    let l463 = *base.add(8).cast::<f32>();

                                                                                    l463
                                                                                };
                                                                                V474::PrimFloat32(
                                                                                    e474,
                                                                                )
                                                                            }
                                                                            17 => {
                                                                                let e474 = {
                                                                                    let l464 = *base.add(8).cast::<f64>();

                                                                                    l464
                                                                                };
                                                                                V474::PrimFloat64(
                                                                                    e474,
                                                                                )
                                                                            }
                                                                            18 => {
                                                                                let e474 = {
                                                                                    let l465 = *base.add(8).cast::<i32>();

                                                                                    _rt::char_lift(
                                                                                        l465 as u32,
                                                                                    )
                                                                                };
                                                                                V474::PrimChar(e474)
                                                                            }
                                                                            19 => {
                                                                                let e474 = {
                                                                                    let l466 = i32::from(*base.add(8).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l466 as u8,
                                                                                    )
                                                                                };
                                                                                V474::PrimBool(e474)
                                                                            }
                                                                            20 => {
                                                                                let e474 = {
                                                                                    let l467 = *base.add(8).cast::<*mut u8>();
                                                                                    let l468 = *base.add(12).cast::<usize>();
                                                                                    let len469 =
                                                                                        l468;
                                                                                    let bytes469 = _rt::Vec::from_raw_parts(l467.cast(), len469, len469);

                                                                                    _rt::string_lift(
                                                                                        bytes469,
                                                                                    )
                                                                                };
                                                                                V474::PrimString(
                                                                                    e474,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e474 = {
                                                                                    let l470 = *base.add(8).cast::<*mut u8>();
                                                                                    let l471 = *base.add(12).cast::<usize>();
                                                                                    let len472 =
                                                                                        l471;
                                                                                    let bytes472 = _rt::Vec::from_raw_parts(l470.cast(), len472, len472);
                                                                                    let l473 = *base.add(16).cast::<i64>();

                                                                                    (super::super::super::golem::rpc::types::Uri{
                                            value: _rt::string_lift(bytes472),
                                          }, l473 as u64)
                                                                                };
                                                                                V474::Handle(e474)
                                                                            }
                                                                        };

                                                                        v474
                                                                    };
                                                                    result475.push(e475);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base475,
                                                                    len475 * 24,
                                                                    8,
                                                                );

                                                                super::super::super::golem::rpc::types::WitValue{
                                  nodes: result475,
                                }
                                                            };
                                                            result476.push(e476);
                                                        }
                                                        _rt::cabi_dealloc(base476, len476 * 8, 4);

                                                        DescribeResourceParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l420 as u64,
                                nanoseconds: l421 as u32,
                              },
                              resource_id: l422 as u64,
                              resource_name: _rt::string_lift(bytes425),
                              resource_params: result476,
                            }
                                                    };
                                                    OplogEntry::DescribeResource(e526)
                                                }
                                                23 => {
                                                    let e526 = {
                                                        let l477 = *base.add(8).cast::<i64>();
                                                        let l478 = *base.add(16).cast::<i32>();
                                                        let l479 =
                                                            i32::from(*base.add(24).cast::<u8>());
                                                        let l480 = *base.add(28).cast::<*mut u8>();
                                                        let l481 = *base.add(32).cast::<usize>();
                                                        let len482 = l481;
                                                        let bytes482 = _rt::Vec::from_raw_parts(
                                                            l480.cast(),
                                                            len482,
                                                            len482,
                                                        );
                                                        let l483 = *base.add(36).cast::<*mut u8>();
                                                        let l484 = *base.add(40).cast::<usize>();
                                                        let len485 = l484;
                                                        let bytes485 = _rt::Vec::from_raw_parts(
                                                            l483.cast(),
                                                            len485,
                                                            len485,
                                                        );

                                                        LogParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l477 as u64,
                                nanoseconds: l478 as u32,
                              },
                              level: LogLevel::_lift(l479 as u8),
                              context: _rt::string_lift(bytes482),
                              message: _rt::string_lift(bytes485),
                            }
                                                    };
                                                    OplogEntry::Log(e526)
                                                }
                                                24 => {
                                                    let e526 = {
                                                        let l486 = *base.add(8).cast::<i64>();
                                                        let l487 = *base.add(16).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l486 as u64,
                              nanoseconds: l487 as u32,
                            }
                                                    };
                                                    OplogEntry::Restart(e526)
                                                }
                                                25 => {
                                                    let e526 = {
                                                        let l488 = *base.add(8).cast::<i64>();
                                                        let l489 = *base.add(16).cast::<i32>();
                                                        let l490 = *base.add(24).cast::<i64>();
                                                        let l491 = *base.add(32).cast::<i64>();
                                                        let l492 = *base.add(40).cast::<*mut u8>();
                                                        let l493 = *base.add(44).cast::<usize>();
                                                        let len494 = l493;
                                                        let bytes494 = _rt::Vec::from_raw_parts(
                                                            l492.cast(),
                                                            len494,
                                                            len494,
                                                        );
                                                        let l495 = *base.add(48).cast::<*mut u8>();
                                                        let l496 = *base.add(52).cast::<usize>();
                                                        let len497 = l496;
                                                        let bytes497 = _rt::Vec::from_raw_parts(
                                                            l495.cast(),
                                                            len497,
                                                            len497,
                                                        );
                                                        let l498 = *base.add(56).cast::<*mut u8>();
                                                        let l499 = *base.add(60).cast::<usize>();
                                                        let base506 = l498;
                                                        let len506 = l499;
                                                        let mut result506 =
                                                            _rt::Vec::with_capacity(len506);
                                                        for i in 0..len506 {
                                                            let base = base506.add(i * 16);
                                                            let e506 = {
                                                                let l500 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l501 =
                                                                    *base.add(4).cast::<usize>();
                                                                let len502 = l501;
                                                                let bytes502 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l500.cast(),
                                                                        len502,
                                                                        len502,
                                                                    );
                                                                let l503 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l504 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len505 = l504;
                                                                let bytes505 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l503.cast(),
                                                                        len505,
                                                                        len505,
                                                                    );

                                                                (
                                                                    _rt::string_lift(bytes502),
                                                                    _rt::string_lift(bytes505),
                                                                )
                                                            };
                                                            result506.push(e506);
                                                        }
                                                        _rt::cabi_dealloc(base506, len506 * 16, 4);

                                                        ActivatePluginParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l488 as u64,
                                nanoseconds: l489 as u32,
                              },
                              plugin: PluginInstallationDescription{
                                installation_id: super::super::super::golem::api::host::Uuid{
                                  high_bits: l490 as u64,
                                  low_bits: l491 as u64,
                                },
                                name: _rt::string_lift(bytes494),
                                version: _rt::string_lift(bytes497),
                                parameters: result506,
                              },
                            }
                                                    };
                                                    OplogEntry::ActivatePlugin(e526)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 26,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e526 = {
                                                        let l507 = *base.add(8).cast::<i64>();
                                                        let l508 = *base.add(16).cast::<i32>();
                                                        let l509 = *base.add(24).cast::<i64>();
                                                        let l510 = *base.add(32).cast::<i64>();
                                                        let l511 = *base.add(40).cast::<*mut u8>();
                                                        let l512 = *base.add(44).cast::<usize>();
                                                        let len513 = l512;
                                                        let bytes513 = _rt::Vec::from_raw_parts(
                                                            l511.cast(),
                                                            len513,
                                                            len513,
                                                        );
                                                        let l514 = *base.add(48).cast::<*mut u8>();
                                                        let l515 = *base.add(52).cast::<usize>();
                                                        let len516 = l515;
                                                        let bytes516 = _rt::Vec::from_raw_parts(
                                                            l514.cast(),
                                                            len516,
                                                            len516,
                                                        );
                                                        let l517 = *base.add(56).cast::<*mut u8>();
                                                        let l518 = *base.add(60).cast::<usize>();
                                                        let base525 = l517;
                                                        let len525 = l518;
                                                        let mut result525 =
                                                            _rt::Vec::with_capacity(len525);
                                                        for i in 0..len525 {
                                                            let base = base525.add(i * 16);
                                                            let e525 = {
                                                                let l519 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l520 =
                                                                    *base.add(4).cast::<usize>();
                                                                let len521 = l520;
                                                                let bytes521 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l519.cast(),
                                                                        len521,
                                                                        len521,
                                                                    );
                                                                let l522 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l523 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len524 = l523;
                                                                let bytes524 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l522.cast(),
                                                                        len524,
                                                                        len524,
                                                                    );

                                                                (
                                                                    _rt::string_lift(bytes521),
                                                                    _rt::string_lift(bytes524),
                                                                )
                                                            };
                                                            result525.push(e525);
                                                        }
                                                        _rt::cabi_dealloc(base525, len525 * 16, 4);

                                                        DeactivatePluginParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l507 as u64,
                                nanoseconds: l508 as u32,
                              },
                              plugin: PluginInstallationDescription{
                                installation_id: super::super::super::golem::api::host::Uuid{
                                  high_bits: l509 as u64,
                                  low_bits: l510 as u64,
                                },
                                name: _rt::string_lift(bytes513),
                                version: _rt::string_lift(bytes516),
                                parameters: result525,
                              },
                            }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e526)
                                                }
                                            };

                                            v526
                                        };
                                        result527.push(e527);
                                    }
                                    _rt::cabi_dealloc(base527, len527 * 136, 8);

                                    result527
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId, text: &str) -> Self {
                    unsafe {
                        let super::super::super::golem::api::host::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::api::host::ComponentId { uuid: uuid1 } =
                            component_id0;
                        let super::super::super::golem::api::host::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let vec4 = text;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]search-oplog"]
                            fn wit_import(
                                _: i64,
                                _: i64,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            ptr4.cast_mut(),
                            len4,
                        );
                        SearchOplog::from_handle(ret as u32)
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<(OplogIndex, OplogEntry)>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[method]search-oplog.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base528 = l2;
                                    let len528 = l3;
                                    let mut result528 = _rt::Vec::with_capacity(len528);
                                    for i in 0..len528 {
                                        let base = base528.add(i * 144);
                                        let e528 = {
                                            let l4 = *base.add(0).cast::<i64>();
                                            let l5 = i32::from(*base.add(8).cast::<u8>());
                                            let v527 = match l5 {
                                                0 => {
                                                    let e527 = {
                                                        let l6 = *base.add(16).cast::<i64>();
                                                        let l7 = *base.add(24).cast::<i32>();
                                                        let l8 = *base.add(32).cast::<i64>();
                                                        let l9 = *base.add(40).cast::<i64>();
                                                        let l10 = *base.add(48).cast::<*mut u8>();
                                                        let l11 = *base.add(52).cast::<usize>();
                                                        let len12 = l11;
                                                        let bytes12 = _rt::Vec::from_raw_parts(
                                                            l10.cast(),
                                                            len12,
                                                            len12,
                                                        );
                                                        let l13 = *base.add(56).cast::<i64>();
                                                        let l14 = *base.add(64).cast::<*mut u8>();
                                                        let l15 = *base.add(68).cast::<usize>();
                                                        let base19 = l14;
                                                        let len19 = l15;
                                                        let mut result19 =
                                                            _rt::Vec::with_capacity(len19);
                                                        for i in 0..len19 {
                                                            let base = base19.add(i * 8);
                                                            let e19 = {
                                                                let l16 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l17 =
                                                                    *base.add(4).cast::<usize>();
                                                                let len18 = l17;
                                                                let bytes18 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l16.cast(),
                                                                        len18,
                                                                        len18,
                                                                    );

                                                                _rt::string_lift(bytes18)
                                                            };
                                                            result19.push(e19);
                                                        }
                                                        _rt::cabi_dealloc(base19, len19 * 8, 4);
                                                        let l20 = *base.add(72).cast::<*mut u8>();
                                                        let l21 = *base.add(76).cast::<usize>();
                                                        let base28 = l20;
                                                        let len28 = l21;
                                                        let mut result28 =
                                                            _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28.add(i * 16);
                                                            let e28 = {
                                                                let l22 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l23 =
                                                                    *base.add(4).cast::<usize>();
                                                                let len24 = l23;
                                                                let bytes24 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l22.cast(),
                                                                        len24,
                                                                        len24,
                                                                    );
                                                                let l25 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l26 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len27 = l26;
                                                                let bytes27 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l25.cast(),
                                                                        len27,
                                                                        len27,
                                                                    );

                                                                (
                                                                    _rt::string_lift(bytes24),
                                                                    _rt::string_lift(bytes27),
                                                                )
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(base28, len28 * 16, 4);
                                                        let l29 = *base.add(80).cast::<*mut u8>();
                                                        let l30 = *base.add(84).cast::<usize>();
                                                        let len31 = l30;
                                                        let bytes31 = _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        );
                                                        let l32 =
                                                            i32::from(*base.add(88).cast::<u8>());
                                                        let l38 = *base.add(120).cast::<i64>();
                                                        let l39 = *base.add(128).cast::<i64>();
                                                        let l40 = *base.add(136).cast::<*mut u8>();
                                                        let l41 = *base.add(140).cast::<usize>();
                                                        let base59 = l40;
                                                        let len59 = l41;
                                                        let mut result59 =
                                                            _rt::Vec::with_capacity(len59);
                                                        for i in 0..len59 {
                                                            let base = base59.add(i * 40);
                                                            let e59 = {
                                                                let l42 =
                                                                    *base.add(0).cast::<i64>();
                                                                let l43 =
                                                                    *base.add(8).cast::<i64>();
                                                                let l44 =
                                                                    *base.add(16).cast::<*mut u8>();
                                                                let l45 =
                                                                    *base.add(20).cast::<usize>();
                                                                let len46 = l45;
                                                                let bytes46 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l44.cast(),
                                                                        len46,
                                                                        len46,
                                                                    );
                                                                let l47 =
                                                                    *base.add(24).cast::<*mut u8>();
                                                                let l48 =
                                                                    *base.add(28).cast::<usize>();
                                                                let len49 = l48;
                                                                let bytes49 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l47.cast(),
                                                                        len49,
                                                                        len49,
                                                                    );
                                                                let l50 =
                                                                    *base.add(32).cast::<*mut u8>();
                                                                let l51 =
                                                                    *base.add(36).cast::<usize>();
                                                                let base58 = l50;
                                                                let len58 = l51;
                                                                let mut result58 =
                                                                    _rt::Vec::with_capacity(len58);
                                                                for i in 0..len58 {
                                                                    let base = base58.add(i * 16);
                                                                    let e58 = {
                                                                        let l52 = *base
                                                                            .add(0)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l53 = *base
                                                                            .add(4)
                                                                            .cast::<usize>();
                                                                        let len54 = l53;
                                                                        let bytes54 = _rt::Vec::from_raw_parts(l52.cast(), len54, len54);
                                                                        let l55 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l56 = *base
                                                                            .add(12)
                                                                            .cast::<usize>();
                                                                        let len57 = l56;
                                                                        let bytes57 = _rt::Vec::from_raw_parts(l55.cast(), len57, len57);

                                                                        (
                                                                            _rt::string_lift(
                                                                                bytes54,
                                                                            ),
                                                                            _rt::string_lift(
                                                                                bytes57,
                                                                            ),
                                                                        )
                                                                    };
                                                                    result58.push(e58);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base58,
                                                                    len58 * 16,
                                                                    4,
                                                                );

                                                                PluginInstallationDescription{
                                  installation_id: super::super::super::golem::api::host::Uuid{
                                    high_bits: l42 as u64,
                                    low_bits: l43 as u64,
                                  },
                                  name: _rt::string_lift(bytes46),
                                  version: _rt::string_lift(bytes49),
                                  parameters: result58,
                                }
                                                            };
                                                            result59.push(e59);
                                                        }
                                                        _rt::cabi_dealloc(base59, len59 * 40, 8);

                                                        CreateParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l6 as u64,
                                nanoseconds: l7 as u32,
                              },
                              worker_id: super::super::super::golem::api::host::WorkerId{
                                component_id: super::super::super::golem::api::host::ComponentId{
                                  uuid: super::super::super::golem::api::host::Uuid{
                                    high_bits: l8 as u64,
                                    low_bits: l9 as u64,
                                  },
                                },
                                worker_name: _rt::string_lift(bytes12),
                              },
                              component_version: l13 as u64,
                              args: result19,
                              env: result28,
                              account_id: super::super::super::golem::api::host::AccountId{
                                value: _rt::string_lift(bytes31),
                              },
                              parent: match l32 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l33 = *base.add(96).cast::<i64>();
                                    let l34 = *base.add(104).cast::<i64>();
                                    let l35 = *base.add(112).cast::<*mut u8>();
                                    let l36 = *base.add(116).cast::<usize>();
                                    let len37 = l36;
                                    let bytes37 = _rt::Vec::from_raw_parts(l35.cast(), len37, len37);

                                    super::super::super::golem::api::host::WorkerId{
                                      component_id: super::super::super::golem::api::host::ComponentId{
                                        uuid: super::super::super::golem::api::host::Uuid{
                                          high_bits: l33 as u64,
                                          low_bits: l34 as u64,
                                        },
                                      },
                                      worker_name: _rt::string_lift(bytes37),
                                    }
                                  };
                                  Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                              },
                              component_size: l38 as u64,
                              initial_total_linear_memory_size: l39 as u64,
                              initial_active_plugins: result59,
                            }
                                                    };
                                                    OplogEntry::Create(e527)
                                                }
                                                1 => {
                                                    let e527 = {
                                                        let l60 = *base.add(16).cast::<i64>();
                                                        let l61 = *base.add(24).cast::<i32>();
                                                        let l62 = *base.add(32).cast::<*mut u8>();
                                                        let l63 = *base.add(36).cast::<usize>();
                                                        let len64 = l63;
                                                        let bytes64 = _rt::Vec::from_raw_parts(
                                                            l62.cast(),
                                                            len64,
                                                            len64,
                                                        );
                                                        let l65 = *base.add(40).cast::<*mut u8>();
                                                        let l66 = *base.add(44).cast::<usize>();
                                                        let base112 = l65;
                                                        let len112 = l66;
                                                        let mut result112 =
                                                            _rt::Vec::with_capacity(len112);
                                                        for i in 0..len112 {
                                                            let base = base112.add(i * 24);
                                                            let e112 = {
                                                                let l67 = i32::from(
                                                                    *base.add(0).cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::rpc::types::WitNode as V111;
                                                                let v111 = match l67 {
                                                                    0 => {
                                                                        let e111 = {
                                                                            let l68 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l69 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len70 = l69;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l68.cast(),
                                                                                len70,
                                                                                len70,
                                                                            )
                                                                        };
                                                                        V111::RecordValue(e111)
                                                                    }
                                                                    1 => {
                                                                        let e111 = {
                                                                            let l71 = *base
                                                                                .add(8)
                                                                                .cast::<i32>(
                                                                            );
                                                                            let l72 = i32::from(
                                                                                *base
                                                                                    .add(12)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (l71 as u32, match l72 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l73 = *base.add(16).cast::<i32>();

                                            l73
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        V111::VariantValue(e111)
                                                                    }
                                                                    2 => {
                                                                        let e111 = {
                                                                            let l74 = *base
                                                                                .add(8)
                                                                                .cast::<i32>(
                                                                            );

                                                                            l74 as u32
                                                                        };
                                                                        V111::EnumValue(e111)
                                                                    }
                                                                    3 => {
                                                                        let e111 = {
                                                                            let l75 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l76 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let base78 = l75;
                                                                            let len78 = l76;
                                                                            let mut result78 = _rt::Vec::with_capacity(len78);
                                                                            for i in 0..len78 {
                                                                                let base = base78
                                                                                    .add(i * 1);
                                                                                let e78 = {
                                                                                    let l77 = i32::from(*base.add(0).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l77 as u8,
                                                                                    )
                                                                                };
                                                                                result78.push(e78);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base78,
                                                                                len78 * 1,
                                                                                1,
                                                                            );

                                                                            result78
                                                                        };
                                                                        V111::FlagsValue(e111)
                                                                    }
                                                                    4 => {
                                                                        let e111 = {
                                                                            let l79 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l80 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len81 = l80;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l79.cast(),
                                                                                len81,
                                                                                len81,
                                                                            )
                                                                        };
                                                                        V111::TupleValue(e111)
                                                                    }
                                                                    5 => {
                                                                        let e111 = {
                                                                            let l82 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l83 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len84 = l83;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l82.cast(),
                                                                                len84,
                                                                                len84,
                                                                            )
                                                                        };
                                                                        V111::ListValue(e111)
                                                                    }
                                                                    6 => {
                                                                        let e111 = {
                                                                            let l85 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l85 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l86 = *base.add(12).cast::<i32>();

                                            l86
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V111::OptionValue(e111)
                                                                    }
                                                                    7 => {
                                                                        let e111 = {
                                                                            let l87 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l87 {
                                        0 => {
                                          let e = {
                                            let l88 = i32::from(*base.add(12).cast::<u8>());

                                            match l88 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l89 = *base.add(16).cast::<i32>();

                                                  l89
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l90 = i32::from(*base.add(12).cast::<u8>());

                                            match l90 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l91 = *base.add(16).cast::<i32>();

                                                  l91
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V111::ResultValue(e111)
                                                                    }
                                                                    8 => {
                                                                        let e111 = {
                                                                            let l92 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            l92 as u8
                                                                        };
                                                                        V111::PrimU8(e111)
                                                                    }
                                                                    9 => {
                                                                        let e111 = {
                                                                            let l93 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u16>(),
                                                                            );

                                                                            l93 as u16
                                                                        };
                                                                        V111::PrimU16(e111)
                                                                    }
                                                                    10 => {
                                                                        let e111 = {
                                                                            let l94 = *base
                                                                                .add(8)
                                                                                .cast::<i32>(
                                                                            );

                                                                            l94 as u32
                                                                        };
                                                                        V111::PrimU32(e111)
                                                                    }
                                                                    11 => {
                                                                        let e111 = {
                                                                            let l95 = *base
                                                                                .add(8)
                                                                                .cast::<i64>(
                                                                            );

                                                                            l95 as u64
                                                                        };
                                                                        V111::PrimU64(e111)
                                                                    }
                                                                    12 => {
                                                                        let e111 = {
                                                                            let l96 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i8>(),
                                                                            );

                                                                            l96 as i8
                                                                        };
                                                                        V111::PrimS8(e111)
                                                                    }
                                                                    13 => {
                                                                        let e111 = {
                                                                            let l97 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i16>(),
                                                                            );

                                                                            l97 as i16
                                                                        };
                                                                        V111::PrimS16(e111)
                                                                    }
                                                                    14 => {
                                                                        let e111 = {
                                                                            let l98 = *base
                                                                                .add(8)
                                                                                .cast::<i32>(
                                                                            );

                                                                            l98
                                                                        };
                                                                        V111::PrimS32(e111)
                                                                    }
                                                                    15 => {
                                                                        let e111 = {
                                                                            let l99 = *base
                                                                                .add(8)
                                                                                .cast::<i64>(
                                                                            );

                                                                            l99
                                                                        };
                                                                        V111::PrimS64(e111)
                                                                    }
                                                                    16 => {
                                                                        let e111 = {
                                                                            let l100 = *base
                                                                                .add(8)
                                                                                .cast::<f32>();

                                                                            l100
                                                                        };
                                                                        V111::PrimFloat32(e111)
                                                                    }
                                                                    17 => {
                                                                        let e111 = {
                                                                            let l101 = *base
                                                                                .add(8)
                                                                                .cast::<f64>();

                                                                            l101
                                                                        };
                                                                        V111::PrimFloat64(e111)
                                                                    }
                                                                    18 => {
                                                                        let e111 = {
                                                                            let l102 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            _rt::char_lift(
                                                                                l102 as u32,
                                                                            )
                                                                        };
                                                                        V111::PrimChar(e111)
                                                                    }
                                                                    19 => {
                                                                        let e111 = {
                                                                            let l103 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l103 as u8,
                                                                            )
                                                                        };
                                                                        V111::PrimBool(e111)
                                                                    }
                                                                    20 => {
                                                                        let e111 = {
                                                                            let l104 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l105 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len106 = l105;
                                                                            let bytes106 = _rt::Vec::from_raw_parts(l104.cast(), len106, len106);

                                                                            _rt::string_lift(
                                                                                bytes106,
                                                                            )
                                                                        };
                                                                        V111::PrimString(e111)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e111 = {
                                                                            let l107 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l108 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len109 = l108;
                                                                            let bytes109 = _rt::Vec::from_raw_parts(l107.cast(), len109, len109);
                                                                            let l110 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            (super::super::super::golem::rpc::types::Uri{
                                        value: _rt::string_lift(bytes109),
                                      }, l110 as u64)
                                                                        };
                                                                        V111::Handle(e111)
                                                                    }
                                                                };

                                                                v111
                                                            };
                                                            result112.push(e112);
                                                        }
                                                        _rt::cabi_dealloc(base112, len112 * 24, 8);
                                                        let l113 = *base.add(48).cast::<*mut u8>();
                                                        let l114 = *base.add(52).cast::<usize>();
                                                        let base160 = l113;
                                                        let len160 = l114;
                                                        let mut result160 =
                                                            _rt::Vec::with_capacity(len160);
                                                        for i in 0..len160 {
                                                            let base = base160.add(i * 24);
                                                            let e160 = {
                                                                let l115 = i32::from(
                                                                    *base.add(0).cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::rpc::types::WitNode as V159;
                                                                let v159 = match l115 {
                                                                    0 => {
                                                                        let e159 = {
                                                                            let l116 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l117 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len118 = l117;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l116.cast(),
                                                                                len118,
                                                                                len118,
                                                                            )
                                                                        };
                                                                        V159::RecordValue(e159)
                                                                    }
                                                                    1 => {
                                                                        let e159 = {
                                                                            let l119 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();
                                                                            let l120 = i32::from(
                                                                                *base
                                                                                    .add(12)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (l119 as u32, match l120 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l121 = *base.add(16).cast::<i32>();

                                            l121
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        V159::VariantValue(e159)
                                                                    }
                                                                    2 => {
                                                                        let e159 = {
                                                                            let l122 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l122 as u32
                                                                        };
                                                                        V159::EnumValue(e159)
                                                                    }
                                                                    3 => {
                                                                        let e159 = {
                                                                            let l123 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l124 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let base126 = l123;
                                                                            let len126 = l124;
                                                                            let mut result126 = _rt::Vec::with_capacity(len126);
                                                                            for i in 0..len126 {
                                                                                let base = base126
                                                                                    .add(i * 1);
                                                                                let e126 = {
                                                                                    let l125 = i32::from(*base.add(0).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l125 as u8,
                                                                                    )
                                                                                };
                                                                                result126
                                                                                    .push(e126);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base126,
                                                                                len126 * 1,
                                                                                1,
                                                                            );

                                                                            result126
                                                                        };
                                                                        V159::FlagsValue(e159)
                                                                    }
                                                                    4 => {
                                                                        let e159 = {
                                                                            let l127 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l128 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len129 = l128;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l127.cast(),
                                                                                len129,
                                                                                len129,
                                                                            )
                                                                        };
                                                                        V159::TupleValue(e159)
                                                                    }
                                                                    5 => {
                                                                        let e159 = {
                                                                            let l130 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l131 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len132 = l131;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l130.cast(),
                                                                                len132,
                                                                                len132,
                                                                            )
                                                                        };
                                                                        V159::ListValue(e159)
                                                                    }
                                                                    6 => {
                                                                        let e159 = {
                                                                            let l133 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l133 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l134 = *base.add(12).cast::<i32>();

                                            l134
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V159::OptionValue(e159)
                                                                    }
                                                                    7 => {
                                                                        let e159 = {
                                                                            let l135 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l135 {
                                        0 => {
                                          let e = {
                                            let l136 = i32::from(*base.add(12).cast::<u8>());

                                            match l136 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l137 = *base.add(16).cast::<i32>();

                                                  l137
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l138 = i32::from(*base.add(12).cast::<u8>());

                                            match l138 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l139 = *base.add(16).cast::<i32>();

                                                  l139
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V159::ResultValue(e159)
                                                                    }
                                                                    8 => {
                                                                        let e159 = {
                                                                            let l140 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            l140 as u8
                                                                        };
                                                                        V159::PrimU8(e159)
                                                                    }
                                                                    9 => {
                                                                        let e159 = {
                                                                            let l141 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u16>(),
                                                                            );

                                                                            l141 as u16
                                                                        };
                                                                        V159::PrimU16(e159)
                                                                    }
                                                                    10 => {
                                                                        let e159 = {
                                                                            let l142 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l142 as u32
                                                                        };
                                                                        V159::PrimU32(e159)
                                                                    }
                                                                    11 => {
                                                                        let e159 = {
                                                                            let l143 = *base
                                                                                .add(8)
                                                                                .cast::<i64>();

                                                                            l143 as u64
                                                                        };
                                                                        V159::PrimU64(e159)
                                                                    }
                                                                    12 => {
                                                                        let e159 = {
                                                                            let l144 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i8>(),
                                                                            );

                                                                            l144 as i8
                                                                        };
                                                                        V159::PrimS8(e159)
                                                                    }
                                                                    13 => {
                                                                        let e159 = {
                                                                            let l145 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i16>(),
                                                                            );

                                                                            l145 as i16
                                                                        };
                                                                        V159::PrimS16(e159)
                                                                    }
                                                                    14 => {
                                                                        let e159 = {
                                                                            let l146 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l146
                                                                        };
                                                                        V159::PrimS32(e159)
                                                                    }
                                                                    15 => {
                                                                        let e159 = {
                                                                            let l147 = *base
                                                                                .add(8)
                                                                                .cast::<i64>();

                                                                            l147
                                                                        };
                                                                        V159::PrimS64(e159)
                                                                    }
                                                                    16 => {
                                                                        let e159 = {
                                                                            let l148 = *base
                                                                                .add(8)
                                                                                .cast::<f32>();

                                                                            l148
                                                                        };
                                                                        V159::PrimFloat32(e159)
                                                                    }
                                                                    17 => {
                                                                        let e159 = {
                                                                            let l149 = *base
                                                                                .add(8)
                                                                                .cast::<f64>();

                                                                            l149
                                                                        };
                                                                        V159::PrimFloat64(e159)
                                                                    }
                                                                    18 => {
                                                                        let e159 = {
                                                                            let l150 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            _rt::char_lift(
                                                                                l150 as u32,
                                                                            )
                                                                        };
                                                                        V159::PrimChar(e159)
                                                                    }
                                                                    19 => {
                                                                        let e159 = {
                                                                            let l151 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l151 as u8,
                                                                            )
                                                                        };
                                                                        V159::PrimBool(e159)
                                                                    }
                                                                    20 => {
                                                                        let e159 = {
                                                                            let l152 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l153 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len154 = l153;
                                                                            let bytes154 = _rt::Vec::from_raw_parts(l152.cast(), len154, len154);

                                                                            _rt::string_lift(
                                                                                bytes154,
                                                                            )
                                                                        };
                                                                        V159::PrimString(e159)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e159 = {
                                                                            let l155 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l156 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len157 = l156;
                                                                            let bytes157 = _rt::Vec::from_raw_parts(l155.cast(), len157, len157);
                                                                            let l158 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            (super::super::super::golem::rpc::types::Uri{
                                        value: _rt::string_lift(bytes157),
                                      }, l158 as u64)
                                                                        };
                                                                        V159::Handle(e159)
                                                                    }
                                                                };

                                                                v159
                                                            };
                                                            result160.push(e160);
                                                        }
                                                        _rt::cabi_dealloc(base160, len160 * 24, 8);
                                                        let l161 =
                                                            i32::from(*base.add(56).cast::<u8>());
                                                        let v164 = match l161 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 4,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e164 = {
                                                                    let l162 = i32::from(
                                                                        *base.add(64).cast::<u8>(),
                                                                    );

                                                                    match l162 {
                                    0 => None,
                                    1 => {
                                      let e = {
                                        let l163 = *base.add(72).cast::<i64>();

                                        l163 as u64
                                      };
                                      Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                  }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e164)
                                                            }
                                                        };

                                                        ImportedFunctionInvokedParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l60 as u64,
                                nanoseconds: l61 as u32,
                              },
                              function_name: _rt::string_lift(bytes64),
                              request: super::super::super::golem::rpc::types::WitValue{
                                nodes: result112,
                              },
                              response: super::super::super::golem::rpc::types::WitValue{
                                nodes: result160,
                              },
                              wrapped_function_type: v164,
                            }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e527)
                                                }
                                                2 => {
                                                    let e527 = {
                                                        let l165 = *base.add(16).cast::<i64>();
                                                        let l166 = *base.add(24).cast::<i32>();
                                                        let l167 = *base.add(32).cast::<*mut u8>();
                                                        let l168 = *base.add(36).cast::<usize>();
                                                        let len169 = l168;
                                                        let bytes169 = _rt::Vec::from_raw_parts(
                                                            l167.cast(),
                                                            len169,
                                                            len169,
                                                        );
                                                        let l170 = *base.add(40).cast::<*mut u8>();
                                                        let l171 = *base.add(44).cast::<usize>();
                                                        let base220 = l170;
                                                        let len220 = l171;
                                                        let mut result220 =
                                                            _rt::Vec::with_capacity(len220);
                                                        for i in 0..len220 {
                                                            let base = base220.add(i * 8);
                                                            let e220 = {
                                                                let l172 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l173 =
                                                                    *base.add(4).cast::<usize>();
                                                                let base219 = l172;
                                                                let len219 = l173;
                                                                let mut result219 =
                                                                    _rt::Vec::with_capacity(len219);
                                                                for i in 0..len219 {
                                                                    let base = base219.add(i * 24);
                                                                    let e219 = {
                                                                        let l174 = i32::from(
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        use super::super::super::golem::rpc::types::WitNode as V218;
                                                                        let v218 = match l174 {
                                                                            0 => {
                                                                                let e218 = {
                                                                                    let l175 = *base.add(8).cast::<*mut u8>();
                                                                                    let l176 = *base.add(12).cast::<usize>();
                                                                                    let len177 =
                                                                                        l176;

                                                                                    _rt::Vec::from_raw_parts(l175.cast(), len177, len177)
                                                                                };
                                                                                V218::RecordValue(
                                                                                    e218,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e218 = {
                                                                                    let l178 = *base.add(8).cast::<i32>();
                                                                                    let l179 = i32::from(*base.add(12).cast::<u8>());

                                                                                    (l178 as u32, match l179 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l180 = *base.add(16).cast::<i32>();

                                                l180
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          })
                                                                                };
                                                                                V218::VariantValue(
                                                                                    e218,
                                                                                )
                                                                            }
                                                                            2 => {
                                                                                let e218 = {
                                                                                    let l181 = *base.add(8).cast::<i32>();

                                                                                    l181 as u32
                                                                                };
                                                                                V218::EnumValue(
                                                                                    e218,
                                                                                )
                                                                            }
                                                                            3 => {
                                                                                let e218 = {
                                                                                    let l182 = *base.add(8).cast::<*mut u8>();
                                                                                    let l183 = *base.add(12).cast::<usize>();
                                                                                    let base185 =
                                                                                        l182;
                                                                                    let len185 =
                                                                                        l183;
                                                                                    let mut result185 = _rt::Vec::with_capacity(len185);
                                                                                    for i in
                                                                                        0..len185
                                                                                    {
                                                                                        let base = base185.add(i * 1);
                                                                                        let e185 = {
                                                                                            let l184 = i32::from(*base.add(0).cast::<u8>());

                                                                                            _rt::bool_lift(l184 as u8)
                                                                                        };
                                                                                        result185
                                                                                            .push(
                                                                                            e185,
                                                                                        );
                                                                                    }
                                                                                    _rt::cabi_dealloc(base185, len185 * 1, 1);

                                                                                    result185
                                                                                };
                                                                                V218::FlagsValue(
                                                                                    e218,
                                                                                )
                                                                            }
                                                                            4 => {
                                                                                let e218 = {
                                                                                    let l186 = *base.add(8).cast::<*mut u8>();
                                                                                    let l187 = *base.add(12).cast::<usize>();
                                                                                    let len188 =
                                                                                        l187;

                                                                                    _rt::Vec::from_raw_parts(l186.cast(), len188, len188)
                                                                                };
                                                                                V218::TupleValue(
                                                                                    e218,
                                                                                )
                                                                            }
                                                                            5 => {
                                                                                let e218 = {
                                                                                    let l189 = *base.add(8).cast::<*mut u8>();
                                                                                    let l190 = *base.add(12).cast::<usize>();
                                                                                    let len191 =
                                                                                        l190;

                                                                                    _rt::Vec::from_raw_parts(l189.cast(), len191, len191)
                                                                                };
                                                                                V218::ListValue(
                                                                                    e218,
                                                                                )
                                                                            }
                                                                            6 => {
                                                                                let e218 = {
                                                                                    let l192 = i32::from(*base.add(8).cast::<u8>());

                                                                                    match l192 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l193 = *base.add(12).cast::<i32>();

                                                l193
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }
                                                                                };
                                                                                V218::OptionValue(
                                                                                    e218,
                                                                                )
                                                                            }
                                                                            7 => {
                                                                                let e218 = {
                                                                                    let l194 = i32::from(*base.add(8).cast::<u8>());

                                                                                    match l194 {
                                            0 => {
                                              let e = {
                                                let l195 = i32::from(*base.add(12).cast::<u8>());

                                                match l195 {
                                                  0 => None,
                                                  1 => {
                                                    let e = {
                                                      let l196 = *base.add(16).cast::<i32>();

                                                      l196
                                                    };
                                                    Some(e)
                                                  }
                                                  _ => _rt::invalid_enum_discriminant(),
                                                }
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l197 = i32::from(*base.add(12).cast::<u8>());

                                                match l197 {
                                                  0 => None,
                                                  1 => {
                                                    let e = {
                                                      let l198 = *base.add(16).cast::<i32>();

                                                      l198
                                                    };
                                                    Some(e)
                                                  }
                                                  _ => _rt::invalid_enum_discriminant(),
                                                }
                                              };
                                              Err(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }
                                                                                };
                                                                                V218::ResultValue(
                                                                                    e218,
                                                                                )
                                                                            }
                                                                            8 => {
                                                                                let e218 = {
                                                                                    let l199 = i32::from(*base.add(8).cast::<u8>());

                                                                                    l199 as u8
                                                                                };
                                                                                V218::PrimU8(e218)
                                                                            }
                                                                            9 => {
                                                                                let e218 = {
                                                                                    let l200 = i32::from(*base.add(8).cast::<u16>());

                                                                                    l200 as u16
                                                                                };
                                                                                V218::PrimU16(e218)
                                                                            }
                                                                            10 => {
                                                                                let e218 = {
                                                                                    let l201 = *base.add(8).cast::<i32>();

                                                                                    l201 as u32
                                                                                };
                                                                                V218::PrimU32(e218)
                                                                            }
                                                                            11 => {
                                                                                let e218 = {
                                                                                    let l202 = *base.add(8).cast::<i64>();

                                                                                    l202 as u64
                                                                                };
                                                                                V218::PrimU64(e218)
                                                                            }
                                                                            12 => {
                                                                                let e218 = {
                                                                                    let l203 = i32::from(*base.add(8).cast::<i8>());

                                                                                    l203 as i8
                                                                                };
                                                                                V218::PrimS8(e218)
                                                                            }
                                                                            13 => {
                                                                                let e218 = {
                                                                                    let l204 = i32::from(*base.add(8).cast::<i16>());

                                                                                    l204 as i16
                                                                                };
                                                                                V218::PrimS16(e218)
                                                                            }
                                                                            14 => {
                                                                                let e218 = {
                                                                                    let l205 = *base.add(8).cast::<i32>();

                                                                                    l205
                                                                                };
                                                                                V218::PrimS32(e218)
                                                                            }
                                                                            15 => {
                                                                                let e218 = {
                                                                                    let l206 = *base.add(8).cast::<i64>();

                                                                                    l206
                                                                                };
                                                                                V218::PrimS64(e218)
                                                                            }
                                                                            16 => {
                                                                                let e218 = {
                                                                                    let l207 = *base.add(8).cast::<f32>();

                                                                                    l207
                                                                                };
                                                                                V218::PrimFloat32(
                                                                                    e218,
                                                                                )
                                                                            }
                                                                            17 => {
                                                                                let e218 = {
                                                                                    let l208 = *base.add(8).cast::<f64>();

                                                                                    l208
                                                                                };
                                                                                V218::PrimFloat64(
                                                                                    e218,
                                                                                )
                                                                            }
                                                                            18 => {
                                                                                let e218 = {
                                                                                    let l209 = *base.add(8).cast::<i32>();

                                                                                    _rt::char_lift(
                                                                                        l209 as u32,
                                                                                    )
                                                                                };
                                                                                V218::PrimChar(e218)
                                                                            }
                                                                            19 => {
                                                                                let e218 = {
                                                                                    let l210 = i32::from(*base.add(8).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l210 as u8,
                                                                                    )
                                                                                };
                                                                                V218::PrimBool(e218)
                                                                            }
                                                                            20 => {
                                                                                let e218 = {
                                                                                    let l211 = *base.add(8).cast::<*mut u8>();
                                                                                    let l212 = *base.add(12).cast::<usize>();
                                                                                    let len213 =
                                                                                        l212;
                                                                                    let bytes213 = _rt::Vec::from_raw_parts(l211.cast(), len213, len213);

                                                                                    _rt::string_lift(
                                                                                        bytes213,
                                                                                    )
                                                                                };
                                                                                V218::PrimString(
                                                                                    e218,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e218 = {
                                                                                    let l214 = *base.add(8).cast::<*mut u8>();
                                                                                    let l215 = *base.add(12).cast::<usize>();
                                                                                    let len216 =
                                                                                        l215;
                                                                                    let bytes216 = _rt::Vec::from_raw_parts(l214.cast(), len216, len216);
                                                                                    let l217 = *base.add(16).cast::<i64>();

                                                                                    (super::super::super::golem::rpc::types::Uri{
                                            value: _rt::string_lift(bytes216),
                                          }, l217 as u64)
                                                                                };
                                                                                V218::Handle(e218)
                                                                            }
                                                                        };

                                                                        v218
                                                                    };
                                                                    result219.push(e219);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base219,
                                                                    len219 * 24,
                                                                    8,
                                                                );

                                                                super::super::super::golem::rpc::types::WitValue{
                                  nodes: result219,
                                }
                                                            };
                                                            result220.push(e220);
                                                        }
                                                        _rt::cabi_dealloc(base220, len220 * 8, 4);
                                                        let l221 = *base.add(48).cast::<*mut u8>();
                                                        let l222 = *base.add(52).cast::<usize>();
                                                        let len223 = l222;
                                                        let bytes223 = _rt::Vec::from_raw_parts(
                                                            l221.cast(),
                                                            len223,
                                                            len223,
                                                        );

                                                        ExportedFunctionInvokedParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l165 as u64,
                                nanoseconds: l166 as u32,
                              },
                              function_name: _rt::string_lift(bytes169),
                              request: result220,
                              idempotency_key: _rt::string_lift(bytes223),
                            }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e527)
                                                }
                                                3 => {
                                                    let e527 = {
                                                        let l224 = *base.add(16).cast::<i64>();
                                                        let l225 = *base.add(24).cast::<i32>();
                                                        let l226 = *base.add(32).cast::<*mut u8>();
                                                        let l227 = *base.add(36).cast::<usize>();
                                                        let base273 = l226;
                                                        let len273 = l227;
                                                        let mut result273 =
                                                            _rt::Vec::with_capacity(len273);
                                                        for i in 0..len273 {
                                                            let base = base273.add(i * 24);
                                                            let e273 = {
                                                                let l228 = i32::from(
                                                                    *base.add(0).cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::rpc::types::WitNode as V272;
                                                                let v272 = match l228 {
                                                                    0 => {
                                                                        let e272 = {
                                                                            let l229 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l230 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len231 = l230;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l229.cast(),
                                                                                len231,
                                                                                len231,
                                                                            )
                                                                        };
                                                                        V272::RecordValue(e272)
                                                                    }
                                                                    1 => {
                                                                        let e272 = {
                                                                            let l232 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();
                                                                            let l233 = i32::from(
                                                                                *base
                                                                                    .add(12)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (l232 as u32, match l233 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l234 = *base.add(16).cast::<i32>();

                                            l234
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        V272::VariantValue(e272)
                                                                    }
                                                                    2 => {
                                                                        let e272 = {
                                                                            let l235 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l235 as u32
                                                                        };
                                                                        V272::EnumValue(e272)
                                                                    }
                                                                    3 => {
                                                                        let e272 = {
                                                                            let l236 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l237 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let base239 = l236;
                                                                            let len239 = l237;
                                                                            let mut result239 = _rt::Vec::with_capacity(len239);
                                                                            for i in 0..len239 {
                                                                                let base = base239
                                                                                    .add(i * 1);
                                                                                let e239 = {
                                                                                    let l238 = i32::from(*base.add(0).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l238 as u8,
                                                                                    )
                                                                                };
                                                                                result239
                                                                                    .push(e239);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base239,
                                                                                len239 * 1,
                                                                                1,
                                                                            );

                                                                            result239
                                                                        };
                                                                        V272::FlagsValue(e272)
                                                                    }
                                                                    4 => {
                                                                        let e272 = {
                                                                            let l240 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l241 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len242 = l241;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l240.cast(),
                                                                                len242,
                                                                                len242,
                                                                            )
                                                                        };
                                                                        V272::TupleValue(e272)
                                                                    }
                                                                    5 => {
                                                                        let e272 = {
                                                                            let l243 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l244 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len245 = l244;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l243.cast(),
                                                                                len245,
                                                                                len245,
                                                                            )
                                                                        };
                                                                        V272::ListValue(e272)
                                                                    }
                                                                    6 => {
                                                                        let e272 = {
                                                                            let l246 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l246 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l247 = *base.add(12).cast::<i32>();

                                            l247
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V272::OptionValue(e272)
                                                                    }
                                                                    7 => {
                                                                        let e272 = {
                                                                            let l248 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            match l248 {
                                        0 => {
                                          let e = {
                                            let l249 = i32::from(*base.add(12).cast::<u8>());

                                            match l249 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l250 = *base.add(16).cast::<i32>();

                                                  l250
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l251 = i32::from(*base.add(12).cast::<u8>());

                                            match l251 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l252 = *base.add(16).cast::<i32>();

                                                  l252
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }
                                                                        };
                                                                        V272::ResultValue(e272)
                                                                    }
                                                                    8 => {
                                                                        let e272 = {
                                                                            let l253 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            l253 as u8
                                                                        };
                                                                        V272::PrimU8(e272)
                                                                    }
                                                                    9 => {
                                                                        let e272 = {
                                                                            let l254 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u16>(),
                                                                            );

                                                                            l254 as u16
                                                                        };
                                                                        V272::PrimU16(e272)
                                                                    }
                                                                    10 => {
                                                                        let e272 = {
                                                                            let l255 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l255 as u32
                                                                        };
                                                                        V272::PrimU32(e272)
                                                                    }
                                                                    11 => {
                                                                        let e272 = {
                                                                            let l256 = *base
                                                                                .add(8)
                                                                                .cast::<i64>();

                                                                            l256 as u64
                                                                        };
                                                                        V272::PrimU64(e272)
                                                                    }
                                                                    12 => {
                                                                        let e272 = {
                                                                            let l257 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i8>(),
                                                                            );

                                                                            l257 as i8
                                                                        };
                                                                        V272::PrimS8(e272)
                                                                    }
                                                                    13 => {
                                                                        let e272 = {
                                                                            let l258 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<i16>(),
                                                                            );

                                                                            l258 as i16
                                                                        };
                                                                        V272::PrimS16(e272)
                                                                    }
                                                                    14 => {
                                                                        let e272 = {
                                                                            let l259 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            l259
                                                                        };
                                                                        V272::PrimS32(e272)
                                                                    }
                                                                    15 => {
                                                                        let e272 = {
                                                                            let l260 = *base
                                                                                .add(8)
                                                                                .cast::<i64>();

                                                                            l260
                                                                        };
                                                                        V272::PrimS64(e272)
                                                                    }
                                                                    16 => {
                                                                        let e272 = {
                                                                            let l261 = *base
                                                                                .add(8)
                                                                                .cast::<f32>();

                                                                            l261
                                                                        };
                                                                        V272::PrimFloat32(e272)
                                                                    }
                                                                    17 => {
                                                                        let e272 = {
                                                                            let l262 = *base
                                                                                .add(8)
                                                                                .cast::<f64>();

                                                                            l262
                                                                        };
                                                                        V272::PrimFloat64(e272)
                                                                    }
                                                                    18 => {
                                                                        let e272 = {
                                                                            let l263 = *base
                                                                                .add(8)
                                                                                .cast::<i32>();

                                                                            _rt::char_lift(
                                                                                l263 as u32,
                                                                            )
                                                                        };
                                                                        V272::PrimChar(e272)
                                                                    }
                                                                    19 => {
                                                                        let e272 = {
                                                                            let l264 = i32::from(
                                                                                *base
                                                                                    .add(8)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l264 as u8,
                                                                            )
                                                                        };
                                                                        V272::PrimBool(e272)
                                                                    }
                                                                    20 => {
                                                                        let e272 = {
                                                                            let l265 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l266 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len267 = l266;
                                                                            let bytes267 = _rt::Vec::from_raw_parts(l265.cast(), len267, len267);

                                                                            _rt::string_lift(
                                                                                bytes267,
                                                                            )
                                                                        };
                                                                        V272::PrimString(e272)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e272 = {
                                                                            let l268 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>();
                                                                            let l269 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len270 = l269;
                                                                            let bytes270 = _rt::Vec::from_raw_parts(l268.cast(), len270, len270);
                                                                            let l271 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            (super::super::super::golem::rpc::types::Uri{
                                        value: _rt::string_lift(bytes270),
                                      }, l271 as u64)
                                                                        };
                                                                        V272::Handle(e272)
                                                                    }
                                                                };

                                                                v272
                                                            };
                                                            result273.push(e273);
                                                        }
                                                        _rt::cabi_dealloc(base273, len273 * 24, 8);
                                                        let l274 = *base.add(40).cast::<i64>();

                                                        ExportedFunctionCompletedParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l224 as u64,
                                nanoseconds: l225 as u32,
                              },
                              response: super::super::super::golem::rpc::types::WitValue{
                                nodes: result273,
                              },
                              consumed_fuel: l274,
                            }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e527)
                                                }
                                                4 => {
                                                    let e527 = {
                                                        let l275 = *base.add(16).cast::<i64>();
                                                        let l276 = *base.add(24).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l275 as u64,
                              nanoseconds: l276 as u32,
                            }
                                                    };
                                                    OplogEntry::Suspend(e527)
                                                }
                                                5 => {
                                                    let e527 = {
                                                        let l277 = *base.add(16).cast::<i64>();
                                                        let l278 = *base.add(24).cast::<i32>();
                                                        let l279 = *base.add(32).cast::<*mut u8>();
                                                        let l280 = *base.add(36).cast::<usize>();
                                                        let len281 = l280;
                                                        let bytes281 = _rt::Vec::from_raw_parts(
                                                            l279.cast(),
                                                            len281,
                                                            len281,
                                                        );

                                                        ErrorParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l277 as u64,
                                nanoseconds: l278 as u32,
                              },
                              error: _rt::string_lift(bytes281),
                            }
                                                    };
                                                    OplogEntry::Error(e527)
                                                }
                                                6 => {
                                                    let e527 = {
                                                        let l282 = *base.add(16).cast::<i64>();
                                                        let l283 = *base.add(24).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l282 as u64,
                              nanoseconds: l283 as u32,
                            }
                                                    };
                                                    OplogEntry::NoOp(e527)
                                                }
                                                7 => {
                                                    let e527 = {
                                                        let l284 = *base.add(16).cast::<i64>();
                                                        let l285 = *base.add(24).cast::<i32>();
                                                        let l286 = *base.add(32).cast::<i64>();
                                                        let l287 = *base.add(40).cast::<i64>();

                                                        JumpParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l284 as u64,
                                nanoseconds: l285 as u32,
                              },
                              start: l286 as u64,
                              end: l287 as u64,
                            }
                                                    };
                                                    OplogEntry::Jump(e527)
                                                }
                                                8 => {
                                                    let e527 = {
                                                        let l288 = *base.add(16).cast::<i64>();
                                                        let l289 = *base.add(24).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l288 as u64,
                              nanoseconds: l289 as u32,
                            }
                                                    };
                                                    OplogEntry::Interrupted(e527)
                                                }
                                                9 => {
                                                    let e527 = {
                                                        let l290 = *base.add(16).cast::<i64>();
                                                        let l291 = *base.add(24).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l290 as u64,
                              nanoseconds: l291 as u32,
                            }
                                                    };
                                                    OplogEntry::Exited(e527)
                                                }
                                                10 => {
                                                    let e527 = {
                                                        let l292 = *base.add(16).cast::<i64>();
                                                        let l293 = *base.add(24).cast::<i32>();
                                                        let l294 = *base.add(32).cast::<i32>();
                                                        let l295 = *base.add(40).cast::<i64>();
                                                        let l296 = *base.add(48).cast::<i64>();
                                                        let l297 = *base.add(56).cast::<f64>();
                                                        let l298 =
                                                            i32::from(*base.add(64).cast::<u8>());

                                                        ChangeRetryPolicyParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l292 as u64,
                                nanoseconds: l293 as u32,
                              },
                              retry_policy: super::super::super::golem::api::host::RetryPolicy{
                                max_attempts: l294 as u32,
                                min_delay: l295 as u64,
                                max_delay: l296 as u64,
                                multiplier: l297,
                                max_jitter_factor: match l298 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l299 = *base.add(72).cast::<f64>();

                                      l299
                                    };
                                    Some(e)
                                  }
                                  _ => _rt::invalid_enum_discriminant(),
                                },
                              },
                            }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e527)
                                                }
                                                11 => {
                                                    let e527 = {
                                                        let l300 = *base.add(16).cast::<i64>();
                                                        let l301 = *base.add(24).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l300 as u64,
                              nanoseconds: l301 as u32,
                            }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e527)
                                                }
                                                12 => {
                                                    let e527 = {
                                                        let l302 = *base.add(16).cast::<i64>();
                                                        let l303 = *base.add(24).cast::<i32>();
                                                        let l304 = *base.add(32).cast::<i64>();

                                                        EndAtomicRegionParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l302 as u64,
                                nanoseconds: l303 as u32,
                              },
                              begin_index: l304 as u64,
                            }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e527)
                                                }
                                                13 => {
                                                    let e527 = {
                                                        let l305 = *base.add(16).cast::<i64>();
                                                        let l306 = *base.add(24).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l305 as u64,
                              nanoseconds: l306 as u32,
                            }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e527)
                                                }
                                                14 => {
                                                    let e527 = {
                                                        let l307 = *base.add(16).cast::<i64>();
                                                        let l308 = *base.add(24).cast::<i32>();
                                                        let l309 = *base.add(32).cast::<i64>();

                                                        EndRemoteWriteParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l307 as u64,
                                nanoseconds: l308 as u32,
                              },
                              begin_index: l309 as u64,
                            }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e527)
                                                }
                                                15 => {
                                                    let e527 = {
                                                        let l310 = *base.add(16).cast::<i64>();
                                                        let l311 = *base.add(24).cast::<i32>();
                                                        let l312 =
                                                            i32::from(*base.add(32).cast::<u8>());
                                                        let v372 = match l312 {
                                                            0 => {
                                                                let e372 = {
                                                                    let l313 = *base
                                                                        .add(40)
                                                                        .cast::<*mut u8>();
                                                                    let l314 = *base
                                                                        .add(44)
                                                                        .cast::<usize>();
                                                                    let len315 = l314;
                                                                    let bytes315 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l313.cast(),
                                                                            len315,
                                                                            len315,
                                                                        );
                                                                    let l316 = *base
                                                                        .add(48)
                                                                        .cast::<*mut u8>();
                                                                    let l317 = *base
                                                                        .add(52)
                                                                        .cast::<usize>();
                                                                    let len318 = l317;
                                                                    let bytes318 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l316.cast(),
                                                                            len318,
                                                                            len318,
                                                                        );
                                                                    let l319 = i32::from(
                                                                        *base.add(56).cast::<u8>(),
                                                                    );

                                                                    ExportedFunctionInvocationParameters{
                                    idempotency_key: _rt::string_lift(bytes315),
                                    function_name: _rt::string_lift(bytes318),
                                    input: match l319 {
                                      0 => None,
                                      1 => {
                                        let e = {
                                          let l320 = *base.add(60).cast::<*mut u8>();
                                          let l321 = *base.add(64).cast::<usize>();
                                          let base370 = l320;
                                          let len370 = l321;
                                          let mut result370 = _rt::Vec::with_capacity(len370);
                                          for i in 0..len370 {
                                            let base = base370.add(i * 8);
                                            let e370 = {
                                              let l322 = *base.add(0).cast::<*mut u8>();
                                              let l323 = *base.add(4).cast::<usize>();
                                              let base369 = l322;
                                              let len369 = l323;
                                              let mut result369 = _rt::Vec::with_capacity(len369);
                                              for i in 0..len369 {
                                                let base = base369.add(i * 24);
                                                let e369 = {
                                                  let l324 = i32::from(*base.add(0).cast::<u8>());
                                                  use super::super::super::golem::rpc::types::WitNode as V368;
                                                  let v368 = match l324 {
                                                    0 => {
                                                      let e368 = {
                                                        let l325 = *base.add(8).cast::<*mut u8>();
                                                        let l326 = *base.add(12).cast::<usize>();
                                                        let len327 = l326;

                                                        _rt::Vec::from_raw_parts(l325.cast(), len327, len327)
                                                      };
                                                      V368::RecordValue(e368)
                                                    }
                                                    1 => {
                                                      let e368 = {
                                                        let l328 = *base.add(8).cast::<i32>();
                                                        let l329 = i32::from(*base.add(12).cast::<u8>());

                                                        (l328 as u32, match l329 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l330 = *base.add(16).cast::<i32>();

                                                              l330
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        })
                                                      };
                                                      V368::VariantValue(e368)
                                                    }
                                                    2 => {
                                                      let e368 = {
                                                        let l331 = *base.add(8).cast::<i32>();

                                                        l331 as u32
                                                      };
                                                      V368::EnumValue(e368)
                                                    }
                                                    3 => {
                                                      let e368 = {
                                                        let l332 = *base.add(8).cast::<*mut u8>();
                                                        let l333 = *base.add(12).cast::<usize>();
                                                        let base335 = l332;
                                                        let len335 = l333;
                                                        let mut result335 = _rt::Vec::with_capacity(len335);
                                                        for i in 0..len335 {
                                                          let base = base335.add(i * 1);
                                                          let e335 = {
                                                            let l334 = i32::from(*base.add(0).cast::<u8>());

                                                            _rt::bool_lift(l334 as u8)
                                                          };
                                                          result335.push(e335);
                                                        }
                                                        _rt::cabi_dealloc(base335, len335 * 1, 1);

                                                        result335
                                                      };
                                                      V368::FlagsValue(e368)
                                                    }
                                                    4 => {
                                                      let e368 = {
                                                        let l336 = *base.add(8).cast::<*mut u8>();
                                                        let l337 = *base.add(12).cast::<usize>();
                                                        let len338 = l337;

                                                        _rt::Vec::from_raw_parts(l336.cast(), len338, len338)
                                                      };
                                                      V368::TupleValue(e368)
                                                    }
                                                    5 => {
                                                      let e368 = {
                                                        let l339 = *base.add(8).cast::<*mut u8>();
                                                        let l340 = *base.add(12).cast::<usize>();
                                                        let len341 = l340;

                                                        _rt::Vec::from_raw_parts(l339.cast(), len341, len341)
                                                      };
                                                      V368::ListValue(e368)
                                                    }
                                                    6 => {
                                                      let e368 = {
                                                        let l342 = i32::from(*base.add(8).cast::<u8>());

                                                        match l342 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l343 = *base.add(12).cast::<i32>();

                                                              l343
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                      };
                                                      V368::OptionValue(e368)
                                                    }
                                                    7 => {
                                                      let e368 = {
                                                        let l344 = i32::from(*base.add(8).cast::<u8>());

                                                        match l344 {
                                                          0 => {
                                                            let e = {
                                                              let l345 = i32::from(*base.add(12).cast::<u8>());

                                                              match l345 {
                                                                0 => None,
                                                                1 => {
                                                                  let e = {
                                                                    let l346 = *base.add(16).cast::<i32>();

                                                                    l346
                                                                  };
                                                                  Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                              }
                                                            };
                                                            Ok(e)
                                                          }
                                                          1 => {
                                                            let e = {
                                                              let l347 = i32::from(*base.add(12).cast::<u8>());

                                                              match l347 {
                                                                0 => None,
                                                                1 => {
                                                                  let e = {
                                                                    let l348 = *base.add(16).cast::<i32>();

                                                                    l348
                                                                  };
                                                                  Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                              }
                                                            };
                                                            Err(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                      };
                                                      V368::ResultValue(e368)
                                                    }
                                                    8 => {
                                                      let e368 = {
                                                        let l349 = i32::from(*base.add(8).cast::<u8>());

                                                        l349 as u8
                                                      };
                                                      V368::PrimU8(e368)
                                                    }
                                                    9 => {
                                                      let e368 = {
                                                        let l350 = i32::from(*base.add(8).cast::<u16>());

                                                        l350 as u16
                                                      };
                                                      V368::PrimU16(e368)
                                                    }
                                                    10 => {
                                                      let e368 = {
                                                        let l351 = *base.add(8).cast::<i32>();

                                                        l351 as u32
                                                      };
                                                      V368::PrimU32(e368)
                                                    }
                                                    11 => {
                                                      let e368 = {
                                                        let l352 = *base.add(8).cast::<i64>();

                                                        l352 as u64
                                                      };
                                                      V368::PrimU64(e368)
                                                    }
                                                    12 => {
                                                      let e368 = {
                                                        let l353 = i32::from(*base.add(8).cast::<i8>());

                                                        l353 as i8
                                                      };
                                                      V368::PrimS8(e368)
                                                    }
                                                    13 => {
                                                      let e368 = {
                                                        let l354 = i32::from(*base.add(8).cast::<i16>());

                                                        l354 as i16
                                                      };
                                                      V368::PrimS16(e368)
                                                    }
                                                    14 => {
                                                      let e368 = {
                                                        let l355 = *base.add(8).cast::<i32>();

                                                        l355
                                                      };
                                                      V368::PrimS32(e368)
                                                    }
                                                    15 => {
                                                      let e368 = {
                                                        let l356 = *base.add(8).cast::<i64>();

                                                        l356
                                                      };
                                                      V368::PrimS64(e368)
                                                    }
                                                    16 => {
                                                      let e368 = {
                                                        let l357 = *base.add(8).cast::<f32>();

                                                        l357
                                                      };
                                                      V368::PrimFloat32(e368)
                                                    }
                                                    17 => {
                                                      let e368 = {
                                                        let l358 = *base.add(8).cast::<f64>();

                                                        l358
                                                      };
                                                      V368::PrimFloat64(e368)
                                                    }
                                                    18 => {
                                                      let e368 = {
                                                        let l359 = *base.add(8).cast::<i32>();

                                                        _rt::char_lift(l359 as u32)
                                                      };
                                                      V368::PrimChar(e368)
                                                    }
                                                    19 => {
                                                      let e368 = {
                                                        let l360 = i32::from(*base.add(8).cast::<u8>());

                                                        _rt::bool_lift(l360 as u8)
                                                      };
                                                      V368::PrimBool(e368)
                                                    }
                                                    20 => {
                                                      let e368 = {
                                                        let l361 = *base.add(8).cast::<*mut u8>();
                                                        let l362 = *base.add(12).cast::<usize>();
                                                        let len363 = l362;
                                                        let bytes363 = _rt::Vec::from_raw_parts(l361.cast(), len363, len363);

                                                        _rt::string_lift(bytes363)
                                                      };
                                                      V368::PrimString(e368)
                                                    }
                                                    n => {
                                                      debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                      let e368 = {
                                                        let l364 = *base.add(8).cast::<*mut u8>();
                                                        let l365 = *base.add(12).cast::<usize>();
                                                        let len366 = l365;
                                                        let bytes366 = _rt::Vec::from_raw_parts(l364.cast(), len366, len366);
                                                        let l367 = *base.add(16).cast::<i64>();

                                                        (super::super::super::golem::rpc::types::Uri{
                                                          value: _rt::string_lift(bytes366),
                                                        }, l367 as u64)
                                                      };
                                                      V368::Handle(e368)
                                                    }
                                                  };

                                                  v368
                                                };
                                                result369.push(e369);
                                              }
                                              _rt::cabi_dealloc(base369, len369 * 24, 8);

                                              super::super::super::golem::rpc::types::WitValue{
                                                nodes: result369,
                                              }
                                            };
                                            result370.push(e370);
                                          }
                                          _rt::cabi_dealloc(base370, len370 * 8, 4);

                                          result370
                                        };
                                        Some(e)
                                      }
                                      _ => _rt::invalid_enum_discriminant(),
                                    },
                                  }
                                                                };
                                                                WorkerInvocation::ExportedFunction(
                                                                    e372,
                                                                )
                                                            }
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 1,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e372 = {
                                                                    let l371 =
                                                                        *base.add(40).cast::<i64>();

                                                                    l371 as u64
                                                                };
                                                                WorkerInvocation::ManualUpdate(e372)
                                                            }
                                                        };

                                                        PendingWorkerInvocationParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l310 as u64,
                                nanoseconds: l311 as u32,
                              },
                              invocation: v372,
                            }
                                                    };
                                                    OplogEntry::PendingWorkerInvocation(e527)
                                                }
                                                16 => {
                                                    let e527 = {
                                                        let l373 = *base.add(16).cast::<i64>();
                                                        let l374 = *base.add(24).cast::<i32>();
                                                        let l375 = *base.add(32).cast::<i64>();
                                                        let l376 =
                                                            i32::from(*base.add(40).cast::<u8>());
                                                        let v380 = match l376 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 1,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e380 = {
                                                                    let l377 = *base
                                                                        .add(44)
                                                                        .cast::<*mut u8>();
                                                                    let l378 = *base
                                                                        .add(48)
                                                                        .cast::<usize>();
                                                                    let len379 = l378;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l377.cast(),
                                                                        len379,
                                                                        len379,
                                                                    )
                                                                };
                                                                UpdateDescription::SnapshotBased(
                                                                    e380,
                                                                )
                                                            }
                                                        };

                                                        PendingUpdateParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l373 as u64,
                                nanoseconds: l374 as u32,
                              },
                              target_version: l375 as u64,
                              update_description: v380,
                            }
                                                    };
                                                    OplogEntry::PendingUpdate(e527)
                                                }
                                                17 => {
                                                    let e527 = {
                                                        let l381 = *base.add(16).cast::<i64>();
                                                        let l382 = *base.add(24).cast::<i32>();
                                                        let l383 = *base.add(32).cast::<i64>();
                                                        let l384 = *base.add(40).cast::<i64>();
                                                        let l385 = *base.add(48).cast::<*mut u8>();
                                                        let l386 = *base.add(52).cast::<usize>();
                                                        let base404 = l385;
                                                        let len404 = l386;
                                                        let mut result404 =
                                                            _rt::Vec::with_capacity(len404);
                                                        for i in 0..len404 {
                                                            let base = base404.add(i * 40);
                                                            let e404 = {
                                                                let l387 =
                                                                    *base.add(0).cast::<i64>();
                                                                let l388 =
                                                                    *base.add(8).cast::<i64>();
                                                                let l389 =
                                                                    *base.add(16).cast::<*mut u8>();
                                                                let l390 =
                                                                    *base.add(20).cast::<usize>();
                                                                let len391 = l390;
                                                                let bytes391 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l389.cast(),
                                                                        len391,
                                                                        len391,
                                                                    );
                                                                let l392 =
                                                                    *base.add(24).cast::<*mut u8>();
                                                                let l393 =
                                                                    *base.add(28).cast::<usize>();
                                                                let len394 = l393;
                                                                let bytes394 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l392.cast(),
                                                                        len394,
                                                                        len394,
                                                                    );
                                                                let l395 =
                                                                    *base.add(32).cast::<*mut u8>();
                                                                let l396 =
                                                                    *base.add(36).cast::<usize>();
                                                                let base403 = l395;
                                                                let len403 = l396;
                                                                let mut result403 =
                                                                    _rt::Vec::with_capacity(len403);
                                                                for i in 0..len403 {
                                                                    let base = base403.add(i * 16);
                                                                    let e403 = {
                                                                        let l397 = *base
                                                                            .add(0)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l398 = *base
                                                                            .add(4)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let len399 = l398;
                                                                        let bytes399 = _rt::Vec::from_raw_parts(l397.cast(), len399, len399);
                                                                        let l400 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l401 = *base
                                                                            .add(12)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let len402 = l401;
                                                                        let bytes402 = _rt::Vec::from_raw_parts(l400.cast(), len402, len402);

                                                                        (
                                                                            _rt::string_lift(
                                                                                bytes399,
                                                                            ),
                                                                            _rt::string_lift(
                                                                                bytes402,
                                                                            ),
                                                                        )
                                                                    };
                                                                    result403.push(e403);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base403,
                                                                    len403 * 16,
                                                                    4,
                                                                );

                                                                PluginInstallationDescription{
                                  installation_id: super::super::super::golem::api::host::Uuid{
                                    high_bits: l387 as u64,
                                    low_bits: l388 as u64,
                                  },
                                  name: _rt::string_lift(bytes391),
                                  version: _rt::string_lift(bytes394),
                                  parameters: result403,
                                }
                                                            };
                                                            result404.push(e404);
                                                        }
                                                        _rt::cabi_dealloc(base404, len404 * 40, 8);

                                                        SuccessfulUpdateParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l381 as u64,
                                nanoseconds: l382 as u32,
                              },
                              target_version: l383 as u64,
                              new_component_size: l384 as u64,
                              new_active_plugins: result404,
                            }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e527)
                                                }
                                                18 => {
                                                    let e527 = {
                                                        let l405 = *base.add(16).cast::<i64>();
                                                        let l406 = *base.add(24).cast::<i32>();
                                                        let l407 = *base.add(32).cast::<i64>();
                                                        let l408 =
                                                            i32::from(*base.add(40).cast::<u8>());

                                                        FailedUpdateParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l405 as u64,
                                nanoseconds: l406 as u32,
                              },
                              target_version: l407 as u64,
                              details: match l408 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l409 = *base.add(44).cast::<*mut u8>();
                                    let l410 = *base.add(48).cast::<usize>();
                                    let len411 = l410;
                                    let bytes411 = _rt::Vec::from_raw_parts(l409.cast(), len411, len411);

                                    _rt::string_lift(bytes411)
                                  };
                                  Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                              },
                            }
                                                    };
                                                    OplogEntry::FailedUpdate(e527)
                                                }
                                                19 => {
                                                    let e527 = {
                                                        let l412 = *base.add(16).cast::<i64>();
                                                        let l413 = *base.add(24).cast::<i32>();
                                                        let l414 = *base.add(32).cast::<i64>();

                                                        GrowMemoryParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l412 as u64,
                                nanoseconds: l413 as u32,
                              },
                              delta: l414 as u64,
                            }
                                                    };
                                                    OplogEntry::GrowMemory(e527)
                                                }
                                                20 => {
                                                    let e527 = {
                                                        let l415 = *base.add(16).cast::<i64>();
                                                        let l416 = *base.add(24).cast::<i32>();
                                                        let l417 = *base.add(32).cast::<i64>();

                                                        CreateResourceParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l415 as u64,
                                nanoseconds: l416 as u32,
                              },
                              resource_id: l417 as u64,
                            }
                                                    };
                                                    OplogEntry::CreateResource(e527)
                                                }
                                                21 => {
                                                    let e527 = {
                                                        let l418 = *base.add(16).cast::<i64>();
                                                        let l419 = *base.add(24).cast::<i32>();
                                                        let l420 = *base.add(32).cast::<i64>();

                                                        DropResourceParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l418 as u64,
                                nanoseconds: l419 as u32,
                              },
                              resource_id: l420 as u64,
                            }
                                                    };
                                                    OplogEntry::DropResource(e527)
                                                }
                                                22 => {
                                                    let e527 = {
                                                        let l421 = *base.add(16).cast::<i64>();
                                                        let l422 = *base.add(24).cast::<i32>();
                                                        let l423 = *base.add(32).cast::<i64>();
                                                        let l424 = *base.add(40).cast::<*mut u8>();
                                                        let l425 = *base.add(44).cast::<usize>();
                                                        let len426 = l425;
                                                        let bytes426 = _rt::Vec::from_raw_parts(
                                                            l424.cast(),
                                                            len426,
                                                            len426,
                                                        );
                                                        let l427 = *base.add(48).cast::<*mut u8>();
                                                        let l428 = *base.add(52).cast::<usize>();
                                                        let base477 = l427;
                                                        let len477 = l428;
                                                        let mut result477 =
                                                            _rt::Vec::with_capacity(len477);
                                                        for i in 0..len477 {
                                                            let base = base477.add(i * 8);
                                                            let e477 = {
                                                                let l429 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l430 =
                                                                    *base.add(4).cast::<usize>();
                                                                let base476 = l429;
                                                                let len476 = l430;
                                                                let mut result476 =
                                                                    _rt::Vec::with_capacity(len476);
                                                                for i in 0..len476 {
                                                                    let base = base476.add(i * 24);
                                                                    let e476 = {
                                                                        let l431 = i32::from(
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        use super::super::super::golem::rpc::types::WitNode as V475;
                                                                        let v475 = match l431 {
                                                                            0 => {
                                                                                let e475 = {
                                                                                    let l432 = *base.add(8).cast::<*mut u8>();
                                                                                    let l433 = *base.add(12).cast::<usize>();
                                                                                    let len434 =
                                                                                        l433;

                                                                                    _rt::Vec::from_raw_parts(l432.cast(), len434, len434)
                                                                                };
                                                                                V475::RecordValue(
                                                                                    e475,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e475 = {
                                                                                    let l435 = *base.add(8).cast::<i32>();
                                                                                    let l436 = i32::from(*base.add(12).cast::<u8>());

                                                                                    (l435 as u32, match l436 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l437 = *base.add(16).cast::<i32>();

                                                l437
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          })
                                                                                };
                                                                                V475::VariantValue(
                                                                                    e475,
                                                                                )
                                                                            }
                                                                            2 => {
                                                                                let e475 = {
                                                                                    let l438 = *base.add(8).cast::<i32>();

                                                                                    l438 as u32
                                                                                };
                                                                                V475::EnumValue(
                                                                                    e475,
                                                                                )
                                                                            }
                                                                            3 => {
                                                                                let e475 = {
                                                                                    let l439 = *base.add(8).cast::<*mut u8>();
                                                                                    let l440 = *base.add(12).cast::<usize>();
                                                                                    let base442 =
                                                                                        l439;
                                                                                    let len442 =
                                                                                        l440;
                                                                                    let mut result442 = _rt::Vec::with_capacity(len442);
                                                                                    for i in
                                                                                        0..len442
                                                                                    {
                                                                                        let base = base442.add(i * 1);
                                                                                        let e442 = {
                                                                                            let l441 = i32::from(*base.add(0).cast::<u8>());

                                                                                            _rt::bool_lift(l441 as u8)
                                                                                        };
                                                                                        result442
                                                                                            .push(
                                                                                            e442,
                                                                                        );
                                                                                    }
                                                                                    _rt::cabi_dealloc(base442, len442 * 1, 1);

                                                                                    result442
                                                                                };
                                                                                V475::FlagsValue(
                                                                                    e475,
                                                                                )
                                                                            }
                                                                            4 => {
                                                                                let e475 = {
                                                                                    let l443 = *base.add(8).cast::<*mut u8>();
                                                                                    let l444 = *base.add(12).cast::<usize>();
                                                                                    let len445 =
                                                                                        l444;

                                                                                    _rt::Vec::from_raw_parts(l443.cast(), len445, len445)
                                                                                };
                                                                                V475::TupleValue(
                                                                                    e475,
                                                                                )
                                                                            }
                                                                            5 => {
                                                                                let e475 = {
                                                                                    let l446 = *base.add(8).cast::<*mut u8>();
                                                                                    let l447 = *base.add(12).cast::<usize>();
                                                                                    let len448 =
                                                                                        l447;

                                                                                    _rt::Vec::from_raw_parts(l446.cast(), len448, len448)
                                                                                };
                                                                                V475::ListValue(
                                                                                    e475,
                                                                                )
                                                                            }
                                                                            6 => {
                                                                                let e475 = {
                                                                                    let l449 = i32::from(*base.add(8).cast::<u8>());

                                                                                    match l449 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l450 = *base.add(12).cast::<i32>();

                                                l450
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }
                                                                                };
                                                                                V475::OptionValue(
                                                                                    e475,
                                                                                )
                                                                            }
                                                                            7 => {
                                                                                let e475 = {
                                                                                    let l451 = i32::from(*base.add(8).cast::<u8>());

                                                                                    match l451 {
                                            0 => {
                                              let e = {
                                                let l452 = i32::from(*base.add(12).cast::<u8>());

                                                match l452 {
                                                  0 => None,
                                                  1 => {
                                                    let e = {
                                                      let l453 = *base.add(16).cast::<i32>();

                                                      l453
                                                    };
                                                    Some(e)
                                                  }
                                                  _ => _rt::invalid_enum_discriminant(),
                                                }
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l454 = i32::from(*base.add(12).cast::<u8>());

                                                match l454 {
                                                  0 => None,
                                                  1 => {
                                                    let e = {
                                                      let l455 = *base.add(16).cast::<i32>();

                                                      l455
                                                    };
                                                    Some(e)
                                                  }
                                                  _ => _rt::invalid_enum_discriminant(),
                                                }
                                              };
                                              Err(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }
                                                                                };
                                                                                V475::ResultValue(
                                                                                    e475,
                                                                                )
                                                                            }
                                                                            8 => {
                                                                                let e475 = {
                                                                                    let l456 = i32::from(*base.add(8).cast::<u8>());

                                                                                    l456 as u8
                                                                                };
                                                                                V475::PrimU8(e475)
                                                                            }
                                                                            9 => {
                                                                                let e475 = {
                                                                                    let l457 = i32::from(*base.add(8).cast::<u16>());

                                                                                    l457 as u16
                                                                                };
                                                                                V475::PrimU16(e475)
                                                                            }
                                                                            10 => {
                                                                                let e475 = {
                                                                                    let l458 = *base.add(8).cast::<i32>();

                                                                                    l458 as u32
                                                                                };
                                                                                V475::PrimU32(e475)
                                                                            }
                                                                            11 => {
                                                                                let e475 = {
                                                                                    let l459 = *base.add(8).cast::<i64>();

                                                                                    l459 as u64
                                                                                };
                                                                                V475::PrimU64(e475)
                                                                            }
                                                                            12 => {
                                                                                let e475 = {
                                                                                    let l460 = i32::from(*base.add(8).cast::<i8>());

                                                                                    l460 as i8
                                                                                };
                                                                                V475::PrimS8(e475)
                                                                            }
                                                                            13 => {
                                                                                let e475 = {
                                                                                    let l461 = i32::from(*base.add(8).cast::<i16>());

                                                                                    l461 as i16
                                                                                };
                                                                                V475::PrimS16(e475)
                                                                            }
                                                                            14 => {
                                                                                let e475 = {
                                                                                    let l462 = *base.add(8).cast::<i32>();

                                                                                    l462
                                                                                };
                                                                                V475::PrimS32(e475)
                                                                            }
                                                                            15 => {
                                                                                let e475 = {
                                                                                    let l463 = *base.add(8).cast::<i64>();

                                                                                    l463
                                                                                };
                                                                                V475::PrimS64(e475)
                                                                            }
                                                                            16 => {
                                                                                let e475 = {
                                                                                    let l464 = *base.add(8).cast::<f32>();

                                                                                    l464
                                                                                };
                                                                                V475::PrimFloat32(
                                                                                    e475,
                                                                                )
                                                                            }
                                                                            17 => {
                                                                                let e475 = {
                                                                                    let l465 = *base.add(8).cast::<f64>();

                                                                                    l465
                                                                                };
                                                                                V475::PrimFloat64(
                                                                                    e475,
                                                                                )
                                                                            }
                                                                            18 => {
                                                                                let e475 = {
                                                                                    let l466 = *base.add(8).cast::<i32>();

                                                                                    _rt::char_lift(
                                                                                        l466 as u32,
                                                                                    )
                                                                                };
                                                                                V475::PrimChar(e475)
                                                                            }
                                                                            19 => {
                                                                                let e475 = {
                                                                                    let l467 = i32::from(*base.add(8).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l467 as u8,
                                                                                    )
                                                                                };
                                                                                V475::PrimBool(e475)
                                                                            }
                                                                            20 => {
                                                                                let e475 = {
                                                                                    let l468 = *base.add(8).cast::<*mut u8>();
                                                                                    let l469 = *base.add(12).cast::<usize>();
                                                                                    let len470 =
                                                                                        l469;
                                                                                    let bytes470 = _rt::Vec::from_raw_parts(l468.cast(), len470, len470);

                                                                                    _rt::string_lift(
                                                                                        bytes470,
                                                                                    )
                                                                                };
                                                                                V475::PrimString(
                                                                                    e475,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e475 = {
                                                                                    let l471 = *base.add(8).cast::<*mut u8>();
                                                                                    let l472 = *base.add(12).cast::<usize>();
                                                                                    let len473 =
                                                                                        l472;
                                                                                    let bytes473 = _rt::Vec::from_raw_parts(l471.cast(), len473, len473);
                                                                                    let l474 = *base.add(16).cast::<i64>();

                                                                                    (super::super::super::golem::rpc::types::Uri{
                                            value: _rt::string_lift(bytes473),
                                          }, l474 as u64)
                                                                                };
                                                                                V475::Handle(e475)
                                                                            }
                                                                        };

                                                                        v475
                                                                    };
                                                                    result476.push(e476);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base476,
                                                                    len476 * 24,
                                                                    8,
                                                                );

                                                                super::super::super::golem::rpc::types::WitValue{
                                  nodes: result476,
                                }
                                                            };
                                                            result477.push(e477);
                                                        }
                                                        _rt::cabi_dealloc(base477, len477 * 8, 4);

                                                        DescribeResourceParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l421 as u64,
                                nanoseconds: l422 as u32,
                              },
                              resource_id: l423 as u64,
                              resource_name: _rt::string_lift(bytes426),
                              resource_params: result477,
                            }
                                                    };
                                                    OplogEntry::DescribeResource(e527)
                                                }
                                                23 => {
                                                    let e527 = {
                                                        let l478 = *base.add(16).cast::<i64>();
                                                        let l479 = *base.add(24).cast::<i32>();
                                                        let l480 =
                                                            i32::from(*base.add(32).cast::<u8>());
                                                        let l481 = *base.add(36).cast::<*mut u8>();
                                                        let l482 = *base.add(40).cast::<usize>();
                                                        let len483 = l482;
                                                        let bytes483 = _rt::Vec::from_raw_parts(
                                                            l481.cast(),
                                                            len483,
                                                            len483,
                                                        );
                                                        let l484 = *base.add(44).cast::<*mut u8>();
                                                        let l485 = *base.add(48).cast::<usize>();
                                                        let len486 = l485;
                                                        let bytes486 = _rt::Vec::from_raw_parts(
                                                            l484.cast(),
                                                            len486,
                                                            len486,
                                                        );

                                                        LogParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l478 as u64,
                                nanoseconds: l479 as u32,
                              },
                              level: LogLevel::_lift(l480 as u8),
                              context: _rt::string_lift(bytes483),
                              message: _rt::string_lift(bytes486),
                            }
                                                    };
                                                    OplogEntry::Log(e527)
                                                }
                                                24 => {
                                                    let e527 = {
                                                        let l487 = *base.add(16).cast::<i64>();
                                                        let l488 = *base.add(24).cast::<i32>();

                                                        super::super::super::wasi::clocks::wall_clock::Datetime{
                              seconds: l487 as u64,
                              nanoseconds: l488 as u32,
                            }
                                                    };
                                                    OplogEntry::Restart(e527)
                                                }
                                                25 => {
                                                    let e527 = {
                                                        let l489 = *base.add(16).cast::<i64>();
                                                        let l490 = *base.add(24).cast::<i32>();
                                                        let l491 = *base.add(32).cast::<i64>();
                                                        let l492 = *base.add(40).cast::<i64>();
                                                        let l493 = *base.add(48).cast::<*mut u8>();
                                                        let l494 = *base.add(52).cast::<usize>();
                                                        let len495 = l494;
                                                        let bytes495 = _rt::Vec::from_raw_parts(
                                                            l493.cast(),
                                                            len495,
                                                            len495,
                                                        );
                                                        let l496 = *base.add(56).cast::<*mut u8>();
                                                        let l497 = *base.add(60).cast::<usize>();
                                                        let len498 = l497;
                                                        let bytes498 = _rt::Vec::from_raw_parts(
                                                            l496.cast(),
                                                            len498,
                                                            len498,
                                                        );
                                                        let l499 = *base.add(64).cast::<*mut u8>();
                                                        let l500 = *base.add(68).cast::<usize>();
                                                        let base507 = l499;
                                                        let len507 = l500;
                                                        let mut result507 =
                                                            _rt::Vec::with_capacity(len507);
                                                        for i in 0..len507 {
                                                            let base = base507.add(i * 16);
                                                            let e507 = {
                                                                let l501 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l502 =
                                                                    *base.add(4).cast::<usize>();
                                                                let len503 = l502;
                                                                let bytes503 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l501.cast(),
                                                                        len503,
                                                                        len503,
                                                                    );
                                                                let l504 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l505 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len506 = l505;
                                                                let bytes506 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l504.cast(),
                                                                        len506,
                                                                        len506,
                                                                    );

                                                                (
                                                                    _rt::string_lift(bytes503),
                                                                    _rt::string_lift(bytes506),
                                                                )
                                                            };
                                                            result507.push(e507);
                                                        }
                                                        _rt::cabi_dealloc(base507, len507 * 16, 4);

                                                        ActivatePluginParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l489 as u64,
                                nanoseconds: l490 as u32,
                              },
                              plugin: PluginInstallationDescription{
                                installation_id: super::super::super::golem::api::host::Uuid{
                                  high_bits: l491 as u64,
                                  low_bits: l492 as u64,
                                },
                                name: _rt::string_lift(bytes495),
                                version: _rt::string_lift(bytes498),
                                parameters: result507,
                              },
                            }
                                                    };
                                                    OplogEntry::ActivatePlugin(e527)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 26,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e527 = {
                                                        let l508 = *base.add(16).cast::<i64>();
                                                        let l509 = *base.add(24).cast::<i32>();
                                                        let l510 = *base.add(32).cast::<i64>();
                                                        let l511 = *base.add(40).cast::<i64>();
                                                        let l512 = *base.add(48).cast::<*mut u8>();
                                                        let l513 = *base.add(52).cast::<usize>();
                                                        let len514 = l513;
                                                        let bytes514 = _rt::Vec::from_raw_parts(
                                                            l512.cast(),
                                                            len514,
                                                            len514,
                                                        );
                                                        let l515 = *base.add(56).cast::<*mut u8>();
                                                        let l516 = *base.add(60).cast::<usize>();
                                                        let len517 = l516;
                                                        let bytes517 = _rt::Vec::from_raw_parts(
                                                            l515.cast(),
                                                            len517,
                                                            len517,
                                                        );
                                                        let l518 = *base.add(64).cast::<*mut u8>();
                                                        let l519 = *base.add(68).cast::<usize>();
                                                        let base526 = l518;
                                                        let len526 = l519;
                                                        let mut result526 =
                                                            _rt::Vec::with_capacity(len526);
                                                        for i in 0..len526 {
                                                            let base = base526.add(i * 16);
                                                            let e526 = {
                                                                let l520 =
                                                                    *base.add(0).cast::<*mut u8>();
                                                                let l521 =
                                                                    *base.add(4).cast::<usize>();
                                                                let len522 = l521;
                                                                let bytes522 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l520.cast(),
                                                                        len522,
                                                                        len522,
                                                                    );
                                                                let l523 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l524 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len525 = l524;
                                                                let bytes525 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l523.cast(),
                                                                        len525,
                                                                        len525,
                                                                    );

                                                                (
                                                                    _rt::string_lift(bytes522),
                                                                    _rt::string_lift(bytes525),
                                                                )
                                                            };
                                                            result526.push(e526);
                                                        }
                                                        _rt::cabi_dealloc(base526, len526 * 16, 4);

                                                        DeactivatePluginParameters{
                              timestamp: super::super::super::wasi::clocks::wall_clock::Datetime{
                                seconds: l508 as u64,
                                nanoseconds: l509 as u32,
                              },
                              plugin: PluginInstallationDescription{
                                installation_id: super::super::super::golem::api::host::Uuid{
                                  high_bits: l510 as u64,
                                  low_bits: l511 as u64,
                                },
                                name: _rt::string_lift(bytes514),
                                version: _rt::string_lift(bytes517),
                                parameters: result526,
                              },
                            }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e527)
                                                }
                                            };

                                            (l4 as u64, v527)
                                        };
                                        result528.push(e528);
                                    }
                                    _rt::cabi_dealloc(base528, len528 * 144, 8);

                                    result528
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod rpc {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub type NodeIndex = i32;
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            #[derive(Clone)]
            pub enum WitNode {
                RecordValue(_rt::Vec<NodeIndex>),
                VariantValue((u32, Option<NodeIndex>)),
                EnumValue(u32),
                FlagsValue(_rt::Vec<bool>),
                TupleValue(_rt::Vec<NodeIndex>),
                ListValue(_rt::Vec<NodeIndex>),
                OptionValue(Option<NodeIndex>),
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                PrimU8(u8),
                PrimU16(u16),
                PrimU32(u32),
                PrimU64(u64),
                PrimS8(i8),
                PrimS16(i16),
                PrimS32(i32),
                PrimS64(i64),
                PrimFloat32(f32),
                PrimFloat64(f64),
                PrimChar(char),
                PrimBool(bool),
                PrimString(_rt::String),
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => f.debug_tuple("WitNode::PrimU8").field(e).finish(),
                        WitNode::PrimU16(e) => f.debug_tuple("WitNode::PrimU16").field(e).finish(),
                        WitNode::PrimU32(e) => f.debug_tuple("WitNode::PrimU32").field(e).finish(),
                        WitNode::PrimU64(e) => f.debug_tuple("WitNode::PrimU64").field(e).finish(),
                        WitNode::PrimS8(e) => f.debug_tuple("WitNode::PrimS8").field(e).finish(),
                        WitNode::PrimS16(e) => f.debug_tuple("WitNode::PrimS16").field(e).finish(),
                        WitNode::PrimS32(e) => f.debug_tuple("WitNode::PrimS32").field(e).finish(),
                        WitNode::PrimS64(e) => f.debug_tuple("WitNode::PrimS64").field(e).finish(),
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => f.debug_tuple("WitNode::Handle").field(e).finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitValue {
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WitValue")
                        .field("nodes", &self.nodes)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum RpcError {
                ProtocolError(_rt::String),
                Denied(_rt::String),
                NotFound(_rt::String),
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => f.debug_tuple("RpcError::Denied").field(e).finish(),
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => f
                            .debug_tuple("RpcError::RemoteInternalError")
                            .field(e)
                            .finish(),
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for RpcError {}

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }

            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }

            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &Uri) -> Self {
                    unsafe {
                        let Uri { value: value0 } = location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        WasmRpc::from_handle(ret as u32)
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = {
                                    let l15 = *ptr13.add(4).cast::<*mut u8>();
                                    let l16 = *ptr13.add(8).cast::<usize>();
                                    let base62 = l15;
                                    let len62 = l16;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62.add(i * 24);
                                        let e62 = {
                                            let l17 = i32::from(*base.add(0).cast::<u8>());
                                            let v61 = match l17 {
                                                0 => {
                                                    let e61 = {
                                                        let l18 = *base.add(8).cast::<*mut u8>();
                                                        let l19 = *base.add(12).cast::<usize>();
                                                        let len20 = l19;

                                                        _rt::Vec::from_raw_parts(
                                                            l18.cast(),
                                                            len20,
                                                            len20,
                                                        )
                                                    };
                                                    WitNode::RecordValue(e61)
                                                }
                                                1 => {
                                                    let e61 =
                                                        {
                                                            let l21 = *base.add(8).cast::<i32>();
                                                            let l22 = i32::from(
                                                                *base.add(12).cast::<u8>(),
                                                            );

                                                            (l21 as u32, match l22 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l23 = *base.add(16).cast::<i32>();

                                            l23
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                        };
                                                    WitNode::VariantValue(e61)
                                                }
                                                2 => {
                                                    let e61 = {
                                                        let l24 = *base.add(8).cast::<i32>();

                                                        l24 as u32
                                                    };
                                                    WitNode::EnumValue(e61)
                                                }
                                                3 => {
                                                    let e61 = {
                                                        let l25 = *base.add(8).cast::<*mut u8>();
                                                        let l26 = *base.add(12).cast::<usize>();
                                                        let base28 = l25;
                                                        let len28 = l26;
                                                        let mut result28 =
                                                            _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28.add(i * 1);
                                                            let e28 = {
                                                                let l27 = i32::from(
                                                                    *base.add(0).cast::<u8>(),
                                                                );

                                                                _rt::bool_lift(l27 as u8)
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(base28, len28 * 1, 1);

                                                        result28
                                                    };
                                                    WitNode::FlagsValue(e61)
                                                }
                                                4 => {
                                                    let e61 = {
                                                        let l29 = *base.add(8).cast::<*mut u8>();
                                                        let l30 = *base.add(12).cast::<usize>();
                                                        let len31 = l30;

                                                        _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        )
                                                    };
                                                    WitNode::TupleValue(e61)
                                                }
                                                5 => {
                                                    let e61 = {
                                                        let l32 = *base.add(8).cast::<*mut u8>();
                                                        let l33 = *base.add(12).cast::<usize>();
                                                        let len34 = l33;

                                                        _rt::Vec::from_raw_parts(
                                                            l32.cast(),
                                                            len34,
                                                            len34,
                                                        )
                                                    };
                                                    WitNode::ListValue(e61)
                                                }
                                                6 => {
                                                    let e61 = {
                                                        let l35 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        match l35 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l36 =
                                                                        *base.add(12).cast::<i32>();

                                                                    l36
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e61)
                                                }
                                                7 => {
                                                    let e61 = {
                                                        let l37 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        match l37 {
                                                            0 => {
                                                                let e = {
                                                                    let l38 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    match l38 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l39 = *base.add(16).cast::<i32>();

                                                  l39
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l40 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    match l40 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l41 = *base.add(16).cast::<i32>();

                                                  l41
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e61)
                                                }
                                                8 => {
                                                    let e61 = {
                                                        let l42 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        l42 as u8
                                                    };
                                                    WitNode::PrimU8(e61)
                                                }
                                                9 => {
                                                    let e61 = {
                                                        let l43 =
                                                            i32::from(*base.add(8).cast::<u16>());

                                                        l43 as u16
                                                    };
                                                    WitNode::PrimU16(e61)
                                                }
                                                10 => {
                                                    let e61 = {
                                                        let l44 = *base.add(8).cast::<i32>();

                                                        l44 as u32
                                                    };
                                                    WitNode::PrimU32(e61)
                                                }
                                                11 => {
                                                    let e61 = {
                                                        let l45 = *base.add(8).cast::<i64>();

                                                        l45 as u64
                                                    };
                                                    WitNode::PrimU64(e61)
                                                }
                                                12 => {
                                                    let e61 = {
                                                        let l46 =
                                                            i32::from(*base.add(8).cast::<i8>());

                                                        l46 as i8
                                                    };
                                                    WitNode::PrimS8(e61)
                                                }
                                                13 => {
                                                    let e61 = {
                                                        let l47 =
                                                            i32::from(*base.add(8).cast::<i16>());

                                                        l47 as i16
                                                    };
                                                    WitNode::PrimS16(e61)
                                                }
                                                14 => {
                                                    let e61 = {
                                                        let l48 = *base.add(8).cast::<i32>();

                                                        l48
                                                    };
                                                    WitNode::PrimS32(e61)
                                                }
                                                15 => {
                                                    let e61 = {
                                                        let l49 = *base.add(8).cast::<i64>();

                                                        l49
                                                    };
                                                    WitNode::PrimS64(e61)
                                                }
                                                16 => {
                                                    let e61 = {
                                                        let l50 = *base.add(8).cast::<f32>();

                                                        l50
                                                    };
                                                    WitNode::PrimFloat32(e61)
                                                }
                                                17 => {
                                                    let e61 = {
                                                        let l51 = *base.add(8).cast::<f64>();

                                                        l51
                                                    };
                                                    WitNode::PrimFloat64(e61)
                                                }
                                                18 => {
                                                    let e61 = {
                                                        let l52 = *base.add(8).cast::<i32>();

                                                        _rt::char_lift(l52 as u32)
                                                    };
                                                    WitNode::PrimChar(e61)
                                                }
                                                19 => {
                                                    let e61 = {
                                                        let l53 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        _rt::bool_lift(l53 as u8)
                                                    };
                                                    WitNode::PrimBool(e61)
                                                }
                                                20 => {
                                                    let e61 = {
                                                        let l54 = *base.add(8).cast::<*mut u8>();
                                                        let l55 = *base.add(12).cast::<usize>();
                                                        let len56 = l55;
                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                            l54.cast(),
                                                            len56,
                                                            len56,
                                                        );

                                                        _rt::string_lift(bytes56)
                                                    };
                                                    WitNode::PrimString(e61)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 21,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e61 = {
                                                        let l57 = *base.add(8).cast::<*mut u8>();
                                                        let l58 = *base.add(12).cast::<usize>();
                                                        let len59 = l58;
                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                            l57.cast(),
                                                            len59,
                                                            len59,
                                                        );
                                                        let l60 = *base.add(16).cast::<i64>();

                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes59),
                                                            },
                                                            l60 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e61)
                                                }
                                            };

                                            v61
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(base62, len62 * 24, 8);

                                    WitValue { nodes: result62 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l63 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v76 = match l63 {
                                        0 => {
                                            let e76 = {
                                                let l64 = *ptr13.add(8).cast::<*mut u8>();
                                                let l65 = *ptr13.add(12).cast::<usize>();
                                                let len66 = l65;
                                                let bytes66 = _rt::Vec::from_raw_parts(
                                                    l64.cast(),
                                                    len66,
                                                    len66,
                                                );

                                                _rt::string_lift(bytes66)
                                            };
                                            RpcError::ProtocolError(e76)
                                        }
                                        1 => {
                                            let e76 = {
                                                let l67 = *ptr13.add(8).cast::<*mut u8>();
                                                let l68 = *ptr13.add(12).cast::<usize>();
                                                let len69 = l68;
                                                let bytes69 = _rt::Vec::from_raw_parts(
                                                    l67.cast(),
                                                    len69,
                                                    len69,
                                                );

                                                _rt::string_lift(bytes69)
                                            };
                                            RpcError::Denied(e76)
                                        }
                                        2 => {
                                            let e76 = {
                                                let l70 = *ptr13.add(8).cast::<*mut u8>();
                                                let l71 = *ptr13.add(12).cast::<usize>();
                                                let len72 = l71;
                                                let bytes72 = _rt::Vec::from_raw_parts(
                                                    l70.cast(),
                                                    len72,
                                                    len72,
                                                );

                                                _rt::string_lift(bytes72)
                                            };
                                            RpcError::NotFound(e76)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e76 = {
                                                let l73 = *ptr13.add(8).cast::<*mut u8>();
                                                let l74 = *ptr13.add(12).cast::<usize>();
                                                let len75 = l74;
                                                let bytes75 = _rt::Vec::from_raw_parts(
                                                    l73.cast(),
                                                    len75,
                                                    len75,
                                                );

                                                _rt::string_lift(bytes75)
                                            };
                                            RpcError::RemoteInternalError(e76)
                                        }
                                    };

                                    v76
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l15 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v28 = match l15 {
                                        0 => {
                                            let e28 = {
                                                let l16 = *ptr13.add(8).cast::<*mut u8>();
                                                let l17 = *ptr13.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );

                                                _rt::string_lift(bytes18)
                                            };
                                            RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                            let e28 = {
                                                let l19 = *ptr13.add(8).cast::<*mut u8>();
                                                let l20 = *ptr13.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );

                                                _rt::string_lift(bytes21)
                                            };
                                            RpcError::Denied(e28)
                                        }
                                        2 => {
                                            let e28 = {
                                                let l22 = *ptr13.add(8).cast::<*mut u8>();
                                                let l23 = *ptr13.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                _rt::string_lift(bytes24)
                                            };
                                            RpcError::NotFound(e28)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e28 = {
                                                let l25 = *ptr13.add(8).cast::<*mut u8>();
                                                let l26 = *ptr13.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            RpcError::RemoteInternalError(e28)
                                        }
                                    };

                                    v28
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                        );
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        FutureInvokeResult::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base50 = l3;
                                                let len50 = l4;
                                                let mut result50 = _rt::Vec::with_capacity(len50);
                                                for i in 0..len50 {
                                                    let base = base50.add(i * 24);
                                                    let e50 = {
                                                        let l5 =
                                                            i32::from(*base.add(0).cast::<u8>());
                                                        let v49 = match l5 {
                                                            0 => {
                                                                let e49 = {
                                                                    let l6 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l7 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len8 = l7;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l6.cast(),
                                                                        len8,
                                                                        len8,
                                                                    )
                                                                };
                                                                WitNode::RecordValue(e49)
                                                            }
                                                            1 => {
                                                                let e49 = {
                                                                    let l9 =
                                                                        *base.add(8).cast::<i32>();
                                                                    let l10 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    (l9 as u32, match l10 {
                                                                  0 => None,
                                                                  1 => {
                                                                    let e = {
                                                                      let l11 = *base.add(16).cast::<i32>();

                                                                      l11
                                                                    };
                                                                    Some(e)
                                                                  }
                                                                  _ => _rt::invalid_enum_discriminant(),
                                                                })
                                                                };
                                                                WitNode::VariantValue(e49)
                                                            }
                                                            2 => {
                                                                let e49 = {
                                                                    let l12 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l12 as u32
                                                                };
                                                                WitNode::EnumValue(e49)
                                                            }
                                                            3 => {
                                                                let e49 = {
                                                                    let l13 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l14 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base16 = l13;
                                                                    let len16 = l14;
                                                                    let mut result16 =
                                                                        _rt::Vec::with_capacity(
                                                                            len16,
                                                                        );
                                                                    for i in 0..len16 {
                                                                        let base =
                                                                            base16.add(i * 1);
                                                                        let e16 = {
                                                                            let l15 = i32::from(
                                                                                *base
                                                                                    .add(0)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l15 as u8,
                                                                            )
                                                                        };
                                                                        result16.push(e16);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base16,
                                                                        len16 * 1,
                                                                        1,
                                                                    );

                                                                    result16
                                                                };
                                                                WitNode::FlagsValue(e49)
                                                            }
                                                            4 => {
                                                                let e49 = {
                                                                    let l17 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len19 = l18;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l17.cast(),
                                                                        len19,
                                                                        len19,
                                                                    )
                                                                };
                                                                WitNode::TupleValue(e49)
                                                            }
                                                            5 => {
                                                                let e49 = {
                                                                    let l20 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l21 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len22 = l21;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l20.cast(),
                                                                        len22,
                                                                        len22,
                                                                    )
                                                                };
                                                                WitNode::ListValue(e49)
                                                            }
                                                            6 => {
                                                                let e49 = {
                                                                    let l23 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    match l23 {
                                                                  0 => None,
                                                                  1 => {
                                                                    let e = {
                                                                      let l24 = *base.add(12).cast::<i32>();

                                                                      l24
                                                                    };
                                                                    Some(e)
                                                                  }
                                                                  _ => _rt::invalid_enum_discriminant(),
                                                                }
                                                                };
                                                                WitNode::OptionValue(e49)
                                                            }
                                                            7 => {
                                                                let e49 = {
                                                                    let l25 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    match l25 {
                                                                  0 => {
                                                                    let e = {
                                                                      let l26 = i32::from(*base.add(12).cast::<u8>());

                                                                      match l26 {
                                                                        0 => None,
                                                                        1 => {
                                                                          let e = {
                                                                            let l27 = *base.add(16).cast::<i32>();

                                                                            l27
                                                                          };
                                                                          Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                      }
                                                                    };
                                                                    Ok(e)
                                                                  }
                                                                  1 => {
                                                                    let e = {
                                                                      let l28 = i32::from(*base.add(12).cast::<u8>());

                                                                      match l28 {
                                                                        0 => None,
                                                                        1 => {
                                                                          let e = {
                                                                            let l29 = *base.add(16).cast::<i32>();

                                                                            l29
                                                                          };
                                                                          Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                      }
                                                                    };
                                                                    Err(e)
                                                                  }
                                                                  _ => _rt::invalid_enum_discriminant(),
                                                                }
                                                                };
                                                                WitNode::ResultValue(e49)
                                                            }
                                                            8 => {
                                                                let e49 = {
                                                                    let l30 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    l30 as u8
                                                                };
                                                                WitNode::PrimU8(e49)
                                                            }
                                                            9 => {
                                                                let e49 = {
                                                                    let l31 = i32::from(
                                                                        *base.add(8).cast::<u16>(),
                                                                    );

                                                                    l31 as u16
                                                                };
                                                                WitNode::PrimU16(e49)
                                                            }
                                                            10 => {
                                                                let e49 = {
                                                                    let l32 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l32 as u32
                                                                };
                                                                WitNode::PrimU32(e49)
                                                            }
                                                            11 => {
                                                                let e49 = {
                                                                    let l33 =
                                                                        *base.add(8).cast::<i64>();

                                                                    l33 as u64
                                                                };
                                                                WitNode::PrimU64(e49)
                                                            }
                                                            12 => {
                                                                let e49 = {
                                                                    let l34 = i32::from(
                                                                        *base.add(8).cast::<i8>(),
                                                                    );

                                                                    l34 as i8
                                                                };
                                                                WitNode::PrimS8(e49)
                                                            }
                                                            13 => {
                                                                let e49 = {
                                                                    let l35 = i32::from(
                                                                        *base.add(8).cast::<i16>(),
                                                                    );

                                                                    l35 as i16
                                                                };
                                                                WitNode::PrimS16(e49)
                                                            }
                                                            14 => {
                                                                let e49 = {
                                                                    let l36 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l36
                                                                };
                                                                WitNode::PrimS32(e49)
                                                            }
                                                            15 => {
                                                                let e49 = {
                                                                    let l37 =
                                                                        *base.add(8).cast::<i64>();

                                                                    l37
                                                                };
                                                                WitNode::PrimS64(e49)
                                                            }
                                                            16 => {
                                                                let e49 = {
                                                                    let l38 =
                                                                        *base.add(8).cast::<f32>();

                                                                    l38
                                                                };
                                                                WitNode::PrimFloat32(e49)
                                                            }
                                                            17 => {
                                                                let e49 = {
                                                                    let l39 =
                                                                        *base.add(8).cast::<f64>();

                                                                    l39
                                                                };
                                                                WitNode::PrimFloat64(e49)
                                                            }
                                                            18 => {
                                                                let e49 = {
                                                                    let l40 =
                                                                        *base.add(8).cast::<i32>();

                                                                    _rt::char_lift(l40 as u32)
                                                                };
                                                                WitNode::PrimChar(e49)
                                                            }
                                                            19 => {
                                                                let e49 = {
                                                                    let l41 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                WitNode::PrimBool(e49)
                                                            }
                                                            20 => {
                                                                let e49 = {
                                                                    let l42 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l43 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len44 = l43;
                                                                    let bytes44 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l42.cast(),
                                                                            len44,
                                                                            len44,
                                                                        );

                                                                    _rt::string_lift(bytes44)
                                                                };
                                                                WitNode::PrimString(e49)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 21,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e49 = {
                                                                    let l45 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l46 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len47 = l46;
                                                                    let bytes47 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l45.cast(),
                                                                            len47,
                                                                            len47,
                                                                        );
                                                                    let l48 =
                                                                        *base.add(16).cast::<i64>();

                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(
                                                                                bytes47,
                                                                            ),
                                                                        },
                                                                        l48 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e49)
                                                            }
                                                        };

                                                        v49
                                                    };
                                                    result50.push(e50);
                                                }
                                                _rt::cabi_dealloc(base50, len50 * 24, 8);

                                                WitValue { nodes: result50 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l51 = i32::from(*ptr0.add(8).cast::<u8>());
                                                let v64 = match l51 {
                                                    0 => {
                                                        let e64 = {
                                                            let l52 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l53 = *ptr0.add(16).cast::<usize>();
                                                            let len54 = l53;
                                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                                l52.cast(),
                                                                len54,
                                                                len54,
                                                            );

                                                            _rt::string_lift(bytes54)
                                                        };
                                                        RpcError::ProtocolError(e64)
                                                    }
                                                    1 => {
                                                        let e64 = {
                                                            let l55 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l56 = *ptr0.add(16).cast::<usize>();
                                                            let len57 = l56;
                                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                                l55.cast(),
                                                                len57,
                                                                len57,
                                                            );

                                                            _rt::string_lift(bytes57)
                                                        };
                                                        RpcError::Denied(e64)
                                                    }
                                                    2 => {
                                                        let e64 = {
                                                            let l58 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l59 = *ptr0.add(16).cast::<usize>();
                                                            let len60 = l59;
                                                            let bytes60 = _rt::Vec::from_raw_parts(
                                                                l58.cast(),
                                                                len60,
                                                                len60,
                                                            );

                                                            _rt::string_lift(bytes60)
                                                        };
                                                        RpcError::NotFound(e64)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 3,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e64 = {
                                                            let l61 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l62 = *ptr0.add(16).cast::<usize>();
                                                            let len63 = l62;
                                                            let bytes63 = _rt::Vec::from_raw_parts(
                                                                l61.cast(),
                                                                len63,
                                                                len63,
                                                            );

                                                            _rt::string_lift(bytes63)
                                                        };
                                                        RpcError::RemoteInternalError(e64)
                                                    }
                                                };

                                                v64
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod blobstore {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type InputStream = super::super::super::wasi::io::streams::InputStream;
            pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
            /// name of a container, a collection of objects.
            /// The container name may be any valid UTF-8 string.
            pub type ContainerName = _rt::String;
            /// name of an object within a container
            /// The object name may be any valid UTF-8 string.
            pub type ObjectName = _rt::String;
            /// TODO: define timestamp to include seconds since
            /// Unix epoch and nanoseconds
            /// https://github.com/WebAssembly/wasi-blob-store/issues/7
            pub type Timestamp = u64;
            /// size of an object, in bytes
            pub type ObjectSize = u64;
            pub type Error = _rt::String;
            /// information about a container
            #[derive(Clone)]
            pub struct ContainerMetadata {
                /// the container's name
                pub name: ContainerName,
                /// date and time container was created
                pub created_at: Timestamp,
            }
            impl ::core::fmt::Debug for ContainerMetadata {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ContainerMetadata")
                        .field("name", &self.name)
                        .field("created-at", &self.created_at)
                        .finish()
                }
            }
            /// information about an object
            #[derive(Clone)]
            pub struct ObjectMetadata {
                /// the object's name
                pub name: ObjectName,
                /// the object's parent container
                pub container: ContainerName,
                /// date and time the object was created
                pub created_at: Timestamp,
                /// size of the object, in bytes
                pub size: ObjectSize,
            }
            impl ::core::fmt::Debug for ObjectMetadata {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ObjectMetadata")
                        .field("name", &self.name)
                        .field("container", &self.container)
                        .field("created-at", &self.created_at)
                        .field("size", &self.size)
                        .finish()
                }
            }
            /// identifier for an object that includes its container name
            #[derive(Clone)]
            pub struct ObjectId {
                pub container: ContainerName,
                pub object: ObjectName,
            }
            impl ::core::fmt::Debug for ObjectId {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ObjectId")
                        .field("container", &self.container)
                        .field("object", &self.object)
                        .finish()
                }
            }
            /// A data is the data stored in a data blob. The value can be of any type
            /// that can be represented in a byte array. It provides a way to write the value
            /// to the output-stream defined in the `wasi-io` interface.
            /// Soon: switch to `resource value { ... }`

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct OutgoingValue {
                handle: _rt::Resource<OutgoingValue>,
            }

            impl OutgoingValue {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for OutgoingValue {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:blobstore/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]outgoing-value"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// A incoming-value is a wrapper around a value. It provides a way to read the value
            /// from the input-stream defined in the `wasi-io` interface.
            ///
            /// The incoming-value provides two ways to consume the value:
            /// 1. `incoming-value-consume-sync` consumes the value synchronously and returns the
            /// value as a list of bytes.
            /// 2. `incoming-value-consume-async` consumes the value asynchronously and returns the
            /// value as an input-stream.
            /// Soon: switch to `resource incoming-value { ... }`

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct IncomingValue {
                handle: _rt::Resource<IncomingValue>,
            }

            impl IncomingValue {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for IncomingValue {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:blobstore/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]incoming-value"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            pub type IncomingValueAsyncBody = InputStream;
            pub type IncomingValueSyncBody = _rt::Vec<u8>;
            impl OutgoingValue {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new_outgoing_value() -> OutgoingValue {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/types")]
                        extern "C" {
                            #[link_name = "[static]outgoing-value.new-outgoing-value"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        OutgoingValue::from_handle(ret as u32)
                    }
                }
            }
            impl OutgoingValue {
                #[allow(unused_unsafe, clippy::all)]
                pub fn outgoing_value_write_body(&self) -> Result<OutputStream, ()> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/types")]
                        extern "C" {
                            #[link_name = "[method]outgoing-value.outgoing-value-write-body"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::io::streams::OutputStream::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl IncomingValue {
                #[allow(unused_unsafe, clippy::all)]
                pub fn incoming_value_consume_sync(&self) -> Result<IncomingValueSyncBody, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/types")]
                        extern "C" {
                            #[link_name = "[method]incoming-value.incoming-value-consume-sync"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;

                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = *ptr0.add(4).cast::<*mut u8>();
                                    let l6 = *ptr0.add(8).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                    _rt::string_lift(bytes7)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl IncomingValue {
                #[allow(unused_unsafe, clippy::all)]
                pub fn incoming_value_consume_async(
                    &self,
                ) -> Result<IncomingValueAsyncBody, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/types")]
                        extern "C" {
                            #[link_name = "[method]incoming-value.incoming-value-consume-async"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::io::streams::InputStream::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<*mut u8>();
                                    let l4 = *ptr0.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl IncomingValue {
                #[allow(unused_unsafe, clippy::all)]
                pub fn size(&self) -> u64 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/types")]
                        extern "C" {
                            #[link_name = "[method]incoming-value.size"]
                            fn wit_import(_: i32) -> i64;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u64
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod container {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ContainerMetadata =
                super::super::super::wasi::blobstore::types::ContainerMetadata;
            pub type Error = super::super::super::wasi::blobstore::types::Error;
            pub type IncomingValue = super::super::super::wasi::blobstore::types::IncomingValue;
            pub type ObjectMetadata = super::super::super::wasi::blobstore::types::ObjectMetadata;
            pub type ObjectName = super::super::super::wasi::blobstore::types::ObjectName;
            pub type OutgoingValue = super::super::super::wasi::blobstore::types::OutgoingValue;
            /// this defines the `container` resource

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Container {
                handle: _rt::Resource<Container>,
            }

            impl Container {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Container {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[resource-drop]container"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// this defines the `stream-object-names` resource which is a representation of stream<object-name>

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct StreamObjectNames {
                handle: _rt::Resource<StreamObjectNames>,
            }

            impl StreamObjectNames {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for StreamObjectNames {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[resource-drop]stream-object-names"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Container {
                #[allow(unused_unsafe, clippy::all)]
                /// returns container name
                pub fn name(&self) -> Result<_rt::String, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]container.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = *ptr0.add(4).cast::<*mut u8>();
                                    let l6 = *ptr0.add(8).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                    _rt::string_lift(bytes7)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Container {
                #[allow(unused_unsafe, clippy::all)]
                /// returns container metadata
                pub fn info(&self) -> Result<ContainerMetadata, Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]container.info"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<*mut u8>();
                                    let l3 = *ptr0.add(12).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                                    let l5 = *ptr0.add(16).cast::<i64>();

                                    super::super::super::wasi::blobstore::types::ContainerMetadata {
                                        name: _rt::string_lift(bytes4),
                                        created_at: l5 as u64,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = *ptr0.add(8).cast::<*mut u8>();
                                    let l7 = *ptr0.add(12).cast::<usize>();
                                    let len8 = l7;
                                    let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                    _rt::string_lift(bytes8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Container {
                #[allow(unused_unsafe, clippy::all)]
                /// retrieves an object or portion of an object, as a resource.
                /// Start and end offsets are inclusive.
                /// Once a data-blob resource has been created, the underlying bytes are held by the blobstore service for the lifetime
                /// of the data-blob resource, even if the object they came from is later deleted.
                pub fn get_data(
                    &self,
                    name: &ObjectName,
                    start: u64,
                    end: u64,
                ) -> Result<IncomingValue, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]container.get-data"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: i64, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: i64, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i64(&start),
                            _rt::as_i64(&end),
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    super::super::super::wasi::blobstore::types::IncomingValue::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = *ptr1.add(4).cast::<*mut u8>();
                                    let l5 = *ptr1.add(8).cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                    _rt::string_lift(bytes6)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Container {
                #[allow(unused_unsafe, clippy::all)]
                /// creates or replaces an object with the data blob.
                pub fn write_data(
                    &self,
                    name: &ObjectName,
                    data: &OutgoingValue,
                ) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]container.write-data"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            (data).handle() as i32,
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Container {
                #[allow(unused_unsafe, clippy::all)]
                /// returns list of objects in the container. Order is undefined.
                pub fn list_objects(&self) -> Result<StreamObjectNames, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]container.list-objects"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    StreamObjectNames::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<*mut u8>();
                                    let l4 = *ptr0.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Container {
                #[allow(unused_unsafe, clippy::all)]
                /// deletes object.
                /// does not return error if object did not exist.
                pub fn delete_object(&self, name: &ObjectName) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]container.delete-object"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Container {
                #[allow(unused_unsafe, clippy::all)]
                /// deletes multiple objects in the container
                pub fn delete_objects(&self, names: &[ObjectName]) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec1 = names;
                        let len1 = vec1.len();
                        let layout1 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
                        let result1 = if layout1.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout1);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec1.into_iter().enumerate() {
                            let base = result1.add(i * 8);
                            {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                *base.add(4).cast::<usize>() = len0;
                                *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                            }
                        }
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]container.delete-objects"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result1, len1, ptr2);
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        if layout1.size() != 0 {
                            _rt::alloc::dealloc(result1.cast(), layout1);
                        }
                        match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = *ptr2.add(4).cast::<*mut u8>();
                                    let l5 = *ptr2.add(8).cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                    _rt::string_lift(bytes6)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Container {
                #[allow(unused_unsafe, clippy::all)]
                /// returns true if the object exists in this container
                pub fn has_object(&self, name: &ObjectName) -> Result<bool, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]container.has-object"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());

                                    _rt::bool_lift(l3 as u8)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = *ptr1.add(4).cast::<*mut u8>();
                                    let l5 = *ptr1.add(8).cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                    _rt::string_lift(bytes6)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Container {
                #[allow(unused_unsafe, clippy::all)]
                /// returns metadata for the object
                pub fn object_info(&self, name: &ObjectName) -> Result<ObjectMetadata, Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 40]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]container.object-info"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(8).cast::<*mut u8>();
                                    let l4 = *ptr1.add(12).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                                    let l6 = *ptr1.add(16).cast::<*mut u8>();
                                    let l7 = *ptr1.add(20).cast::<usize>();
                                    let len8 = l7;
                                    let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                                    let l9 = *ptr1.add(24).cast::<i64>();
                                    let l10 = *ptr1.add(32).cast::<i64>();

                                    super::super::super::wasi::blobstore::types::ObjectMetadata {
                                        name: _rt::string_lift(bytes5),
                                        container: _rt::string_lift(bytes8),
                                        created_at: l9 as u64,
                                        size: l10 as u64,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l11 = *ptr1.add(8).cast::<*mut u8>();
                                    let l12 = *ptr1.add(12).cast::<usize>();
                                    let len13 = l12;
                                    let bytes13 =
                                        _rt::Vec::from_raw_parts(l11.cast(), len13, len13);

                                    _rt::string_lift(bytes13)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Container {
                #[allow(unused_unsafe, clippy::all)]
                /// removes all objects within the container, leaving the container empty.
                pub fn clear(&self) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]container.clear"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl StreamObjectNames {
                #[allow(unused_unsafe, clippy::all)]
                /// reads the next number of objects from the stream
                ///
                /// This function returns the list of objects read, and a boolean indicating if the end of the stream was reached.
                pub fn read_stream_object_names(
                    &self,
                    len: u64,
                ) -> Result<(_rt::Vec<ObjectName>, bool), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]stream-object-names.read-stream-object-names"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base7 = l2;
                                    let len7 = l3;
                                    let mut result7 = _rt::Vec::with_capacity(len7);
                                    for i in 0..len7 {
                                        let base = base7.add(i * 8);
                                        let e7 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 =
                                                _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                            _rt::string_lift(bytes6)
                                        };
                                        result7.push(e7);
                                    }
                                    _rt::cabi_dealloc(base7, len7 * 8, 4);
                                    let l8 = i32::from(*ptr0.add(12).cast::<u8>());

                                    (result7, _rt::bool_lift(l8 as u8))
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l9 = *ptr0.add(4).cast::<*mut u8>();
                                    let l10 = *ptr0.add(8).cast::<usize>();
                                    let len11 = l10;
                                    let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                    _rt::string_lift(bytes11)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl StreamObjectNames {
                #[allow(unused_unsafe, clippy::all)]
                /// skip the next number of objects in the stream
                ///
                /// This function returns the number of objects skipped, and a boolean indicating if the end of the stream was reached.
                pub fn skip_stream_object_names(&self, num: u64) -> Result<(u64, bool), Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:blobstore/container")]
                        extern "C" {
                            #[link_name = "[method]stream-object-names.skip-stream-object-names"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&num), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();
                                    let l3 = i32::from(*ptr0.add(16).cast::<u8>());

                                    (l2 as u64, _rt::bool_lift(l3 as u8))
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = *ptr0.add(8).cast::<*mut u8>();
                                    let l5 = *ptr0.add(12).cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                    _rt::string_lift(bytes6)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod blobstore {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Container = super::super::super::wasi::blobstore::container::Container;
            pub type Error = super::super::super::wasi::blobstore::types::Error;
            pub type ContainerName = super::super::super::wasi::blobstore::types::ContainerName;
            pub type ObjectId = super::super::super::wasi::blobstore::types::ObjectId;
            #[allow(unused_unsafe, clippy::all)]
            /// creates a new empty container
            pub fn create_container(name: &ContainerName) -> Result<Container, Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:blobstore/blobstore")]
                    extern "C" {
                        #[link_name = "create-container"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<i32>();

                                super::super::super::wasi::blobstore::container::Container::from_handle(l3 as u32)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(4).cast::<*mut u8>();
                                let l5 = *ptr1.add(8).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                _rt::string_lift(bytes6)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// retrieves a container by name
            pub fn get_container(name: &ContainerName) -> Result<Container, Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:blobstore/blobstore")]
                    extern "C" {
                        #[link_name = "get-container"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<i32>();

                                super::super::super::wasi::blobstore::container::Container::from_handle(l3 as u32)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(4).cast::<*mut u8>();
                                let l5 = *ptr1.add(8).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                _rt::string_lift(bytes6)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// deletes a container and all objects within it
            pub fn delete_container(name: &ContainerName) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:blobstore/blobstore")]
                    extern "C" {
                        #[link_name = "delete-container"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<*mut u8>();
                                let l4 = *ptr1.add(8).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// returns true if the container exists
            pub fn container_exists(name: &ContainerName) -> Result<bool, Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:blobstore/blobstore")]
                    extern "C" {
                        #[link_name = "container-exists"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = i32::from(*ptr1.add(4).cast::<u8>());

                                _rt::bool_lift(l3 as u8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(4).cast::<*mut u8>();
                                let l5 = *ptr1.add(8).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                _rt::string_lift(bytes6)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// copies (duplicates) an object, to the same or a different container.
            /// returns an error if the target container does not exist.
            /// overwrites destination object if it already existed.
            pub fn copy_object(src: &ObjectId, dest: &ObjectId) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let super::super::super::wasi::blobstore::types::ObjectId {
                        container: container0,
                        object: object0,
                    } = src;
                    let vec1 = container0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = object0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let super::super::super::wasi::blobstore::types::ObjectId {
                        container: container3,
                        object: object3,
                    } = dest;
                    let vec4 = container3;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = object3;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:blobstore/blobstore")]
                    extern "C" {
                        #[link_name = "copy-object"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr1.cast_mut(),
                        len1,
                        ptr2.cast_mut(),
                        len2,
                        ptr4.cast_mut(),
                        len4,
                        ptr5.cast_mut(),
                        len5,
                        ptr6,
                    );
                    let l7 = i32::from(*ptr6.add(0).cast::<u8>());
                    match l7 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l8 = *ptr6.add(4).cast::<*mut u8>();
                                let l9 = *ptr6.add(8).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                                _rt::string_lift(bytes10)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// moves or renames an object, to the same or a different container
            /// returns an error if the destination container does not exist.
            /// overwrites destination object if it already existed.
            pub fn move_object(src: &ObjectId, dest: &ObjectId) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let super::super::super::wasi::blobstore::types::ObjectId {
                        container: container0,
                        object: object0,
                    } = src;
                    let vec1 = container0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = object0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let super::super::super::wasi::blobstore::types::ObjectId {
                        container: container3,
                        object: object3,
                    } = dest;
                    let vec4 = container3;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = object3;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:blobstore/blobstore")]
                    extern "C" {
                        #[link_name = "move-object"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr1.cast_mut(),
                        len1,
                        ptr2.cast_mut(),
                        len2,
                        ptr4.cast_mut(),
                        len4,
                        ptr5.cast_mut(),
                        len5,
                        ptr6,
                    );
                    let l7 = i32::from(*ptr6.add(0).cast::<u8>());
                    match l7 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l8 = *ptr6.add(4).cast::<*mut u8>();
                                let l9 = *ptr6.add(8).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                                _rt::string_lift(bytes10)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod clocks {
        #[allow(dead_code, clippy::all)]
        pub mod monotonic_clock {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An instant in time, in nanoseconds. An instant is relative to an
            /// unspecified initial value, and can only be compared to instances from
            /// the same monotonic-clock.
            pub type Instant = u64;
            /// A duration of time, in nanoseconds.
            pub type Duration = u64;
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// The clock is monotonic, therefore calling this function repeatedly will
            /// produce a sequence of non-decreasing values.
            pub fn now() -> Instant {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "now"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock. Returns the duration of time
            /// corresponding to a clock tick.
            pub fn resolution() -> Duration {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the specified instant
            /// occured.
            pub fn subscribe_instant(when: Instant) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "subscribe-instant"]
                        fn wit_import(_: i64) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_i64(when));
                    super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the given duration has
            /// elapsed, starting at the time at which this function was called.
            /// occured.
            pub fn subscribe_duration(when: Duration) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "subscribe-duration"]
                        fn wit_import(_: i64) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_i64(when));
                    super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "now"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i32>();
                    Datetime {
                        seconds: l1 as u64,
                        nanoseconds: l2 as u32,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i32>();
                    Datetime {
                        seconds: l1 as u64,
                        nanoseconds: l2 as u32,
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod filesystem {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type InputStream = super::super::super::wasi::io::streams::InputStream;
            pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
            pub type Error = super::super::super::wasi::io::streams::Error;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            /// File size or length of a region within a file.
            pub type Filesize = u64;
            /// The type of a filesystem object referenced by a descriptor.
            ///
            /// Note: This was called `filetype` in earlier versions of WASI.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum DescriptorType {
                /// The type of the descriptor or file is unknown or is different from
                /// any of the other types specified.
                Unknown,
                /// The descriptor refers to a block device inode.
                BlockDevice,
                /// The descriptor refers to a character device inode.
                CharacterDevice,
                /// The descriptor refers to a directory inode.
                Directory,
                /// The descriptor refers to a named pipe.
                Fifo,
                /// The file refers to a symbolic link inode.
                SymbolicLink,
                /// The descriptor refers to a regular file inode.
                RegularFile,
                /// The descriptor refers to a socket.
                Socket,
            }
            impl ::core::fmt::Debug for DescriptorType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DescriptorType::Unknown => {
                            f.debug_tuple("DescriptorType::Unknown").finish()
                        }
                        DescriptorType::BlockDevice => {
                            f.debug_tuple("DescriptorType::BlockDevice").finish()
                        }
                        DescriptorType::CharacterDevice => {
                            f.debug_tuple("DescriptorType::CharacterDevice").finish()
                        }
                        DescriptorType::Directory => {
                            f.debug_tuple("DescriptorType::Directory").finish()
                        }
                        DescriptorType::Fifo => f.debug_tuple("DescriptorType::Fifo").finish(),
                        DescriptorType::SymbolicLink => {
                            f.debug_tuple("DescriptorType::SymbolicLink").finish()
                        }
                        DescriptorType::RegularFile => {
                            f.debug_tuple("DescriptorType::RegularFile").finish()
                        }
                        DescriptorType::Socket => f.debug_tuple("DescriptorType::Socket").finish(),
                    }
                }
            }

            impl DescriptorType {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> DescriptorType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => DescriptorType::Unknown,
                        1 => DescriptorType::BlockDevice,
                        2 => DescriptorType::CharacterDevice,
                        3 => DescriptorType::Directory,
                        4 => DescriptorType::Fifo,
                        5 => DescriptorType::SymbolicLink,
                        6 => DescriptorType::RegularFile,
                        7 => DescriptorType::Socket,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            wit_bindgen_rt::bitflags::bitflags! {
              /// Descriptor flags.
              ///
              /// Note: This was called `fdflags` in earlier versions of WASI.
              #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
              pub struct DescriptorFlags: u8 {
                /// Read mode: Data can be read.
                const READ = 1 << 0;
                /// Write mode: Data can be written to.
                const WRITE = 1 << 1;
                /// Request that writes be performed according to synchronized I/O file
                /// integrity completion. The data stored in the file and the file's
                /// metadata are synchronized. This is similar to `O_SYNC` in POSIX.
                ///
                /// The precise semantics of this operation have not yet been defined for
                /// WASI. At this time, it should be interpreted as a request, and not a
                /// requirement.
                const FILE_INTEGRITY_SYNC = 1 << 2;
                /// Request that writes be performed according to synchronized I/O data
                /// integrity completion. Only the data stored in the file is
                /// synchronized. This is similar to `O_DSYNC` in POSIX.
                ///
                /// The precise semantics of this operation have not yet been defined for
                /// WASI. At this time, it should be interpreted as a request, and not a
                /// requirement.
                const DATA_INTEGRITY_SYNC = 1 << 3;
                /// Requests that reads be performed at the same level of integrety
                /// requested for writes. This is similar to `O_RSYNC` in POSIX.
                ///
                /// The precise semantics of this operation have not yet been defined for
                /// WASI. At this time, it should be interpreted as a request, and not a
                /// requirement.
                const REQUESTED_WRITE_SYNC = 1 << 4;
                /// Mutating directories mode: Directory contents may be mutated.
                ///
                /// When this flag is unset on a descriptor, operations using the
                /// descriptor which would create, rename, delete, modify the data or
                /// metadata of filesystem objects, or obtain another handle which
                /// would permit any of those, shall fail with `error-code::read-only` if
                /// they would otherwise succeed.
                ///
                /// This may only be set on directories.
                const MUTATE_DIRECTORY = 1 << 5;
              }
            }
            wit_bindgen_rt::bitflags::bitflags! {
              /// Flags determining the method of how paths are resolved.
              #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
              pub struct PathFlags: u8 {
                /// As long as the resolved path corresponds to a symbolic link, it is
                /// expanded.
                const SYMLINK_FOLLOW = 1 << 0;
              }
            }
            wit_bindgen_rt::bitflags::bitflags! {
              /// Open flags used by `open-at`.
              #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
              pub struct OpenFlags: u8 {
                /// Create file if it does not exist, similar to `O_CREAT` in POSIX.
                const CREATE = 1 << 0;
                /// Fail if not a directory, similar to `O_DIRECTORY` in POSIX.
                const DIRECTORY = 1 << 1;
                /// Fail if file already exists, similar to `O_EXCL` in POSIX.
                const EXCLUSIVE = 1 << 2;
                /// Truncate file to size 0, similar to `O_TRUNC` in POSIX.
                const TRUNCATE = 1 << 3;
              }
            }
            /// Number of hard links to an inode.
            pub type LinkCount = u64;
            /// File attributes.
            ///
            /// Note: This was called `filestat` in earlier versions of WASI.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct DescriptorStat {
                /// File type.
                pub type_: DescriptorType,
                /// Number of hard links to the file.
                pub link_count: LinkCount,
                /// For regular files, the file size in bytes. For symbolic links, the
                /// length in bytes of the pathname contained in the symbolic link.
                pub size: Filesize,
                /// Last data access timestamp.
                ///
                /// If the `option` is none, the platform doesn't maintain an access
                /// timestamp for this file.
                pub data_access_timestamp: Option<Datetime>,
                /// Last data modification timestamp.
                ///
                /// If the `option` is none, the platform doesn't maintain a
                /// modification timestamp for this file.
                pub data_modification_timestamp: Option<Datetime>,
                /// Last file status-change timestamp.
                ///
                /// If the `option` is none, the platform doesn't maintain a
                /// status-change timestamp for this file.
                pub status_change_timestamp: Option<Datetime>,
            }
            impl ::core::fmt::Debug for DescriptorStat {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DescriptorStat")
                        .field("type", &self.type_)
                        .field("link-count", &self.link_count)
                        .field("size", &self.size)
                        .field("data-access-timestamp", &self.data_access_timestamp)
                        .field(
                            "data-modification-timestamp",
                            &self.data_modification_timestamp,
                        )
                        .field("status-change-timestamp", &self.status_change_timestamp)
                        .finish()
                }
            }
            /// When setting a timestamp, this gives the value to set it to.
            #[derive(Clone, Copy)]
            pub enum NewTimestamp {
                /// Leave the timestamp set to its previous value.
                NoChange,
                /// Set the timestamp to the current time of the system clock associated
                /// with the filesystem.
                Now,
                /// Set the timestamp to the given value.
                Timestamp(Datetime),
            }
            impl ::core::fmt::Debug for NewTimestamp {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        NewTimestamp::NoChange => f.debug_tuple("NewTimestamp::NoChange").finish(),
                        NewTimestamp::Now => f.debug_tuple("NewTimestamp::Now").finish(),
                        NewTimestamp::Timestamp(e) => {
                            f.debug_tuple("NewTimestamp::Timestamp").field(e).finish()
                        }
                    }
                }
            }
            /// A directory entry.
            #[derive(Clone)]
            pub struct DirectoryEntry {
                /// The type of the file referred to by this directory entry.
                pub type_: DescriptorType,
                /// The name of the object.
                pub name: _rt::String,
            }
            impl ::core::fmt::Debug for DirectoryEntry {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DirectoryEntry")
                        .field("type", &self.type_)
                        .field("name", &self.name)
                        .finish()
                }
            }
            /// Error codes returned by functions, similar to `errno` in POSIX.
            /// Not all of these error codes are returned by the functions provided by this
            /// API; some are used in higher-level library layers, and others are provided
            /// merely for alignment with POSIX.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum ErrorCode {
                /// Permission denied, similar to `EACCES` in POSIX.
                Access,
                /// Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX.
                WouldBlock,
                /// Connection already in progress, similar to `EALREADY` in POSIX.
                Already,
                /// Bad descriptor, similar to `EBADF` in POSIX.
                BadDescriptor,
                /// Device or resource busy, similar to `EBUSY` in POSIX.
                Busy,
                /// Resource deadlock would occur, similar to `EDEADLK` in POSIX.
                Deadlock,
                /// Storage quota exceeded, similar to `EDQUOT` in POSIX.
                Quota,
                /// File exists, similar to `EEXIST` in POSIX.
                Exist,
                /// File too large, similar to `EFBIG` in POSIX.
                FileTooLarge,
                /// Illegal byte sequence, similar to `EILSEQ` in POSIX.
                IllegalByteSequence,
                /// Operation in progress, similar to `EINPROGRESS` in POSIX.
                InProgress,
                /// Interrupted function, similar to `EINTR` in POSIX.
                Interrupted,
                /// Invalid argument, similar to `EINVAL` in POSIX.
                Invalid,
                /// I/O error, similar to `EIO` in POSIX.
                Io,
                /// Is a directory, similar to `EISDIR` in POSIX.
                IsDirectory,
                /// Too many levels of symbolic links, similar to `ELOOP` in POSIX.
                Loop,
                /// Too many links, similar to `EMLINK` in POSIX.
                TooManyLinks,
                /// Message too large, similar to `EMSGSIZE` in POSIX.
                MessageSize,
                /// Filename too long, similar to `ENAMETOOLONG` in POSIX.
                NameTooLong,
                /// No such device, similar to `ENODEV` in POSIX.
                NoDevice,
                /// No such file or directory, similar to `ENOENT` in POSIX.
                NoEntry,
                /// No locks available, similar to `ENOLCK` in POSIX.
                NoLock,
                /// Not enough space, similar to `ENOMEM` in POSIX.
                InsufficientMemory,
                /// No space left on device, similar to `ENOSPC` in POSIX.
                InsufficientSpace,
                /// Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX.
                NotDirectory,
                /// Directory not empty, similar to `ENOTEMPTY` in POSIX.
                NotEmpty,
                /// State not recoverable, similar to `ENOTRECOVERABLE` in POSIX.
                NotRecoverable,
                /// Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX.
                Unsupported,
                /// Inappropriate I/O control operation, similar to `ENOTTY` in POSIX.
                NoTty,
                /// No such device or address, similar to `ENXIO` in POSIX.
                NoSuchDevice,
                /// Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX.
                Overflow,
                /// Operation not permitted, similar to `EPERM` in POSIX.
                NotPermitted,
                /// Broken pipe, similar to `EPIPE` in POSIX.
                Pipe,
                /// Read-only file system, similar to `EROFS` in POSIX.
                ReadOnly,
                /// Invalid seek, similar to `ESPIPE` in POSIX.
                InvalidSeek,
                /// Text file busy, similar to `ETXTBSY` in POSIX.
                TextFileBusy,
                /// Cross-device link, similar to `EXDEV` in POSIX.
                CrossDevice,
            }
            impl ErrorCode {
                pub fn name(&self) -> &'static str {
                    match self {
                        ErrorCode::Access => "access",
                        ErrorCode::WouldBlock => "would-block",
                        ErrorCode::Already => "already",
                        ErrorCode::BadDescriptor => "bad-descriptor",
                        ErrorCode::Busy => "busy",
                        ErrorCode::Deadlock => "deadlock",
                        ErrorCode::Quota => "quota",
                        ErrorCode::Exist => "exist",
                        ErrorCode::FileTooLarge => "file-too-large",
                        ErrorCode::IllegalByteSequence => "illegal-byte-sequence",
                        ErrorCode::InProgress => "in-progress",
                        ErrorCode::Interrupted => "interrupted",
                        ErrorCode::Invalid => "invalid",
                        ErrorCode::Io => "io",
                        ErrorCode::IsDirectory => "is-directory",
                        ErrorCode::Loop => "loop",
                        ErrorCode::TooManyLinks => "too-many-links",
                        ErrorCode::MessageSize => "message-size",
                        ErrorCode::NameTooLong => "name-too-long",
                        ErrorCode::NoDevice => "no-device",
                        ErrorCode::NoEntry => "no-entry",
                        ErrorCode::NoLock => "no-lock",
                        ErrorCode::InsufficientMemory => "insufficient-memory",
                        ErrorCode::InsufficientSpace => "insufficient-space",
                        ErrorCode::NotDirectory => "not-directory",
                        ErrorCode::NotEmpty => "not-empty",
                        ErrorCode::NotRecoverable => "not-recoverable",
                        ErrorCode::Unsupported => "unsupported",
                        ErrorCode::NoTty => "no-tty",
                        ErrorCode::NoSuchDevice => "no-such-device",
                        ErrorCode::Overflow => "overflow",
                        ErrorCode::NotPermitted => "not-permitted",
                        ErrorCode::Pipe => "pipe",
                        ErrorCode::ReadOnly => "read-only",
                        ErrorCode::InvalidSeek => "invalid-seek",
                        ErrorCode::TextFileBusy => "text-file-busy",
                        ErrorCode::CrossDevice => "cross-device",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                                          ErrorCode::Access => "Permission denied, similar to `EACCES` in POSIX.",
                                          ErrorCode::WouldBlock => "Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX.",
                                          ErrorCode::Already => "Connection already in progress, similar to `EALREADY` in POSIX.",
                                          ErrorCode::BadDescriptor => "Bad descriptor, similar to `EBADF` in POSIX.",
                                          ErrorCode::Busy => "Device or resource busy, similar to `EBUSY` in POSIX.",
                                          ErrorCode::Deadlock => "Resource deadlock would occur, similar to `EDEADLK` in POSIX.",
                                          ErrorCode::Quota => "Storage quota exceeded, similar to `EDQUOT` in POSIX.",
                                          ErrorCode::Exist => "File exists, similar to `EEXIST` in POSIX.",
                                          ErrorCode::FileTooLarge => "File too large, similar to `EFBIG` in POSIX.",
                                          ErrorCode::IllegalByteSequence => "Illegal byte sequence, similar to `EILSEQ` in POSIX.",
                                          ErrorCode::InProgress => "Operation in progress, similar to `EINPROGRESS` in POSIX.",
                                          ErrorCode::Interrupted => "Interrupted function, similar to `EINTR` in POSIX.",
                                          ErrorCode::Invalid => "Invalid argument, similar to `EINVAL` in POSIX.",
                                          ErrorCode::Io => "I/O error, similar to `EIO` in POSIX.",
                                          ErrorCode::IsDirectory => "Is a directory, similar to `EISDIR` in POSIX.",
                                          ErrorCode::Loop => "Too many levels of symbolic links, similar to `ELOOP` in POSIX.",
                                          ErrorCode::TooManyLinks => "Too many links, similar to `EMLINK` in POSIX.",
                                          ErrorCode::MessageSize => "Message too large, similar to `EMSGSIZE` in POSIX.",
                                          ErrorCode::NameTooLong => "Filename too long, similar to `ENAMETOOLONG` in POSIX.",
                                          ErrorCode::NoDevice => "No such device, similar to `ENODEV` in POSIX.",
                                          ErrorCode::NoEntry => "No such file or directory, similar to `ENOENT` in POSIX.",
                                          ErrorCode::NoLock => "No locks available, similar to `ENOLCK` in POSIX.",
                                          ErrorCode::InsufficientMemory => "Not enough space, similar to `ENOMEM` in POSIX.",
                                          ErrorCode::InsufficientSpace => "No space left on device, similar to `ENOSPC` in POSIX.",
                                          ErrorCode::NotDirectory => "Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX.",
                                          ErrorCode::NotEmpty => "Directory not empty, similar to `ENOTEMPTY` in POSIX.",
                                          ErrorCode::NotRecoverable => "State not recoverable, similar to `ENOTRECOVERABLE` in POSIX.",
                                          ErrorCode::Unsupported => "Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX.",
                                          ErrorCode::NoTty => "Inappropriate I/O control operation, similar to `ENOTTY` in POSIX.",
                                          ErrorCode::NoSuchDevice => "No such device or address, similar to `ENXIO` in POSIX.",
                                          ErrorCode::Overflow => "Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX.",
                                          ErrorCode::NotPermitted => "Operation not permitted, similar to `EPERM` in POSIX.",
                                          ErrorCode::Pipe => "Broken pipe, similar to `EPIPE` in POSIX.",
                                          ErrorCode::ReadOnly => "Read-only file system, similar to `EROFS` in POSIX.",
                                          ErrorCode::InvalidSeek => "Invalid seek, similar to `ESPIPE` in POSIX.",
                                          ErrorCode::TextFileBusy => "Text file busy, similar to `ETXTBSY` in POSIX.",
                                          ErrorCode::CrossDevice => "Cross-device link, similar to `EXDEV` in POSIX.",
                                        }
                }
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ErrorCode")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for ErrorCode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for ErrorCode {}

            impl ErrorCode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ErrorCode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => ErrorCode::Access,
                        1 => ErrorCode::WouldBlock,
                        2 => ErrorCode::Already,
                        3 => ErrorCode::BadDescriptor,
                        4 => ErrorCode::Busy,
                        5 => ErrorCode::Deadlock,
                        6 => ErrorCode::Quota,
                        7 => ErrorCode::Exist,
                        8 => ErrorCode::FileTooLarge,
                        9 => ErrorCode::IllegalByteSequence,
                        10 => ErrorCode::InProgress,
                        11 => ErrorCode::Interrupted,
                        12 => ErrorCode::Invalid,
                        13 => ErrorCode::Io,
                        14 => ErrorCode::IsDirectory,
                        15 => ErrorCode::Loop,
                        16 => ErrorCode::TooManyLinks,
                        17 => ErrorCode::MessageSize,
                        18 => ErrorCode::NameTooLong,
                        19 => ErrorCode::NoDevice,
                        20 => ErrorCode::NoEntry,
                        21 => ErrorCode::NoLock,
                        22 => ErrorCode::InsufficientMemory,
                        23 => ErrorCode::InsufficientSpace,
                        24 => ErrorCode::NotDirectory,
                        25 => ErrorCode::NotEmpty,
                        26 => ErrorCode::NotRecoverable,
                        27 => ErrorCode::Unsupported,
                        28 => ErrorCode::NoTty,
                        29 => ErrorCode::NoSuchDevice,
                        30 => ErrorCode::Overflow,
                        31 => ErrorCode::NotPermitted,
                        32 => ErrorCode::Pipe,
                        33 => ErrorCode::ReadOnly,
                        34 => ErrorCode::InvalidSeek,
                        35 => ErrorCode::TextFileBusy,
                        36 => ErrorCode::CrossDevice,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// File or memory access pattern advisory information.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Advice {
                /// The application has no advice to give on its behavior with respect
                /// to the specified data.
                Normal,
                /// The application expects to access the specified data sequentially
                /// from lower offsets to higher offsets.
                Sequential,
                /// The application expects to access the specified data in a random
                /// order.
                Random,
                /// The application expects to access the specified data in the near
                /// future.
                WillNeed,
                /// The application expects that it will not access the specified data
                /// in the near future.
                DontNeed,
                /// The application expects to access the specified data once and then
                /// not reuse it thereafter.
                NoReuse,
            }
            impl ::core::fmt::Debug for Advice {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Advice::Normal => f.debug_tuple("Advice::Normal").finish(),
                        Advice::Sequential => f.debug_tuple("Advice::Sequential").finish(),
                        Advice::Random => f.debug_tuple("Advice::Random").finish(),
                        Advice::WillNeed => f.debug_tuple("Advice::WillNeed").finish(),
                        Advice::DontNeed => f.debug_tuple("Advice::DontNeed").finish(),
                        Advice::NoReuse => f.debug_tuple("Advice::NoReuse").finish(),
                    }
                }
            }

            impl Advice {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Advice {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Advice::Normal,
                        1 => Advice::Sequential,
                        2 => Advice::Random,
                        3 => Advice::WillNeed,
                        4 => Advice::DontNeed,
                        5 => Advice::NoReuse,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// A 128-bit hash value, split into parts because wasm doesn't have a
            /// 128-bit integer type.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct MetadataHashValue {
                /// 64 bits of a 128-bit hash value.
                pub lower: u64,
                /// Another 64 bits of a 128-bit hash value.
                pub upper: u64,
            }
            impl ::core::fmt::Debug for MetadataHashValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("MetadataHashValue")
                        .field("lower", &self.lower)
                        .field("upper", &self.upper)
                        .finish()
                }
            }
            /// A descriptor is a reference to a filesystem object, which may be a file,
            /// directory, named pipe, special file, or other object on which filesystem
            /// calls may be made.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Descriptor {
                handle: _rt::Resource<Descriptor>,
            }

            impl Descriptor {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Descriptor {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]descriptor"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// A stream of directory entries.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DirectoryEntryStream {
                handle: _rt::Resource<DirectoryEntryStream>,
            }

            impl DirectoryEntryStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DirectoryEntryStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]directory-entry-stream"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Return a stream for reading from a file, if available.
                ///
                /// May fail with an error-code describing why the file cannot be read.
                ///
                /// Multiple read, write, and append streams may be active on the same open
                /// file and they do not interfere with each other.
                ///
                /// Note: This allows using `read-stream`, which is similar to `read` in POSIX.
                pub fn read_via_stream(&self, offset: Filesize) -> Result<InputStream, ErrorCode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.read-via-stream"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(offset), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::io::streams::InputStream::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());

                                    ErrorCode::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Return a stream for writing to a file, if available.
                ///
                /// May fail with an error-code describing why the file cannot be written.
                ///
                /// Note: This allows using `write-stream`, which is similar to `write` in
                /// POSIX.
                pub fn write_via_stream(
                    &self,
                    offset: Filesize,
                ) -> Result<OutputStream, ErrorCode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.write-via-stream"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(offset), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::io::streams::OutputStream::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());

                                    ErrorCode::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Return a stream for appending to a file, if available.
                ///
                /// May fail with an error-code describing why the file cannot be appended.
                ///
                /// Note: This allows using `write-stream`, which is similar to `write` with
                /// `O_APPEND` in in POSIX.
                pub fn append_via_stream(&self) -> Result<OutputStream, ErrorCode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.append-via-stream"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::io::streams::OutputStream::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());

                                    ErrorCode::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Provide file advisory information on a descriptor.
                ///
                /// This is similar to `posix_fadvise` in POSIX.
                pub fn advise(
                    &self,
                    offset: Filesize,
                    length: Filesize,
                    advice: Advice,
                ) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.advise"]
                            fn wit_import(_: i32, _: i64, _: i64, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: i64, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(offset),
                            _rt::as_i64(length),
                            advice.clone() as i32,
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                                    ErrorCode::_lift(l2 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Synchronize the data of a file to disk.
                ///
                /// This function succeeds with no effect if the file descriptor is not
                /// opened for writing.
                ///
                /// Note: This is similar to `fdatasync` in POSIX.
                pub fn sync_data(&self) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.sync-data"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                                    ErrorCode::_lift(l2 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Get flags associated with a descriptor.
                ///
                /// Note: This returns similar flags to `fcntl(fd, F_GETFL)` in POSIX.
                ///
                /// Note: This returns the value that was the `fs_flags` value returned
                /// from `fdstat_get` in earlier versions of WASI.
                pub fn get_flags(&self) -> Result<DescriptorFlags, ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.get-flags"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                                    DescriptorFlags::empty()
                                        | DescriptorFlags::from_bits_retain(((l2 as u8) << 0) as _)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(1).cast::<u8>());

                                    ErrorCode::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the dynamic type of a descriptor.
                ///
                /// Note: This returns the same value as the `type` field of the `fd-stat`
                /// returned by `stat`, `stat-at` and similar.
                ///
                /// Note: This returns similar flags to the `st_mode & S_IFMT` value provided
                /// by `fstat` in POSIX.
                ///
                /// Note: This returns the value that was the `fs_filetype` value returned
                /// from `fdstat_get` in earlier versions of WASI.
                pub fn get_type(&self) -> Result<DescriptorType, ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.get-type"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                                    DescriptorType::_lift(l2 as u8)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(1).cast::<u8>());

                                    ErrorCode::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Adjust the size of an open file. If this increases the file's size, the
                /// extra bytes are filled with zeros.
                ///
                /// Note: This was called `fd_filestat_set_size` in earlier versions of WASI.
                pub fn set_size(&self, size: Filesize) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.set-size"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(size), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                                    ErrorCode::_lift(l2 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Adjust the timestamps of an open file or directory.
                ///
                /// Note: This is similar to `futimens` in POSIX.
                ///
                /// Note: This was called `fd_filestat_set_times` in earlier versions of WASI.
                pub fn set_times(
                    &self,
                    data_access_timestamp: NewTimestamp,
                    data_modification_timestamp: NewTimestamp,
                ) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let (result1_0, result1_1, result1_2) = match data_access_timestamp {
                            NewTimestamp::NoChange => (0i32, 0i64, 0i32),
                            NewTimestamp::Now => (1i32, 0i64, 0i32),
                            NewTimestamp::Timestamp(e) => {
                                let super::super::super::wasi::clocks::wall_clock::Datetime {
                                    seconds: seconds0,
                                    nanoseconds: nanoseconds0,
                                } = e;

                                (2i32, _rt::as_i64(seconds0), _rt::as_i32(nanoseconds0))
                            }
                        };
                        let (result3_0, result3_1, result3_2) = match data_modification_timestamp {
                            NewTimestamp::NoChange => (0i32, 0i64, 0i32),
                            NewTimestamp::Now => (1i32, 0i64, 0i32),
                            NewTimestamp::Timestamp(e) => {
                                let super::super::super::wasi::clocks::wall_clock::Datetime {
                                    seconds: seconds2,
                                    nanoseconds: nanoseconds2,
                                } = e;

                                (2i32, _rt::as_i64(seconds2), _rt::as_i32(nanoseconds2))
                            }
                        };
                        let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.set-times"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i64,
                                _: i32,
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i64,
                            _: i32,
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result1_0,
                            result1_1,
                            result1_2,
                            result3_0,
                            result3_1,
                            result3_2,
                            ptr4,
                        );
                        let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                        match l5 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr4.add(1).cast::<u8>());

                                    ErrorCode::_lift(l6 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Read from a descriptor, without using and updating the descriptor's offset.
                ///
                /// This function returns a list of bytes containing the data that was
                /// read, along with a bool which, when true, indicates that the end of the
                /// file was reached. The returned list will contain up to `length` bytes; it
                /// may return fewer than requested, if the end of the file is reached or
                /// if the I/O operation is interrupted.
                ///
                /// In the future, this may change to return a `stream<u8, error-code>`.
                ///
                /// Note: This is similar to `pread` in POSIX.
                pub fn read(
                    &self,
                    length: Filesize,
                    offset: Filesize,
                ) -> Result<(_rt::Vec<u8>, bool), ErrorCode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.read"]
                            fn wit_import(_: i32, _: i64, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(length),
                            _rt::as_i64(offset),
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let l5 = i32::from(*ptr0.add(12).cast::<u8>());

                                    (
                                        _rt::Vec::from_raw_parts(l2.cast(), len4, len4),
                                        _rt::bool_lift(l5 as u8),
                                    )
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr0.add(4).cast::<u8>());

                                    ErrorCode::_lift(l6 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Write to a descriptor, without using and updating the descriptor's offset.
                ///
                /// It is valid to write past the end of a file; the file is extended to the
                /// extent of the write, with bytes between the previous end and the start of
                /// the write set to zero.
                ///
                /// In the future, this may change to take a `stream<u8, error-code>`.
                ///
                /// Note: This is similar to `pwrite` in POSIX.
                pub fn write(
                    &self,
                    buffer: &[u8],
                    offset: Filesize,
                ) -> Result<Filesize, ErrorCode> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = buffer;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.write"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i64(offset),
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(8).cast::<i64>();

                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(8).cast::<u8>());

                                    ErrorCode::_lift(l4 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Read directory entries from a directory.
                ///
                /// On filesystems where directories contain entries referring to themselves
                /// and their parents, often named `.` and `..` respectively, these entries
                /// are omitted.
                ///
                /// This always returns a new stream which starts at the beginning of the
                /// directory. Multiple streams may be active on the same directory, and they
                /// do not interfere with each other.
                pub fn read_directory(&self) -> Result<DirectoryEntryStream, ErrorCode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.read-directory"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    DirectoryEntryStream::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());

                                    ErrorCode::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Synchronize the data and metadata of a file to disk.
                ///
                /// This function succeeds with no effect if the file descriptor is not
                /// opened for writing.
                ///
                /// Note: This is similar to `fsync` in POSIX.
                pub fn sync(&self) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.sync"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                                    ErrorCode::_lift(l2 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a directory.
                ///
                /// Note: This is similar to `mkdirat` in POSIX.
                pub fn create_directory_at(&self, path: &str) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let vec0 = path;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.create-directory-at"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(1).cast::<u8>());

                                    ErrorCode::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the attributes of an open file or directory.
                ///
                /// Note: This is similar to `fstat` in POSIX, except that it does not return
                /// device and inode information. For testing whether two descriptors refer to
                /// the same underlying filesystem object, use `is-same-object`. To obtain
                /// additional data that can be used do determine whether a file has been
                /// modified, use `metadata-hash`.
                ///
                /// Note: This was called `fd_filestat_get` in earlier versions of WASI.
                pub fn stat(&self) -> Result<DescriptorStat, ErrorCode> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 104]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 104]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.stat"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let l3 = *ptr0.add(16).cast::<i64>();
                                    let l4 = *ptr0.add(24).cast::<i64>();
                                    let l5 = i32::from(*ptr0.add(32).cast::<u8>());
                                    let l8 = i32::from(*ptr0.add(56).cast::<u8>());
                                    let l11 = i32::from(*ptr0.add(80).cast::<u8>());

                                    DescriptorStat {
                                        type_: DescriptorType::_lift(l2 as u8),
                                        link_count: l3 as u64,
                                        size: l4 as u64,
                                        data_access_timestamp: match l5 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l6 = *ptr0.add(40).cast::<i64>();
                                                    let l7 = *ptr0.add(48).cast::<i32>();

                                                    super::super::super::wasi::clocks::wall_clock::Datetime{
                                                          seconds: l6 as u64,
                                                          nanoseconds: l7 as u32,
                                                        }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        data_modification_timestamp: match l8 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l9 = *ptr0.add(64).cast::<i64>();
                                                    let l10 = *ptr0.add(72).cast::<i32>();

                                                    super::super::super::wasi::clocks::wall_clock::Datetime{
                                                          seconds: l9 as u64,
                                                          nanoseconds: l10 as u32,
                                                        }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        status_change_timestamp: match l11 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l12 = *ptr0.add(88).cast::<i64>();
                                                    let l13 = *ptr0.add(96).cast::<i32>();

                                                    super::super::super::wasi::clocks::wall_clock::Datetime{
                                                          seconds: l12 as u64,
                                                          nanoseconds: l13 as u32,
                                                        }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l14 = i32::from(*ptr0.add(8).cast::<u8>());

                                    ErrorCode::_lift(l14 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the attributes of a file or directory.
                ///
                /// Note: This is similar to `fstatat` in POSIX, except that it does not
                /// return device and inode information. See the `stat` description for a
                /// discussion of alternatives.
                ///
                /// Note: This was called `path_filestat_get` in earlier versions of WASI.
                pub fn stat_at(
                    &self,
                    path_flags: PathFlags,
                    path: &str,
                ) -> Result<DescriptorStat, ErrorCode> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 104]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 104]);
                        let flags0 = path_flags;
                        let vec1 = path;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.stat-at"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            (flags0.bits() >> 0) as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => {
                                let e = {
                                    let l4 = i32::from(*ptr2.add(8).cast::<u8>());
                                    let l5 = *ptr2.add(16).cast::<i64>();
                                    let l6 = *ptr2.add(24).cast::<i64>();
                                    let l7 = i32::from(*ptr2.add(32).cast::<u8>());
                                    let l10 = i32::from(*ptr2.add(56).cast::<u8>());
                                    let l13 = i32::from(*ptr2.add(80).cast::<u8>());

                                    DescriptorStat {
                                        type_: DescriptorType::_lift(l4 as u8),
                                        link_count: l5 as u64,
                                        size: l6 as u64,
                                        data_access_timestamp: match l7 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l8 = *ptr2.add(40).cast::<i64>();
                                                    let l9 = *ptr2.add(48).cast::<i32>();

                                                    super::super::super::wasi::clocks::wall_clock::Datetime{
                                                          seconds: l8 as u64,
                                                          nanoseconds: l9 as u32,
                                                        }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        data_modification_timestamp: match l10 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l11 = *ptr2.add(64).cast::<i64>();
                                                    let l12 = *ptr2.add(72).cast::<i32>();

                                                    super::super::super::wasi::clocks::wall_clock::Datetime{
                                                          seconds: l11 as u64,
                                                          nanoseconds: l12 as u32,
                                                        }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        status_change_timestamp: match l13 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l14 = *ptr2.add(88).cast::<i64>();
                                                    let l15 = *ptr2.add(96).cast::<i32>();

                                                    super::super::super::wasi::clocks::wall_clock::Datetime{
                                                          seconds: l14 as u64,
                                                          nanoseconds: l15 as u32,
                                                        }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l16 = i32::from(*ptr2.add(8).cast::<u8>());

                                    ErrorCode::_lift(l16 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Adjust the timestamps of a file or directory.
                ///
                /// Note: This is similar to `utimensat` in POSIX.
                ///
                /// Note: This was called `path_filestat_set_times` in earlier versions of
                /// WASI.
                pub fn set_times_at(
                    &self,
                    path_flags: PathFlags,
                    path: &str,
                    data_access_timestamp: NewTimestamp,
                    data_modification_timestamp: NewTimestamp,
                ) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let flags0 = path_flags;
                        let vec1 = path;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let (result3_0, result3_1, result3_2) = match data_access_timestamp {
                            NewTimestamp::NoChange => (0i32, 0i64, 0i32),
                            NewTimestamp::Now => (1i32, 0i64, 0i32),
                            NewTimestamp::Timestamp(e) => {
                                let super::super::super::wasi::clocks::wall_clock::Datetime {
                                    seconds: seconds2,
                                    nanoseconds: nanoseconds2,
                                } = e;

                                (2i32, _rt::as_i64(seconds2), _rt::as_i32(nanoseconds2))
                            }
                        };
                        let (result5_0, result5_1, result5_2) = match data_modification_timestamp {
                            NewTimestamp::NoChange => (0i32, 0i64, 0i32),
                            NewTimestamp::Now => (1i32, 0i64, 0i32),
                            NewTimestamp::Timestamp(e) => {
                                let super::super::super::wasi::clocks::wall_clock::Datetime {
                                    seconds: seconds4,
                                    nanoseconds: nanoseconds4,
                                } = e;

                                (2i32, _rt::as_i64(seconds4), _rt::as_i32(nanoseconds4))
                            }
                        };
                        let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.set-times-at"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i64,
                                _: i32,
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i64,
                            _: i32,
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            (flags0.bits() >> 0) as i32,
                            ptr1.cast_mut(),
                            len1,
                            result3_0,
                            result3_1,
                            result3_2,
                            result5_0,
                            result5_1,
                            result5_2,
                            ptr6,
                        );
                        let l7 = i32::from(*ptr6.add(0).cast::<u8>());
                        match l7 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l8 = i32::from(*ptr6.add(1).cast::<u8>());

                                    ErrorCode::_lift(l8 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a hard link.
                ///
                /// Note: This is similar to `linkat` in POSIX.
                pub fn link_at(
                    &self,
                    old_path_flags: PathFlags,
                    old_path: &str,
                    new_descriptor: &Descriptor,
                    new_path: &str,
                ) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let flags0 = old_path_flags;
                        let vec1 = old_path;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = new_path;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.link-at"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            (flags0.bits() >> 0) as i32,
                            ptr1.cast_mut(),
                            len1,
                            (new_descriptor).handle() as i32,
                            ptr2.cast_mut(),
                            len2,
                            ptr3,
                        );
                        let l4 = i32::from(*ptr3.add(0).cast::<u8>());
                        match l4 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr3.add(1).cast::<u8>());

                                    ErrorCode::_lift(l5 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Open a file or directory.
                ///
                /// The returned descriptor is not guaranteed to be the lowest-numbered
                /// descriptor not currently open/ it is randomized to prevent applications
                /// from depending on making assumptions about indexes, since this is
                /// error-prone in multi-threaded contexts. The returned descriptor is
                /// guaranteed to be less than 2**31.
                ///
                /// If `flags` contains `descriptor-flags::mutate-directory`, and the base
                /// descriptor doesn't have `descriptor-flags::mutate-directory` set,
                /// `open-at` fails with `error-code::read-only`.
                ///
                /// If `flags` contains `write` or `mutate-directory`, or `open-flags`
                /// contains `truncate` or `create`, and the base descriptor doesn't have
                /// `descriptor-flags::mutate-directory` set, `open-at` fails with
                /// `error-code::read-only`.
                ///
                /// Note: This is similar to `openat` in POSIX.
                pub fn open_at(
                    &self,
                    path_flags: PathFlags,
                    path: &str,
                    open_flags: OpenFlags,
                    flags: DescriptorFlags,
                ) -> Result<Descriptor, ErrorCode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let flags0 = path_flags;
                        let vec1 = path;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let flags2 = open_flags;
                        let flags3 = flags;
                        let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.open-at"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            (flags0.bits() >> 0) as i32,
                            ptr1.cast_mut(),
                            len1,
                            (flags2.bits() >> 0) as i32,
                            (flags3.bits() >> 0) as i32,
                            ptr4,
                        );
                        let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                        match l5 {
                            0 => {
                                let e = {
                                    let l6 = *ptr4.add(4).cast::<i32>();

                                    Descriptor::from_handle(l6 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l7 = i32::from(*ptr4.add(4).cast::<u8>());

                                    ErrorCode::_lift(l7 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Read the contents of a symbolic link.
                ///
                /// If the contents contain an absolute or rooted path in the underlying
                /// filesystem, this function fails with `error-code::not-permitted`.
                ///
                /// Note: This is similar to `readlinkat` in POSIX.
                pub fn readlink_at(&self, path: &str) -> Result<_rt::String, ErrorCode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = path;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.readlink-at"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr1.add(4).cast::<u8>());

                                    ErrorCode::_lift(l6 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Remove a directory.
                ///
                /// Return `error-code::not-empty` if the directory is not empty.
                ///
                /// Note: This is similar to `unlinkat(fd, path, AT_REMOVEDIR)` in POSIX.
                pub fn remove_directory_at(&self, path: &str) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let vec0 = path;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.remove-directory-at"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(1).cast::<u8>());

                                    ErrorCode::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Rename a filesystem object.
                ///
                /// Note: This is similar to `renameat` in POSIX.
                pub fn rename_at(
                    &self,
                    old_path: &str,
                    new_descriptor: &Descriptor,
                    new_path: &str,
                ) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let vec0 = old_path;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = new_path;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.rename-at"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            (new_descriptor).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr2.add(1).cast::<u8>());

                                    ErrorCode::_lift(l4 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a symbolic link (also known as a "symlink").
                ///
                /// If `old-path` starts with `/`, the function fails with
                /// `error-code::not-permitted`.
                ///
                /// Note: This is similar to `symlinkat` in POSIX.
                pub fn symlink_at(&self, old_path: &str, new_path: &str) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let vec0 = old_path;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = new_path;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.symlink-at"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr2.add(1).cast::<u8>());

                                    ErrorCode::_lift(l4 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Unlink a filesystem object that is not a directory.
                ///
                /// Return `error-code::is-directory` if the path refers to a directory.
                /// Note: This is similar to `unlinkat(fd, path, 0)` in POSIX.
                pub fn unlink_file_at(&self, path: &str) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let vec0 = path;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.unlink-file-at"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(1).cast::<u8>());

                                    ErrorCode::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Test whether two descriptors refer to the same filesystem object.
                ///
                /// In POSIX, this corresponds to testing whether the two descriptors have the
                /// same device (`st_dev`) and inode (`st_ino` or `d_ino`) numbers.
                /// wasi-filesystem does not expose device and inode numbers, so this function
                /// may be used instead.
                pub fn is_same_object(&self, other: &Descriptor) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.is-same-object"]
                            fn wit_import(_: i32, _: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, (other).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Return a hash of the metadata associated with a filesystem object referred
                /// to by a descriptor.
                ///
                /// This returns a hash of the last-modification timestamp and file size, and
                /// may also include the inode number, device number, birth timestamp, and
                /// other metadata fields that may change when the file is modified or
                /// replaced. It may also include a secret value chosen by the
                /// implementation and not otherwise exposed.
                ///
                /// Implementations are encourated to provide the following properties:
                ///
                /// - If the file is not modified or replaced, the computed hash value should
                /// usually not change.
                /// - If the object is modified or replaced, the computed hash value should
                /// usually change.
                /// - The inputs to the hash should not be easily computable from the
                /// computed hash.
                ///
                /// However, none of these is required.
                pub fn metadata_hash(&self) -> Result<MetadataHashValue, ErrorCode> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.metadata-hash"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();
                                    let l3 = *ptr0.add(16).cast::<i64>();

                                    MetadataHashValue {
                                        lower: l2 as u64,
                                        upper: l3 as u64,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());

                                    ErrorCode::_lift(l4 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Descriptor {
                #[allow(unused_unsafe, clippy::all)]
                /// Return a hash of the metadata associated with a filesystem object referred
                /// to by a directory descriptor and a relative path.
                ///
                /// This performs the same hash computation as `metadata-hash`.
                pub fn metadata_hash_at(
                    &self,
                    path_flags: PathFlags,
                    path: &str,
                ) -> Result<MetadataHashValue, ErrorCode> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let flags0 = path_flags;
                        let vec1 = path;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]descriptor.metadata-hash-at"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            (flags0.bits() >> 0) as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => {
                                let e = {
                                    let l4 = *ptr2.add(8).cast::<i64>();
                                    let l5 = *ptr2.add(16).cast::<i64>();

                                    MetadataHashValue {
                                        lower: l4 as u64,
                                        upper: l5 as u64,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr2.add(8).cast::<u8>());

                                    ErrorCode::_lift(l6 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DirectoryEntryStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Read a single directory entry from a `directory-entry-stream`.
                pub fn read_directory_entry(&self) -> Result<Option<DirectoryEntry>, ErrorCode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]directory-entry-stream.read-directory-entry"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                                let l4 = *ptr0.add(12).cast::<*mut u8>();
                                                let l5 = *ptr0.add(16).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 =
                                                    _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                                DirectoryEntry {
                                                    type_: DescriptorType::_lift(l3 as u8),
                                                    name: _rt::string_lift(bytes6),
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l7 = i32::from(*ptr0.add(4).cast::<u8>());

                                    ErrorCode::_lift(l7 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Attempts to extract a filesystem-related `error-code` from the stream
            /// `error` provided.
            ///
            /// Stream operations which return `stream-error::last-operation-failed`
            /// have a payload with more information about the operation that failed.
            /// This payload can be passed through to this function to see if there's
            /// filesystem-related information about the error to return.
            ///
            /// Note that this function is fallible because not all stream-related
            /// errors are filesystem-related errors.
            pub fn filesystem_error_code(err: &Error) -> Option<ErrorCode> {
                unsafe {
                    #[repr(align(1))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:filesystem/types@0.2.0")]
                    extern "C" {
                        #[link_name = "filesystem-error-code"]
                        fn wit_import(_: i32, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import((err).handle() as i32, ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                                ErrorCode::_lift(l2 as u8)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod preopens {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Descriptor = super::super::super::wasi::filesystem::types::Descriptor;
            #[allow(unused_unsafe, clippy::all)]
            /// Return the set of preopened directories, and their path.
            pub fn get_directories() -> _rt::Vec<(Descriptor, _rt::String)> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:filesystem/preopens@0.2.0")]
                    extern "C" {
                        #[link_name = "get-directories"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<*mut u8>();
                    let l2 = *ptr0.add(4).cast::<usize>();
                    let base7 = l1;
                    let len7 = l2;
                    let mut result7 = _rt::Vec::with_capacity(len7);
                    for i in 0..len7 {
                        let base = base7.add(i * 12);
                        let e7 = {
                            let l3 = *base.add(0).cast::<i32>();
                            let l4 = *base.add(4).cast::<*mut u8>();
                            let l5 = *base.add(8).cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                            (super::super::super::wasi::filesystem::types::Descriptor::from_handle(l3 as u32), _rt::string_lift(bytes6))
                        };
                        result7.push(e7);
                    }
                    _rt::cabi_dealloc(base7, len7 * 12, 4);
                    result7
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod http {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
            pub type InputStream = super::super::super::wasi::io::streams::InputStream;
            pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
            pub type IoError = super::super::super::wasi::io::error::Error;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// This type corresponds to HTTP standard Methods.
            #[derive(Clone)]
            pub enum Method {
                Get,
                Head,
                Post,
                Put,
                Delete,
                Connect,
                Options,
                Trace,
                Patch,
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Method {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Method::Get => f.debug_tuple("Method::Get").finish(),
                        Method::Head => f.debug_tuple("Method::Head").finish(),
                        Method::Post => f.debug_tuple("Method::Post").finish(),
                        Method::Put => f.debug_tuple("Method::Put").finish(),
                        Method::Delete => f.debug_tuple("Method::Delete").finish(),
                        Method::Connect => f.debug_tuple("Method::Connect").finish(),
                        Method::Options => f.debug_tuple("Method::Options").finish(),
                        Method::Trace => f.debug_tuple("Method::Trace").finish(),
                        Method::Patch => f.debug_tuple("Method::Patch").finish(),
                        Method::Other(e) => f.debug_tuple("Method::Other").field(e).finish(),
                    }
                }
            }
            /// This type corresponds to HTTP standard Related Schemes.
            #[derive(Clone)]
            pub enum Scheme {
                Http,
                Https,
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Scheme {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Scheme::Http => f.debug_tuple("Scheme::Http").finish(),
                        Scheme::Https => f.debug_tuple("Scheme::Https").finish(),
                        Scheme::Other(e) => f.debug_tuple("Scheme::Other").field(e).finish(),
                    }
                }
            }
            /// Defines the case payload type for `DNS-error` above:
            #[derive(Clone)]
            pub struct DnsErrorPayload {
                pub rcode: Option<_rt::String>,
                pub info_code: Option<u16>,
            }
            impl ::core::fmt::Debug for DnsErrorPayload {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DnsErrorPayload")
                        .field("rcode", &self.rcode)
                        .field("info-code", &self.info_code)
                        .finish()
                }
            }
            /// Defines the case payload type for `TLS-alert-received` above:
            #[derive(Clone)]
            pub struct TlsAlertReceivedPayload {
                pub alert_id: Option<u8>,
                pub alert_message: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for TlsAlertReceivedPayload {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TlsAlertReceivedPayload")
                        .field("alert-id", &self.alert_id)
                        .field("alert-message", &self.alert_message)
                        .finish()
                }
            }
            /// Defines the case payload type for `HTTP-response-{header,trailer}-size` above:
            #[derive(Clone)]
            pub struct FieldSizePayload {
                pub field_name: Option<_rt::String>,
                pub field_size: Option<u32>,
            }
            impl ::core::fmt::Debug for FieldSizePayload {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("FieldSizePayload")
                        .field("field-name", &self.field_name)
                        .field("field-size", &self.field_size)
                        .finish()
                }
            }
            /// These cases are inspired by the IANA HTTP Proxy Error Types:
            /// https://www.iana.org/assignments/http-proxy-status/http-proxy-status.xhtml#table-http-proxy-error-types
            #[derive(Clone)]
            pub enum ErrorCode {
                DnsTimeout,
                DnsError(DnsErrorPayload),
                DestinationNotFound,
                DestinationUnavailable,
                DestinationIpProhibited,
                DestinationIpUnroutable,
                ConnectionRefused,
                ConnectionTerminated,
                ConnectionTimeout,
                ConnectionReadTimeout,
                ConnectionWriteTimeout,
                ConnectionLimitReached,
                TlsProtocolError,
                TlsCertificateError,
                TlsAlertReceived(TlsAlertReceivedPayload),
                HttpRequestDenied,
                HttpRequestLengthRequired,
                HttpRequestBodySize(Option<u64>),
                HttpRequestMethodInvalid,
                HttpRequestUriInvalid,
                HttpRequestUriTooLong,
                HttpRequestHeaderSectionSize(Option<u32>),
                HttpRequestHeaderSize(Option<FieldSizePayload>),
                HttpRequestTrailerSectionSize(Option<u32>),
                HttpRequestTrailerSize(FieldSizePayload),
                HttpResponseIncomplete,
                HttpResponseHeaderSectionSize(Option<u32>),
                HttpResponseHeaderSize(FieldSizePayload),
                HttpResponseBodySize(Option<u64>),
                HttpResponseTrailerSectionSize(Option<u32>),
                HttpResponseTrailerSize(FieldSizePayload),
                HttpResponseTransferCoding(Option<_rt::String>),
                HttpResponseContentCoding(Option<_rt::String>),
                HttpResponseTimeout,
                HttpUpgradeFailed,
                HttpProtocolError,
                LoopDetected,
                ConfigurationError,
                /// This is a catch-all error for anything that doesn't fit cleanly into a
                /// more specific case. It also includes an optional string for an
                /// unstructured description of the error. Users should not depend on the
                /// string for diagnosing errors, as it's not required to be consistent
                /// between implementations.
                InternalError(Option<_rt::String>),
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::DnsTimeout => f.debug_tuple("ErrorCode::DnsTimeout").finish(),
                        ErrorCode::DnsError(e) => {
                            f.debug_tuple("ErrorCode::DnsError").field(e).finish()
                        }
                        ErrorCode::DestinationNotFound => {
                            f.debug_tuple("ErrorCode::DestinationNotFound").finish()
                        }
                        ErrorCode::DestinationUnavailable => {
                            f.debug_tuple("ErrorCode::DestinationUnavailable").finish()
                        }
                        ErrorCode::DestinationIpProhibited => {
                            f.debug_tuple("ErrorCode::DestinationIpProhibited").finish()
                        }
                        ErrorCode::DestinationIpUnroutable => {
                            f.debug_tuple("ErrorCode::DestinationIpUnroutable").finish()
                        }
                        ErrorCode::ConnectionRefused => {
                            f.debug_tuple("ErrorCode::ConnectionRefused").finish()
                        }
                        ErrorCode::ConnectionTerminated => {
                            f.debug_tuple("ErrorCode::ConnectionTerminated").finish()
                        }
                        ErrorCode::ConnectionTimeout => {
                            f.debug_tuple("ErrorCode::ConnectionTimeout").finish()
                        }
                        ErrorCode::ConnectionReadTimeout => {
                            f.debug_tuple("ErrorCode::ConnectionReadTimeout").finish()
                        }
                        ErrorCode::ConnectionWriteTimeout => {
                            f.debug_tuple("ErrorCode::ConnectionWriteTimeout").finish()
                        }
                        ErrorCode::ConnectionLimitReached => {
                            f.debug_tuple("ErrorCode::ConnectionLimitReached").finish()
                        }
                        ErrorCode::TlsProtocolError => {
                            f.debug_tuple("ErrorCode::TlsProtocolError").finish()
                        }
                        ErrorCode::TlsCertificateError => {
                            f.debug_tuple("ErrorCode::TlsCertificateError").finish()
                        }
                        ErrorCode::TlsAlertReceived(e) => f
                            .debug_tuple("ErrorCode::TlsAlertReceived")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpRequestDenied => {
                            f.debug_tuple("ErrorCode::HttpRequestDenied").finish()
                        }
                        ErrorCode::HttpRequestLengthRequired => f
                            .debug_tuple("ErrorCode::HttpRequestLengthRequired")
                            .finish(),
                        ErrorCode::HttpRequestBodySize(e) => f
                            .debug_tuple("ErrorCode::HttpRequestBodySize")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpRequestMethodInvalid => f
                            .debug_tuple("ErrorCode::HttpRequestMethodInvalid")
                            .finish(),
                        ErrorCode::HttpRequestUriInvalid => {
                            f.debug_tuple("ErrorCode::HttpRequestUriInvalid").finish()
                        }
                        ErrorCode::HttpRequestUriTooLong => {
                            f.debug_tuple("ErrorCode::HttpRequestUriTooLong").finish()
                        }
                        ErrorCode::HttpRequestHeaderSectionSize(e) => f
                            .debug_tuple("ErrorCode::HttpRequestHeaderSectionSize")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpRequestHeaderSize(e) => f
                            .debug_tuple("ErrorCode::HttpRequestHeaderSize")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpRequestTrailerSectionSize(e) => f
                            .debug_tuple("ErrorCode::HttpRequestTrailerSectionSize")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpRequestTrailerSize(e) => f
                            .debug_tuple("ErrorCode::HttpRequestTrailerSize")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpResponseIncomplete => {
                            f.debug_tuple("ErrorCode::HttpResponseIncomplete").finish()
                        }
                        ErrorCode::HttpResponseHeaderSectionSize(e) => f
                            .debug_tuple("ErrorCode::HttpResponseHeaderSectionSize")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpResponseHeaderSize(e) => f
                            .debug_tuple("ErrorCode::HttpResponseHeaderSize")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpResponseBodySize(e) => f
                            .debug_tuple("ErrorCode::HttpResponseBodySize")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpResponseTrailerSectionSize(e) => f
                            .debug_tuple("ErrorCode::HttpResponseTrailerSectionSize")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpResponseTrailerSize(e) => f
                            .debug_tuple("ErrorCode::HttpResponseTrailerSize")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpResponseTransferCoding(e) => f
                            .debug_tuple("ErrorCode::HttpResponseTransferCoding")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpResponseContentCoding(e) => f
                            .debug_tuple("ErrorCode::HttpResponseContentCoding")
                            .field(e)
                            .finish(),
                        ErrorCode::HttpResponseTimeout => {
                            f.debug_tuple("ErrorCode::HttpResponseTimeout").finish()
                        }
                        ErrorCode::HttpUpgradeFailed => {
                            f.debug_tuple("ErrorCode::HttpUpgradeFailed").finish()
                        }
                        ErrorCode::HttpProtocolError => {
                            f.debug_tuple("ErrorCode::HttpProtocolError").finish()
                        }
                        ErrorCode::LoopDetected => {
                            f.debug_tuple("ErrorCode::LoopDetected").finish()
                        }
                        ErrorCode::ConfigurationError => {
                            f.debug_tuple("ErrorCode::ConfigurationError").finish()
                        }
                        ErrorCode::InternalError(e) => {
                            f.debug_tuple("ErrorCode::InternalError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for ErrorCode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for ErrorCode {}
            /// This type enumerates the different kinds of errors that may occur when
            /// setting or appending to a `fields` resource.
            #[derive(Clone, Copy)]
            pub enum HeaderError {
                /// This error indicates that a `field-key` or `field-value` was
                /// syntactically invalid when used with an operation that sets headers in a
                /// `fields`.
                InvalidSyntax,
                /// This error indicates that a forbidden `field-key` was used when trying
                /// to set a header in a `fields`.
                Forbidden,
                /// This error indicates that the operation on the `fields` was not
                /// permitted because the fields are immutable.
                Immutable,
            }
            impl ::core::fmt::Debug for HeaderError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        HeaderError::InvalidSyntax => {
                            f.debug_tuple("HeaderError::InvalidSyntax").finish()
                        }
                        HeaderError::Forbidden => f.debug_tuple("HeaderError::Forbidden").finish(),
                        HeaderError::Immutable => f.debug_tuple("HeaderError::Immutable").finish(),
                    }
                }
            }
            impl ::core::fmt::Display for HeaderError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for HeaderError {}
            /// Field keys are always strings.
            pub type FieldKey = _rt::String;
            /// Field values should always be ASCII strings. However, in
            /// reality, HTTP implementations often have to interpret malformed values,
            /// so they are provided as a list of bytes.
            pub type FieldValue = _rt::Vec<u8>;
            /// This following block defines the `fields` resource which corresponds to
            /// HTTP standard Fields. Fields are a common representation used for both
            /// Headers and Trailers.
            ///
            /// A `fields` may be mutable or immutable. A `fields` created using the
            /// constructor, `from-list`, or `clone` will be mutable, but a `fields`
            /// resource given by other means (including, but not limited to,
            /// `incoming-request.headers`, `outgoing-request.headers`) might be be
            /// immutable. In an immutable fields, the `set`, `append`, and `delete`
            /// operations will fail with `header-error.immutable`.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Fields {
                handle: _rt::Resource<Fields>,
            }

            impl Fields {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Fields {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]fields"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Headers is an alias for Fields.
            pub type Headers = Fields;
            /// Trailers is an alias for Fields.
            pub type Trailers = Fields;
            /// Represents an incoming HTTP Request.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct IncomingRequest {
                handle: _rt::Resource<IncomingRequest>,
            }

            impl IncomingRequest {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for IncomingRequest {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]incoming-request"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents an outgoing HTTP Request.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct OutgoingRequest {
                handle: _rt::Resource<OutgoingRequest>,
            }

            impl OutgoingRequest {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for OutgoingRequest {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]outgoing-request"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Parameters for making an HTTP Request. Each of these parameters is
            /// currently an optional timeout applicable to the transport layer of the
            /// HTTP protocol.
            ///
            /// These timeouts are separate from any the user may use to bound a
            /// blocking call to `wasi:io/poll.poll`.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct RequestOptions {
                handle: _rt::Resource<RequestOptions>,
            }

            impl RequestOptions {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for RequestOptions {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]request-options"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents the ability to send an HTTP Response.
            ///
            /// This resource is used by the `wasi:http/incoming-handler` interface to
            /// allow a Response to be sent corresponding to the Request provided as the
            /// other argument to `incoming-handler.handle`.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct ResponseOutparam {
                handle: _rt::Resource<ResponseOutparam>,
            }

            impl ResponseOutparam {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for ResponseOutparam {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]response-outparam"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// This type corresponds to the HTTP standard Status Code.
            pub type StatusCode = u16;
            /// Represents an incoming HTTP Response.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct IncomingResponse {
                handle: _rt::Resource<IncomingResponse>,
            }

            impl IncomingResponse {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for IncomingResponse {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]incoming-response"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents an incoming HTTP Request or Response's Body.
            ///
            /// A body has both its contents - a stream of bytes - and a (possibly
            /// empty) set of trailers, indicating that the full contents of the
            /// body have been received. This resource represents the contents as
            /// an `input-stream` and the delivery of trailers as a `future-trailers`,
            /// and ensures that the user of this interface may only be consuming either
            /// the body contents or waiting on trailers at any given time.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct IncomingBody {
                handle: _rt::Resource<IncomingBody>,
            }

            impl IncomingBody {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for IncomingBody {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]incoming-body"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents a future which may eventaully return trailers, or an error.
            ///
            /// In the case that the incoming HTTP Request or Response did not have any
            /// trailers, this future will resolve to the empty set of trailers once the
            /// complete Request or Response body has been received.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureTrailers {
                handle: _rt::Resource<FutureTrailers>,
            }

            impl FutureTrailers {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureTrailers {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-trailers"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents an outgoing HTTP Response.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct OutgoingResponse {
                handle: _rt::Resource<OutgoingResponse>,
            }

            impl OutgoingResponse {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for OutgoingResponse {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]outgoing-response"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents an outgoing HTTP Request or Response's Body.
            ///
            /// A body has both its contents - a stream of bytes - and a (possibly
            /// empty) set of trailers, inducating the full contents of the body
            /// have been sent. This resource represents the contents as an
            /// `output-stream` child resource, and the completion of the body (with
            /// optional trailers) with a static function that consumes the
            /// `outgoing-body` resource, and ensures that the user of this interface
            /// may not write to the body contents after the body has been finished.
            ///
            /// If the user code drops this resource, as opposed to calling the static
            /// method `finish`, the implementation should treat the body as incomplete,
            /// and that an error has occured. The implementation should propogate this
            /// error to the HTTP protocol by whatever means it has available,
            /// including: corrupting the body on the wire, aborting the associated
            /// Request, or sending a late status code for the Response.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct OutgoingBody {
                handle: _rt::Resource<OutgoingBody>,
            }

            impl OutgoingBody {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for OutgoingBody {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]outgoing-body"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents a future which may eventaully return an incoming HTTP
            /// Response, or an error.
            ///
            /// This resource is returned by the `wasi:http/outgoing-handler` interface to
            /// provide the HTTP Response corresponding to the sent Request.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureIncomingResponse {
                handle: _rt::Resource<FutureIncomingResponse>,
            }

            impl FutureIncomingResponse {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureIncomingResponse {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-incoming-response"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            /// Attempts to extract a http-related `error` from the wasi:io `error`
            /// provided.
            ///
            /// Stream operations which return
            /// `wasi:io/stream/stream-error::last-operation-failed` have a payload of
            /// type `wasi:io/error/error` with more information about the operation
            /// that failed. This payload can be passed through to this function to see
            /// if there's http-related information about the error to return.
            ///
            /// Note that this function is fallible because not all io-errors are
            /// http-related errors.
            pub fn http_error_code(err: &IoError) -> Option<ErrorCode> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 40]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                    extern "C" {
                        #[link_name = "http-error-code"]
                        fn wit_import(_: i32, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import((err).handle() as i32, ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                let v64 = match l2 {
                                    0 => ErrorCode::DnsTimeout,
                                    1 => {
                                        let e64 = {
                                            let l3 = i32::from(*ptr0.add(16).cast::<u8>());
                                            let l7 = i32::from(*ptr0.add(28).cast::<u8>());

                                            DnsErrorPayload {
                                                rcode: match l3 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l4 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l5 = *ptr0.add(24).cast::<usize>();
                                                            let len6 = l5;
                                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                                l4.cast(),
                                                                len6,
                                                                len6,
                                                            );

                                                            _rt::string_lift(bytes6)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                info_code: match l7 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l8 = i32::from(
                                                                *ptr0.add(30).cast::<u16>(),
                                                            );

                                                            l8 as u16
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        ErrorCode::DnsError(e64)
                                    }
                                    2 => ErrorCode::DestinationNotFound,
                                    3 => ErrorCode::DestinationUnavailable,
                                    4 => ErrorCode::DestinationIpProhibited,
                                    5 => ErrorCode::DestinationIpUnroutable,
                                    6 => ErrorCode::ConnectionRefused,
                                    7 => ErrorCode::ConnectionTerminated,
                                    8 => ErrorCode::ConnectionTimeout,
                                    9 => ErrorCode::ConnectionReadTimeout,
                                    10 => ErrorCode::ConnectionWriteTimeout,
                                    11 => ErrorCode::ConnectionLimitReached,
                                    12 => ErrorCode::TlsProtocolError,
                                    13 => ErrorCode::TlsCertificateError,
                                    14 => {
                                        let e64 = {
                                            let l9 = i32::from(*ptr0.add(16).cast::<u8>());
                                            let l11 = i32::from(*ptr0.add(20).cast::<u8>());

                                            TlsAlertReceivedPayload {
                                                alert_id: match l9 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l10 = i32::from(
                                                                *ptr0.add(17).cast::<u8>(),
                                                            );

                                                            l10 as u8
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                alert_message: match l11 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l12 =
                                                                *ptr0.add(24).cast::<*mut u8>();
                                                            let l13 = *ptr0.add(28).cast::<usize>();
                                                            let len14 = l13;
                                                            let bytes14 = _rt::Vec::from_raw_parts(
                                                                l12.cast(),
                                                                len14,
                                                                len14,
                                                            );

                                                            _rt::string_lift(bytes14)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        ErrorCode::TlsAlertReceived(e64)
                                    }
                                    15 => ErrorCode::HttpRequestDenied,
                                    16 => ErrorCode::HttpRequestLengthRequired,
                                    17 => {
                                        let e64 = {
                                            let l15 = i32::from(*ptr0.add(16).cast::<u8>());

                                            match l15 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l16 = *ptr0.add(24).cast::<i64>();

                                                        l16 as u64
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        ErrorCode::HttpRequestBodySize(e64)
                                    }
                                    18 => ErrorCode::HttpRequestMethodInvalid,
                                    19 => ErrorCode::HttpRequestUriInvalid,
                                    20 => ErrorCode::HttpRequestUriTooLong,
                                    21 => {
                                        let e64 = {
                                            let l17 = i32::from(*ptr0.add(16).cast::<u8>());

                                            match l17 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l18 = *ptr0.add(20).cast::<i32>();

                                                        l18 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        ErrorCode::HttpRequestHeaderSectionSize(e64)
                                    }
                                    22 => {
                                        let e64 = {
                                            let l19 = i32::from(*ptr0.add(16).cast::<u8>());

                                            match l19 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l20 =
                                                            i32::from(*ptr0.add(20).cast::<u8>());
                                                        let l24 =
                                                            i32::from(*ptr0.add(32).cast::<u8>());

                                                        FieldSizePayload {
                                                            field_name: match l20 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l21 = *ptr0
                                                                            .add(24)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l22 = *ptr0
                                                                            .add(28)
                                                                            .cast::<usize>();
                                                                        let len23 = l22;
                                                                        let bytes23 = _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                                                        _rt::string_lift(bytes23)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => {
                                                                    _rt::invalid_enum_discriminant()
                                                                }
                                                            },
                                                            field_size: match l24 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l25 = *ptr0
                                                                            .add(36)
                                                                            .cast::<i32>();

                                                                        l25 as u32
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => {
                                                                    _rt::invalid_enum_discriminant()
                                                                }
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        ErrorCode::HttpRequestHeaderSize(e64)
                                    }
                                    23 => {
                                        let e64 = {
                                            let l26 = i32::from(*ptr0.add(16).cast::<u8>());

                                            match l26 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l27 = *ptr0.add(20).cast::<i32>();

                                                        l27 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        ErrorCode::HttpRequestTrailerSectionSize(e64)
                                    }
                                    24 => {
                                        let e64 = {
                                            let l28 = i32::from(*ptr0.add(16).cast::<u8>());
                                            let l32 = i32::from(*ptr0.add(28).cast::<u8>());

                                            FieldSizePayload {
                                                field_name: match l28 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l29 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l30 = *ptr0.add(24).cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );

                                                            _rt::string_lift(bytes31)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                field_size: match l32 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l33 = *ptr0.add(32).cast::<i32>();

                                                            l33 as u32
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        ErrorCode::HttpRequestTrailerSize(e64)
                                    }
                                    25 => ErrorCode::HttpResponseIncomplete,
                                    26 => {
                                        let e64 = {
                                            let l34 = i32::from(*ptr0.add(16).cast::<u8>());

                                            match l34 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l35 = *ptr0.add(20).cast::<i32>();

                                                        l35 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        ErrorCode::HttpResponseHeaderSectionSize(e64)
                                    }
                                    27 => {
                                        let e64 = {
                                            let l36 = i32::from(*ptr0.add(16).cast::<u8>());
                                            let l40 = i32::from(*ptr0.add(28).cast::<u8>());

                                            FieldSizePayload {
                                                field_name: match l36 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l37 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l38 = *ptr0.add(24).cast::<usize>();
                                                            let len39 = l38;
                                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                                l37.cast(),
                                                                len39,
                                                                len39,
                                                            );

                                                            _rt::string_lift(bytes39)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                field_size: match l40 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l41 = *ptr0.add(32).cast::<i32>();

                                                            l41 as u32
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        ErrorCode::HttpResponseHeaderSize(e64)
                                    }
                                    28 => {
                                        let e64 = {
                                            let l42 = i32::from(*ptr0.add(16).cast::<u8>());

                                            match l42 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l43 = *ptr0.add(24).cast::<i64>();

                                                        l43 as u64
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        ErrorCode::HttpResponseBodySize(e64)
                                    }
                                    29 => {
                                        let e64 = {
                                            let l44 = i32::from(*ptr0.add(16).cast::<u8>());

                                            match l44 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l45 = *ptr0.add(20).cast::<i32>();

                                                        l45 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        ErrorCode::HttpResponseTrailerSectionSize(e64)
                                    }
                                    30 => {
                                        let e64 = {
                                            let l46 = i32::from(*ptr0.add(16).cast::<u8>());
                                            let l50 = i32::from(*ptr0.add(28).cast::<u8>());

                                            FieldSizePayload {
                                                field_name: match l46 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l47 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l48 = *ptr0.add(24).cast::<usize>();
                                                            let len49 = l48;
                                                            let bytes49 = _rt::Vec::from_raw_parts(
                                                                l47.cast(),
                                                                len49,
                                                                len49,
                                                            );

                                                            _rt::string_lift(bytes49)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                field_size: match l50 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l51 = *ptr0.add(32).cast::<i32>();

                                                            l51 as u32
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        ErrorCode::HttpResponseTrailerSize(e64)
                                    }
                                    31 => {
                                        let e64 = {
                                            let l52 = i32::from(*ptr0.add(16).cast::<u8>());

                                            match l52 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l53 = *ptr0.add(20).cast::<*mut u8>();
                                                        let l54 = *ptr0.add(24).cast::<usize>();
                                                        let len55 = l54;
                                                        let bytes55 = _rt::Vec::from_raw_parts(
                                                            l53.cast(),
                                                            len55,
                                                            len55,
                                                        );

                                                        _rt::string_lift(bytes55)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        ErrorCode::HttpResponseTransferCoding(e64)
                                    }
                                    32 => {
                                        let e64 = {
                                            let l56 = i32::from(*ptr0.add(16).cast::<u8>());

                                            match l56 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l57 = *ptr0.add(20).cast::<*mut u8>();
                                                        let l58 = *ptr0.add(24).cast::<usize>();
                                                        let len59 = l58;
                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                            l57.cast(),
                                                            len59,
                                                            len59,
                                                        );

                                                        _rt::string_lift(bytes59)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        ErrorCode::HttpResponseContentCoding(e64)
                                    }
                                    33 => ErrorCode::HttpResponseTimeout,
                                    34 => ErrorCode::HttpUpgradeFailed,
                                    35 => ErrorCode::HttpProtocolError,
                                    36 => ErrorCode::LoopDetected,
                                    37 => ErrorCode::ConfigurationError,
                                    n => {
                                        debug_assert_eq!(n, 38, "invalid enum discriminant");
                                        let e64 = {
                                            let l60 = i32::from(*ptr0.add(16).cast::<u8>());

                                            match l60 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l61 = *ptr0.add(20).cast::<*mut u8>();
                                                        let l62 = *ptr0.add(24).cast::<usize>();
                                                        let len63 = l62;
                                                        let bytes63 = _rt::Vec::from_raw_parts(
                                                            l61.cast(),
                                                            len63,
                                                            len63,
                                                        );

                                                        _rt::string_lift(bytes63)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        ErrorCode::InternalError(e64)
                                    }
                                };

                                v64
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            impl Fields {
                #[allow(unused_unsafe, clippy::all)]
                /// Construct an empty HTTP Fields.
                ///
                /// The resulting `fields` is mutable.
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[constructor]fields"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Fields::from_handle(ret as u32)
                    }
                }
            }
            impl Fields {
                #[allow(unused_unsafe, clippy::all)]
                /// Construct an HTTP Fields.
                ///
                /// The resulting `fields` is mutable.
                ///
                /// The list represents each key-value pair in the Fields. Keys
                /// which have multiple values are represented by multiple entries in this
                /// list with the same key.
                ///
                /// The tuple is a pair of the field key, represented as a string, and
                /// Value, represented as a list of bytes. In a valid Fields, all keys
                /// and values are valid UTF-8 strings. However, values are not always
                /// well-formed, so they are represented as a raw list of bytes.
                ///
                /// An error result will be returned if any header or value was
                /// syntactically invalid, or if a header was forbidden.
                pub fn from_list(
                    entries: &[(FieldKey, FieldValue)],
                ) -> Result<Fields, HeaderError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let vec3 = entries;
                        let len3 = vec3.len();
                        let layout3 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 16, 4);
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 16);
                            {
                                let (t0_0, t0_1) = e;
                                let vec1 = t0_0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(4).cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = t0_1;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(12).cast::<usize>() = len2;
                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[static]fields.from-list"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(result3, len3, ptr4);
                        let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        match l5 {
                            0 => {
                                let e = {
                                    let l6 = *ptr4.add(4).cast::<i32>();

                                    Fields::from_handle(l6 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l7 = i32::from(*ptr4.add(4).cast::<u8>());
                                    let v8 = match l7 {
                                        0 => HeaderError::InvalidSyntax,
                                        1 => HeaderError::Forbidden,
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            HeaderError::Immutable
                                        }
                                    };

                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Fields {
                #[allow(unused_unsafe, clippy::all)]
                /// Get all of the values corresponding to a key. If the key is not present
                /// in this `fields`, an empty list is returned. However, if the key is
                /// present but empty, this is represented by a list with one or more
                /// empty field-values present.
                pub fn get(&self, name: &FieldKey) -> _rt::Vec<FieldValue> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]fields.get"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = *ptr1.add(0).cast::<*mut u8>();
                        let l3 = *ptr1.add(4).cast::<usize>();
                        let base7 = l2;
                        let len7 = l3;
                        let mut result7 = _rt::Vec::with_capacity(len7);
                        for i in 0..len7 {
                            let base = base7.add(i * 8);
                            let e7 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base.add(4).cast::<usize>();
                                let len6 = l5;

                                _rt::Vec::from_raw_parts(l4.cast(), len6, len6)
                            };
                            result7.push(e7);
                        }
                        _rt::cabi_dealloc(base7, len7 * 8, 4);
                        result7
                    }
                }
            }
            impl Fields {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns `true` when the key is present in this `fields`. If the key is
                /// syntactically invalid, `false` is returned.
                pub fn has(&self, name: &FieldKey) -> bool {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]fields.has"]
                            fn wit_import(_: i32, _: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Fields {
                #[allow(unused_unsafe, clippy::all)]
                /// Set all of the values for a key. Clears any existing values for that
                /// key, if they have been set.
                ///
                /// Fails with `header-error.immutable` if the `fields` are immutable.
                pub fn set(
                    &self,
                    name: &FieldKey,
                    value: &[FieldValue],
                ) -> Result<(), HeaderError> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec2 = value;
                        let len2 = vec2.len();
                        let layout2 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec2.len() * 8, 4);
                        let result2 = if layout2.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout2);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec2.into_iter().enumerate() {
                            let base = result2.add(i * 8);
                            {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(4).cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                            }
                        }
                        let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]fields.set"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result2,
                            len2,
                            ptr3,
                        );
                        let l4 = i32::from(*ptr3.add(0).cast::<u8>());
                        if layout2.size() != 0 {
                            _rt::alloc::dealloc(result2.cast(), layout2);
                        }
                        match l4 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr3.add(1).cast::<u8>());
                                    let v6 = match l5 {
                                        0 => HeaderError::InvalidSyntax,
                                        1 => HeaderError::Forbidden,
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            HeaderError::Immutable
                                        }
                                    };

                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Fields {
                #[allow(unused_unsafe, clippy::all)]
                /// Delete all values for a key. Does nothing if no values for the key
                /// exist.
                ///
                /// Fails with `header-error.immutable` if the `fields` are immutable.
                pub fn delete(&self, name: &FieldKey) -> Result<(), HeaderError> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]fields.delete"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(1).cast::<u8>());
                                    let v4 = match l3 {
                                        0 => HeaderError::InvalidSyntax,
                                        1 => HeaderError::Forbidden,
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            HeaderError::Immutable
                                        }
                                    };

                                    v4
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Fields {
                #[allow(unused_unsafe, clippy::all)]
                /// Append a value for a key. Does not change or delete any existing
                /// values for that key.
                ///
                /// Fails with `header-error.immutable` if the `fields` are immutable.
                pub fn append(
                    &self,
                    name: &FieldKey,
                    value: &FieldValue,
                ) -> Result<(), HeaderError> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = value;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]fields.append"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr2.add(1).cast::<u8>());
                                    let v5 = match l4 {
                                        0 => HeaderError::InvalidSyntax,
                                        1 => HeaderError::Forbidden,
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            HeaderError::Immutable
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Fields {
                #[allow(unused_unsafe, clippy::all)]
                /// Retrieve the full set of keys and values in the Fields. Like the
                /// constructor, the list represents each key-value pair.
                ///
                /// The outer list represents each key-value pair in the Fields. Keys
                /// which have multiple values are represented by multiple entries in this
                /// list with the same key.
                pub fn entries(&self) -> _rt::Vec<(FieldKey, FieldValue)> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]fields.entries"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base9 = l1;
                        let len9 = l2;
                        let mut result9 = _rt::Vec::with_capacity(len9);
                        for i in 0..len9 {
                            let base = base9.add(i * 16);
                            let e9 = {
                                let l3 = *base.add(0).cast::<*mut u8>();
                                let l4 = *base.add(4).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                                let l6 = *base.add(8).cast::<*mut u8>();
                                let l7 = *base.add(12).cast::<usize>();
                                let len8 = l7;

                                (
                                    _rt::string_lift(bytes5),
                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8),
                                )
                            };
                            result9.push(e9);
                        }
                        _rt::cabi_dealloc(base9, len9 * 16, 4);
                        result9
                    }
                }
            }
            impl Fields {
                #[allow(unused_unsafe, clippy::all)]
                /// Make a deep copy of the Fields. Equivelant in behavior to calling the
                /// `fields` constructor on the return value of `entries`. The resulting
                /// `fields` is mutable.
                pub fn clone(&self) -> Fields {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]fields.clone"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Fields::from_handle(ret as u32)
                    }
                }
            }
            impl IncomingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the method of the incoming request.
                pub fn method(&self) -> Method {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-request.method"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        let v5 = match l1 {
                            0 => Method::Get,
                            1 => Method::Head,
                            2 => Method::Post,
                            3 => Method::Put,
                            4 => Method::Delete,
                            5 => Method::Connect,
                            6 => Method::Options,
                            7 => Method::Trace,
                            8 => Method::Patch,
                            n => {
                                debug_assert_eq!(n, 9, "invalid enum discriminant");
                                let e5 = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Method::Other(e5)
                            }
                        };
                        v5
                    }
                }
            }
            impl IncomingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the path with query parameters from the request, as a string.
                pub fn path_with_query(&self) -> Option<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-request.path-with-query"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl IncomingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the protocol scheme from the request.
                pub fn scheme(&self) -> Option<Scheme> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-request.scheme"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v6 = match l2 {
                                        0 => Scheme::Http,
                                        1 => Scheme::Https,
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e6 = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Scheme::Other(e6)
                                        }
                                    };

                                    v6
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl IncomingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the authority from the request, if it was present.
                pub fn authority(&self) -> Option<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-request.authority"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl IncomingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the `headers` associated with the request.
                ///
                /// The returned `headers` resource is immutable: `set`, `append`, and
                /// `delete` operations will fail with `header-error.immutable`.
                ///
                /// The `headers` returned are a child resource: it must be dropped before
                /// the parent `incoming-request` is dropped. Dropping this
                /// `incoming-request` before all children are dropped will trap.
                pub fn headers(&self) -> Headers {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-request.headers"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Fields::from_handle(ret as u32)
                    }
                }
            }
            impl IncomingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Gives the `incoming-body` associated with this request. Will only
                /// return success at most once, and subsequent calls will return error.
                pub fn consume(&self) -> Result<IncomingBody, ()> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-request.consume"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    IncomingBody::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Construct a new `outgoing-request` with a default `method` of `GET`, and
                /// `none` values for `path-with-query`, `scheme`, and `authority`.
                ///
                /// * `headers` is the HTTP Headers for the Request.
                ///
                /// It is possible to construct, or manipulate with the accessor functions
                /// below, an `outgoing-request` with an invalid combination of `scheme`
                /// and `authority`, or `headers` which are not permitted to be sent.
                /// It is the obligation of the `outgoing-handler.handle` implementation
                /// to reject invalid constructions of `outgoing-request`.
                pub fn new(headers: Headers) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[constructor]outgoing-request"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((&headers).take_handle() as i32);
                        OutgoingRequest::from_handle(ret as u32)
                    }
                }
            }
            impl OutgoingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the resource corresponding to the outgoing Body for this
                /// Request.
                ///
                /// Returns success on the first call: the `outgoing-body` resource for
                /// this `outgoing-request` can be retrieved at most once. Subsequent
                /// calls will return error.
                pub fn body(&self) -> Result<OutgoingBody, ()> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-request.body"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    OutgoingBody::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the Method for the Request.
                pub fn method(&self) -> Method {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-request.method"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        let v5 = match l1 {
                            0 => Method::Get,
                            1 => Method::Head,
                            2 => Method::Post,
                            3 => Method::Put,
                            4 => Method::Delete,
                            5 => Method::Connect,
                            6 => Method::Options,
                            7 => Method::Trace,
                            8 => Method::Patch,
                            n => {
                                debug_assert_eq!(n, 9, "invalid enum discriminant");
                                let e5 = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Method::Other(e5)
                            }
                        };
                        v5
                    }
                }
            }
            impl OutgoingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Set the Method for the Request. Fails if the string present in a
                /// `method.other` argument is not a syntactically valid method.
                pub fn set_method(&self, method: &Method) -> Result<(), ()> {
                    unsafe {
                        let (result1_0, result1_1, result1_2) = match method {
                            Method::Get => (0i32, ::core::ptr::null_mut(), 0usize),
                            Method::Head => (1i32, ::core::ptr::null_mut(), 0usize),
                            Method::Post => (2i32, ::core::ptr::null_mut(), 0usize),
                            Method::Put => (3i32, ::core::ptr::null_mut(), 0usize),
                            Method::Delete => (4i32, ::core::ptr::null_mut(), 0usize),
                            Method::Connect => (5i32, ::core::ptr::null_mut(), 0usize),
                            Method::Options => (6i32, ::core::ptr::null_mut(), 0usize),
                            Method::Trace => (7i32, ::core::ptr::null_mut(), 0usize),
                            Method::Patch => (8i32, ::core::ptr::null_mut(), 0usize),
                            Method::Other(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();

                                (9i32, ptr0.cast_mut(), len0)
                            }
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-request.set-method"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret =
                            wit_import((self).handle() as i32, result1_0, result1_1, result1_2);
                        match ret {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the combination of the HTTP Path and Query for the Request.
                /// When `none`, this represents an empty Path and empty Query.
                pub fn path_with_query(&self) -> Option<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-request.path-with-query"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Set the combination of the HTTP Path and Query for the Request.
                /// When `none`, this represents an empty Path and empty Query. Fails is the
                /// string given is not a syntactically valid path and query uri component.
                pub fn set_path_with_query(&self, path_with_query: Option<&str>) -> Result<(), ()> {
                    unsafe {
                        let (result1_0, result1_1, result1_2) = match path_with_query {
                            Some(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();

                                (1i32, ptr0.cast_mut(), len0)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-request.set-path-with-query"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret =
                            wit_import((self).handle() as i32, result1_0, result1_1, result1_2);
                        match ret {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the HTTP Related Scheme for the Request. When `none`, the
                /// implementation may choose an appropriate default scheme.
                pub fn scheme(&self) -> Option<Scheme> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-request.scheme"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v6 = match l2 {
                                        0 => Scheme::Http,
                                        1 => Scheme::Https,
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e6 = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Scheme::Other(e6)
                                        }
                                    };

                                    v6
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Set the HTTP Related Scheme for the Request. When `none`, the
                /// implementation may choose an appropriate default scheme. Fails if the
                /// string given is not a syntactically valid uri scheme.
                pub fn set_scheme(&self, scheme: Option<&Scheme>) -> Result<(), ()> {
                    unsafe {
                        let (result2_0, result2_1, result2_2, result2_3) = match scheme {
                            Some(e) => {
                                let (result1_0, result1_1, result1_2) = match e {
                                    Scheme::Http => (0i32, ::core::ptr::null_mut(), 0usize),
                                    Scheme::Https => (1i32, ::core::ptr::null_mut(), 0usize),
                                    Scheme::Other(e) => {
                                        let vec0 = e;
                                        let ptr0 = vec0.as_ptr().cast::<u8>();
                                        let len0 = vec0.len();

                                        (2i32, ptr0.cast_mut(), len0)
                                    }
                                };

                                (1i32, result1_0, result1_1, result1_2)
                            }
                            None => (0i32, 0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-request.set-scheme"]
                            fn wit_import(_: i32, _: i32, _: i32, _: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            result2_0,
                            result2_1,
                            result2_2,
                            result2_3,
                        );
                        match ret {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the HTTP Authority for the Request. A value of `none` may be used
                /// with Related Schemes which do not require an Authority. The HTTP and
                /// HTTPS schemes always require an authority.
                pub fn authority(&self) -> Option<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-request.authority"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Set the HTTP Authority for the Request. A value of `none` may be used
                /// with Related Schemes which do not require an Authority. The HTTP and
                /// HTTPS schemes always require an authority. Fails if the string given is
                /// not a syntactically valid uri authority.
                pub fn set_authority(&self, authority: Option<&str>) -> Result<(), ()> {
                    unsafe {
                        let (result1_0, result1_1, result1_2) = match authority {
                            Some(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();

                                (1i32, ptr0.cast_mut(), len0)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-request.set-authority"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret =
                            wit_import((self).handle() as i32, result1_0, result1_1, result1_2);
                        match ret {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingRequest {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the headers associated with the Request.
                ///
                /// The returned `headers` resource is immutable: `set`, `append`, and
                /// `delete` operations will fail with `header-error.immutable`.
                ///
                /// This headers resource is a child: it must be dropped before the parent
                /// `outgoing-request` is dropped, or its ownership is transfered to
                /// another component by e.g. `outgoing-handler.handle`.
                pub fn headers(&self) -> Headers {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-request.headers"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Fields::from_handle(ret as u32)
                    }
                }
            }
            impl RequestOptions {
                #[allow(unused_unsafe, clippy::all)]
                /// Construct a default `request-options` value.
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[constructor]request-options"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        RequestOptions::from_handle(ret as u32)
                    }
                }
            }
            impl RequestOptions {
                #[allow(unused_unsafe, clippy::all)]
                /// The timeout for the initial connect to the HTTP Server.
                pub fn connect_timeout(&self) -> Option<Duration> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]request-options.connect-timeout"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl RequestOptions {
                #[allow(unused_unsafe, clippy::all)]
                /// Set the timeout for the initial connect to the HTTP Server. An error
                /// return value indicates that this timeout is not supported.
                pub fn set_connect_timeout(&self, duration: Option<Duration>) -> Result<(), ()> {
                    unsafe {
                        let (result0_0, result0_1) = match duration {
                            Some(e) => (1i32, _rt::as_i64(e)),
                            None => (0i32, 0i64),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]request-options.set-connect-timeout"]
                            fn wit_import(_: i32, _: i32, _: i64) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i64) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, result0_0, result0_1);
                        match ret {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl RequestOptions {
                #[allow(unused_unsafe, clippy::all)]
                /// The timeout for receiving the first byte of the Response body.
                pub fn first_byte_timeout(&self) -> Option<Duration> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]request-options.first-byte-timeout"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl RequestOptions {
                #[allow(unused_unsafe, clippy::all)]
                /// Set the timeout for receiving the first byte of the Response body. An
                /// error return value indicates that this timeout is not supported.
                pub fn set_first_byte_timeout(&self, duration: Option<Duration>) -> Result<(), ()> {
                    unsafe {
                        let (result0_0, result0_1) = match duration {
                            Some(e) => (1i32, _rt::as_i64(e)),
                            None => (0i32, 0i64),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]request-options.set-first-byte-timeout"]
                            fn wit_import(_: i32, _: i32, _: i64) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i64) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, result0_0, result0_1);
                        match ret {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl RequestOptions {
                #[allow(unused_unsafe, clippy::all)]
                /// The timeout for receiving subsequent chunks of bytes in the Response
                /// body stream.
                pub fn between_bytes_timeout(&self) -> Option<Duration> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]request-options.between-bytes-timeout"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl RequestOptions {
                #[allow(unused_unsafe, clippy::all)]
                /// Set the timeout for receiving subsequent chunks of bytes in the Response
                /// body stream. An error return value indicates that this timeout is not
                /// supported.
                pub fn set_between_bytes_timeout(
                    &self,
                    duration: Option<Duration>,
                ) -> Result<(), ()> {
                    unsafe {
                        let (result0_0, result0_1) = match duration {
                            Some(e) => (1i32, _rt::as_i64(e)),
                            None => (0i32, 0i64),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]request-options.set-between-bytes-timeout"]
                            fn wit_import(_: i32, _: i32, _: i64) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i64) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, result0_0, result0_1);
                        match ret {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ResponseOutparam {
                #[allow(unused_unsafe, clippy::all)]
                /// Set the value of the `response-outparam` to either send a response,
                /// or indicate an error.
                ///
                /// This method consumes the `response-outparam` to ensure that it is
                /// called at most once. If it is never called, the implementation
                /// will respond with an error.
                ///
                /// The user may provide an `error` to `response` to allow the
                /// implementation determine how to respond with an HTTP error response.
                pub fn set(param: ResponseOutparam, response: Result<OutgoingResponse, ErrorCode>) {
                    unsafe {
                        let (
                            result38_0,
                            result38_1,
                            result38_2,
                            result38_3,
                            result38_4,
                            result38_5,
                            result38_6,
                            result38_7,
                        ) = match &response {
                            Ok(e) => (
                                0i32,
                                (e).take_handle() as i32,
                                0i32,
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                                0i32,
                            ),
                            Err(e) => {
                                let (
                                    result37_0,
                                    result37_1,
                                    result37_2,
                                    result37_3,
                                    result37_4,
                                    result37_5,
                                    result37_6,
                                ) = match e {
                                    ErrorCode::DnsTimeout => (
                                        0i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::DnsError(e) => {
                                        let DnsErrorPayload {
                                            rcode: rcode0,
                                            info_code: info_code0,
                                        } = e;
                                        let (result2_0, result2_1, result2_2) = match rcode0 {
                                            Some(e) => {
                                                let vec1 = e;
                                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                                let len1 = vec1.len();

                                                (1i32, ptr1.cast_mut(), len1)
                                            }
                                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                                        };
                                        let (result3_0, result3_1) = match info_code0 {
                                            Some(e) => (1i32, _rt::as_i32(e)),
                                            None => (0i32, 0i32),
                                        };
                                        (
                                            1i32,
                                            result2_0,
                                            {
                                                let mut t =
                                                    ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(result2_1);
                                                t
                                            },
                                            result2_2 as *mut u8,
                                            result3_0 as *mut u8,
                                            result3_1 as usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::DestinationNotFound => (
                                        2i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::DestinationUnavailable => (
                                        3i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::DestinationIpProhibited => (
                                        4i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::DestinationIpUnroutable => (
                                        5i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::ConnectionRefused => (
                                        6i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::ConnectionTerminated => (
                                        7i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::ConnectionTimeout => (
                                        8i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::ConnectionReadTimeout => (
                                        9i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::ConnectionWriteTimeout => (
                                        10i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::ConnectionLimitReached => (
                                        11i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::TlsProtocolError => (
                                        12i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::TlsCertificateError => (
                                        13i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::TlsAlertReceived(e) => {
                                        let TlsAlertReceivedPayload {
                                            alert_id: alert_id4,
                                            alert_message: alert_message4,
                                        } = e;
                                        let (result5_0, result5_1) = match alert_id4 {
                                            Some(e) => (1i32, _rt::as_i32(e)),
                                            None => (0i32, 0i32),
                                        };
                                        let (result7_0, result7_1, result7_2) = match alert_message4
                                        {
                                            Some(e) => {
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();

                                                (1i32, ptr6.cast_mut(), len6)
                                            }
                                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                                        };
                                        (
                                            14i32,
                                            result5_0,
                                            ::core::mem::MaybeUninit::new(
                                                i64::from(result5_1) as u64
                                            ),
                                            result7_0 as *mut u8,
                                            result7_1,
                                            result7_2,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpRequestDenied => (
                                        15i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::HttpRequestLengthRequired => (
                                        16i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::HttpRequestBodySize(e) => {
                                        let (result8_0, result8_1) = match e {
                                            Some(e) => (1i32, _rt::as_i64(e)),
                                            None => (0i32, 0i64),
                                        };
                                        (
                                            17i32,
                                            result8_0,
                                            ::core::mem::MaybeUninit::new(result8_1 as u64),
                                            ::core::ptr::null_mut(),
                                            ::core::ptr::null_mut(),
                                            0usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpRequestMethodInvalid => (
                                        18i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::HttpRequestUriInvalid => (
                                        19i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::HttpRequestUriTooLong => (
                                        20i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::HttpRequestHeaderSectionSize(e) => {
                                        let (result9_0, result9_1) = match e {
                                            Some(e) => (1i32, _rt::as_i32(e)),
                                            None => (0i32, 0i32),
                                        };
                                        (
                                            21i32,
                                            result9_0,
                                            ::core::mem::MaybeUninit::new(
                                                i64::from(result9_1) as u64
                                            ),
                                            ::core::ptr::null_mut(),
                                            ::core::ptr::null_mut(),
                                            0usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpRequestHeaderSize(e) => {
                                        let (
                                            result14_0,
                                            result14_1,
                                            result14_2,
                                            result14_3,
                                            result14_4,
                                            result14_5,
                                        ) = match e {
                                            Some(e) => {
                                                let FieldSizePayload {
                                                    field_name: field_name10,
                                                    field_size: field_size10,
                                                } = e;
                                                let (result12_0, result12_1, result12_2) =
                                                    match field_name10 {
                                                        Some(e) => {
                                                            let vec11 = e;
                                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                                            let len11 = vec11.len();

                                                            (1i32, ptr11.cast_mut(), len11)
                                                        }
                                                        None => {
                                                            (0i32, ::core::ptr::null_mut(), 0usize)
                                                        }
                                                    };
                                                let (result13_0, result13_1) = match field_size10 {
                                                    Some(e) => (1i32, _rt::as_i32(e)),
                                                    None => (0i32, 0i32),
                                                };
                                                (
                                                    1i32, result12_0, result12_1, result12_2,
                                                    result13_0, result13_1,
                                                )
                                            }
                                            None => (
                                                0i32,
                                                0i32,
                                                ::core::ptr::null_mut(),
                                                0usize,
                                                0i32,
                                                0i32,
                                            ),
                                        };
                                        (
                                            22i32,
                                            result14_0,
                                            ::core::mem::MaybeUninit::new(
                                                i64::from(result14_1) as u64
                                            ),
                                            result14_2,
                                            result14_3 as *mut u8,
                                            result14_4 as usize,
                                            result14_5,
                                        )
                                    }
                                    ErrorCode::HttpRequestTrailerSectionSize(e) => {
                                        let (result15_0, result15_1) = match e {
                                            Some(e) => (1i32, _rt::as_i32(e)),
                                            None => (0i32, 0i32),
                                        };
                                        (
                                            23i32,
                                            result15_0,
                                            ::core::mem::MaybeUninit::new(
                                                i64::from(result15_1) as u64
                                            ),
                                            ::core::ptr::null_mut(),
                                            ::core::ptr::null_mut(),
                                            0usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpRequestTrailerSize(e) => {
                                        let FieldSizePayload {
                                            field_name: field_name16,
                                            field_size: field_size16,
                                        } = e;
                                        let (result18_0, result18_1, result18_2) =
                                            match field_name16 {
                                                Some(e) => {
                                                    let vec17 = e;
                                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                                    let len17 = vec17.len();

                                                    (1i32, ptr17.cast_mut(), len17)
                                                }
                                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                                            };
                                        let (result19_0, result19_1) = match field_size16 {
                                            Some(e) => (1i32, _rt::as_i32(e)),
                                            None => (0i32, 0i32),
                                        };
                                        (
                                            24i32,
                                            result18_0,
                                            {
                                                let mut t =
                                                    ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(result18_1);
                                                t
                                            },
                                            result18_2 as *mut u8,
                                            result19_0 as *mut u8,
                                            result19_1 as usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpResponseIncomplete => (
                                        25i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::HttpResponseHeaderSectionSize(e) => {
                                        let (result20_0, result20_1) = match e {
                                            Some(e) => (1i32, _rt::as_i32(e)),
                                            None => (0i32, 0i32),
                                        };
                                        (
                                            26i32,
                                            result20_0,
                                            ::core::mem::MaybeUninit::new(
                                                i64::from(result20_1) as u64
                                            ),
                                            ::core::ptr::null_mut(),
                                            ::core::ptr::null_mut(),
                                            0usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpResponseHeaderSize(e) => {
                                        let FieldSizePayload {
                                            field_name: field_name21,
                                            field_size: field_size21,
                                        } = e;
                                        let (result23_0, result23_1, result23_2) =
                                            match field_name21 {
                                                Some(e) => {
                                                    let vec22 = e;
                                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                                    let len22 = vec22.len();

                                                    (1i32, ptr22.cast_mut(), len22)
                                                }
                                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                                            };
                                        let (result24_0, result24_1) = match field_size21 {
                                            Some(e) => (1i32, _rt::as_i32(e)),
                                            None => (0i32, 0i32),
                                        };
                                        (
                                            27i32,
                                            result23_0,
                                            {
                                                let mut t =
                                                    ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(result23_1);
                                                t
                                            },
                                            result23_2 as *mut u8,
                                            result24_0 as *mut u8,
                                            result24_1 as usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpResponseBodySize(e) => {
                                        let (result25_0, result25_1) = match e {
                                            Some(e) => (1i32, _rt::as_i64(e)),
                                            None => (0i32, 0i64),
                                        };
                                        (
                                            28i32,
                                            result25_0,
                                            ::core::mem::MaybeUninit::new(result25_1 as u64),
                                            ::core::ptr::null_mut(),
                                            ::core::ptr::null_mut(),
                                            0usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpResponseTrailerSectionSize(e) => {
                                        let (result26_0, result26_1) = match e {
                                            Some(e) => (1i32, _rt::as_i32(e)),
                                            None => (0i32, 0i32),
                                        };
                                        (
                                            29i32,
                                            result26_0,
                                            ::core::mem::MaybeUninit::new(
                                                i64::from(result26_1) as u64
                                            ),
                                            ::core::ptr::null_mut(),
                                            ::core::ptr::null_mut(),
                                            0usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpResponseTrailerSize(e) => {
                                        let FieldSizePayload {
                                            field_name: field_name27,
                                            field_size: field_size27,
                                        } = e;
                                        let (result29_0, result29_1, result29_2) =
                                            match field_name27 {
                                                Some(e) => {
                                                    let vec28 = e;
                                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                                    let len28 = vec28.len();

                                                    (1i32, ptr28.cast_mut(), len28)
                                                }
                                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                                            };
                                        let (result30_0, result30_1) = match field_size27 {
                                            Some(e) => (1i32, _rt::as_i32(e)),
                                            None => (0i32, 0i32),
                                        };
                                        (
                                            30i32,
                                            result29_0,
                                            {
                                                let mut t =
                                                    ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(result29_1);
                                                t
                                            },
                                            result29_2 as *mut u8,
                                            result30_0 as *mut u8,
                                            result30_1 as usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpResponseTransferCoding(e) => {
                                        let (result32_0, result32_1, result32_2) = match e {
                                            Some(e) => {
                                                let vec31 = e;
                                                let ptr31 = vec31.as_ptr().cast::<u8>();
                                                let len31 = vec31.len();

                                                (1i32, ptr31.cast_mut(), len31)
                                            }
                                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                                        };
                                        (
                                            31i32,
                                            result32_0,
                                            {
                                                let mut t =
                                                    ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(result32_1);
                                                t
                                            },
                                            result32_2 as *mut u8,
                                            ::core::ptr::null_mut(),
                                            0usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpResponseContentCoding(e) => {
                                        let (result34_0, result34_1, result34_2) = match e {
                                            Some(e) => {
                                                let vec33 = e;
                                                let ptr33 = vec33.as_ptr().cast::<u8>();
                                                let len33 = vec33.len();

                                                (1i32, ptr33.cast_mut(), len33)
                                            }
                                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                                        };
                                        (
                                            32i32,
                                            result34_0,
                                            {
                                                let mut t =
                                                    ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(result34_1);
                                                t
                                            },
                                            result34_2 as *mut u8,
                                            ::core::ptr::null_mut(),
                                            0usize,
                                            0i32,
                                        )
                                    }
                                    ErrorCode::HttpResponseTimeout => (
                                        33i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::HttpUpgradeFailed => (
                                        34i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::HttpProtocolError => (
                                        35i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::LoopDetected => (
                                        36i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::ConfigurationError => (
                                        37i32,
                                        0i32,
                                        ::core::mem::MaybeUninit::<u64>::zeroed(),
                                        ::core::ptr::null_mut(),
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                    ),
                                    ErrorCode::InternalError(e) => {
                                        let (result36_0, result36_1, result36_2) = match e {
                                            Some(e) => {
                                                let vec35 = e;
                                                let ptr35 = vec35.as_ptr().cast::<u8>();
                                                let len35 = vec35.len();

                                                (1i32, ptr35.cast_mut(), len35)
                                            }
                                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                                        };
                                        (
                                            38i32,
                                            result36_0,
                                            {
                                                let mut t =
                                                    ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(result36_1);
                                                t
                                            },
                                            result36_2 as *mut u8,
                                            ::core::ptr::null_mut(),
                                            0usize,
                                            0i32,
                                        )
                                    }
                                };

                                (
                                    1i32, result37_0, result37_1, result37_2, result37_3,
                                    result37_4, result37_5, result37_6,
                                )
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[static]response-outparam.set"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: *mut u8,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: *mut u8,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (&param).take_handle() as i32,
                            result38_0,
                            result38_1,
                            result38_2,
                            result38_3,
                            result38_4,
                            result38_5,
                            result38_6,
                            result38_7,
                        );
                    }
                }
            }
            impl IncomingResponse {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the status code from the incoming response.
                pub fn status(&self) -> StatusCode {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-response.status"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u16
                    }
                }
            }
            impl IncomingResponse {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the headers from the incoming response.
                ///
                /// The returned `headers` resource is immutable: `set`, `append`, and
                /// `delete` operations will fail with `header-error.immutable`.
                ///
                /// This headers resource is a child: it must be dropped before the parent
                /// `incoming-response` is dropped.
                pub fn headers(&self) -> Headers {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-response.headers"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Fields::from_handle(ret as u32)
                    }
                }
            }
            impl IncomingResponse {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the incoming body. May be called at most once. Returns error
                /// if called additional times.
                pub fn consume(&self) -> Result<IncomingBody, ()> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-response.consume"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    IncomingBody::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl IncomingBody {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the contents of the body, as a stream of bytes.
                ///
                /// Returns success on first call: the stream representing the contents
                /// can be retrieved at most once. Subsequent calls will return error.
                ///
                /// The returned `input-stream` resource is a child: it must be dropped
                /// before the parent `incoming-body` is dropped, or consumed by
                /// `incoming-body.finish`.
                ///
                /// This invariant ensures that the implementation can determine whether
                /// the user is consuming the contents of the body, waiting on the
                /// `future-trailers` to be ready, or neither. This allows for network
                /// backpressure is to be applied when the user is consuming the body,
                /// and for that backpressure to not inhibit delivery of the trailers if
                /// the user does not read the entire body.
                pub fn stream(&self) -> Result<InputStream, ()> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-body.stream"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::io::streams::InputStream::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl IncomingBody {
                #[allow(unused_unsafe, clippy::all)]
                /// Takes ownership of `incoming-body`, and returns a `future-trailers`.
                /// This function will trap if the `input-stream` child is still alive.
                pub fn finish(this: IncomingBody) -> FutureTrailers {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[static]incoming-body.finish"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((&this).take_handle() as i32);
                        FutureTrailers::from_handle(ret as u32)
                    }
                }
            }
            impl FutureTrailers {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns a pollable which becomes ready when either the trailers have
                /// been received, or an error has occured. When this pollable is ready,
                /// the `get` method will return `some`.
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]future-trailers.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureTrailers {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the contents of the trailers, or an error which occured,
                /// once the future is ready.
                ///
                /// The outer `option` represents future readiness. Users can wait on this
                /// `option` to become `some` using the `subscribe` method.
                ///
                /// The outer `result` is used to retrieve the trailers or error at most
                /// once. It will be success on the first call in which the outer option
                /// is `some`, and error on subsequent calls.
                ///
                /// The inner `result` represents that either the HTTP Request or Response
                /// body, as well as any trailers, were received successfully, or that an
                /// error occured receiving them. The optional `trailers` indicates whether
                /// or not trailers were present in the body.
                ///
                /// When some `trailers` are returned by this method, the `trailers`
                /// resource is immutable, and a child. Use of the `set`, `append`, or
                /// `delete` methods will return an error, and the resource must be
                /// dropped before the parent `future-trailers` is dropped.
                pub fn get(&self) -> Option<Result<Result<Option<Trailers>, ErrorCode>, ()>> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 56]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 56]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]future-trailers.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = i32::from(*ptr0.add(16).cast::<u8>());

                                                match l3 {
                                                    0 => {
                                                        let e = {
                                                            let l4 = i32::from(
                                                                *ptr0.add(24).cast::<u8>(),
                                                            );

                                                            match l4 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l5 = *ptr0
                                                                            .add(28)
                                                                            .cast::<i32>();

                                                                        Fields::from_handle(
                                                                            l5 as u32,
                                                                        )
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => {
                                                                    _rt::invalid_enum_discriminant()
                                                                }
                                                            }
                                                        };
                                                        Ok(e)
                                                    }
                                                    1 => {
                                                        let e = {
                                                            let l6 = i32::from(
                                                                *ptr0.add(24).cast::<u8>(),
                                                            );
                                                            let v68 = match l6 {
                                                              0 => {
                                                                ErrorCode::DnsTimeout
                                                              }
                                                              1 => {
                                                                let e68 = {
                                                                  let l7 = i32::from(*ptr0.add(32).cast::<u8>());
                                                                  let l11 = i32::from(*ptr0.add(44).cast::<u8>());

                                                                  DnsErrorPayload{
                                                                    rcode: match l7 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l8 = *ptr0.add(36).cast::<*mut u8>();
                                                                          let l9 = *ptr0.add(40).cast::<usize>();
                                                                          let len10 = l9;
                                                                          let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                                                                          _rt::string_lift(bytes10)
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    info_code: match l11 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l12 = i32::from(*ptr0.add(46).cast::<u16>());

                                                                          l12 as u16
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                  }
                                                                };
                                                                ErrorCode::DnsError(e68)
                                                              }
                                                              2 => {
                                                                ErrorCode::DestinationNotFound
                                                              }
                                                              3 => {
                                                                ErrorCode::DestinationUnavailable
                                                              }
                                                              4 => {
                                                                ErrorCode::DestinationIpProhibited
                                                              }
                                                              5 => {
                                                                ErrorCode::DestinationIpUnroutable
                                                              }
                                                              6 => {
                                                                ErrorCode::ConnectionRefused
                                                              }
                                                              7 => {
                                                                ErrorCode::ConnectionTerminated
                                                              }
                                                              8 => {
                                                                ErrorCode::ConnectionTimeout
                                                              }
                                                              9 => {
                                                                ErrorCode::ConnectionReadTimeout
                                                              }
                                                              10 => {
                                                                ErrorCode::ConnectionWriteTimeout
                                                              }
                                                              11 => {
                                                                ErrorCode::ConnectionLimitReached
                                                              }
                                                              12 => {
                                                                ErrorCode::TlsProtocolError
                                                              }
                                                              13 => {
                                                                ErrorCode::TlsCertificateError
                                                              }
                                                              14 => {
                                                                let e68 = {
                                                                  let l13 = i32::from(*ptr0.add(32).cast::<u8>());
                                                                  let l15 = i32::from(*ptr0.add(36).cast::<u8>());

                                                                  TlsAlertReceivedPayload{
                                                                    alert_id: match l13 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l14 = i32::from(*ptr0.add(33).cast::<u8>());

                                                                          l14 as u8
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    alert_message: match l15 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l16 = *ptr0.add(40).cast::<*mut u8>();
                                                                          let l17 = *ptr0.add(44).cast::<usize>();
                                                                          let len18 = l17;
                                                                          let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                                                          _rt::string_lift(bytes18)
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                  }
                                                                };
                                                                ErrorCode::TlsAlertReceived(e68)
                                                              }
                                                              15 => {
                                                                ErrorCode::HttpRequestDenied
                                                              }
                                                              16 => {
                                                                ErrorCode::HttpRequestLengthRequired
                                                              }
                                                              17 => {
                                                                let e68 = {
                                                                  let l19 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l19 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l20 = *ptr0.add(40).cast::<i64>();

                                                                        l20 as u64
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpRequestBodySize(e68)
                                                              }
                                                              18 => {
                                                                ErrorCode::HttpRequestMethodInvalid
                                                              }
                                                              19 => {
                                                                ErrorCode::HttpRequestUriInvalid
                                                              }
                                                              20 => {
                                                                ErrorCode::HttpRequestUriTooLong
                                                              }
                                                              21 => {
                                                                let e68 = {
                                                                  let l21 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l21 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l22 = *ptr0.add(36).cast::<i32>();

                                                                        l22 as u32
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpRequestHeaderSectionSize(e68)
                                                              }
                                                              22 => {
                                                                let e68 = {
                                                                  let l23 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l23 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l24 = i32::from(*ptr0.add(36).cast::<u8>());
                                                                        let l28 = i32::from(*ptr0.add(48).cast::<u8>());

                                                                        FieldSizePayload{
                                                                          field_name: match l24 {
                                                                            0 => None,
                                                                            1 => {
                                                                              let e = {
                                                                                let l25 = *ptr0.add(40).cast::<*mut u8>();
                                                                                let l26 = *ptr0.add(44).cast::<usize>();
                                                                                let len27 = l26;
                                                                                let bytes27 = _rt::Vec::from_raw_parts(l25.cast(), len27, len27);

                                                                                _rt::string_lift(bytes27)
                                                                              };
                                                                              Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                          },
                                                                          field_size: match l28 {
                                                                            0 => None,
                                                                            1 => {
                                                                              let e = {
                                                                                let l29 = *ptr0.add(52).cast::<i32>();

                                                                                l29 as u32
                                                                              };
                                                                              Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                          },
                                                                        }
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpRequestHeaderSize(e68)
                                                              }
                                                              23 => {
                                                                let e68 = {
                                                                  let l30 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l30 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l31 = *ptr0.add(36).cast::<i32>();

                                                                        l31 as u32
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpRequestTrailerSectionSize(e68)
                                                              }
                                                              24 => {
                                                                let e68 = {
                                                                  let l32 = i32::from(*ptr0.add(32).cast::<u8>());
                                                                  let l36 = i32::from(*ptr0.add(44).cast::<u8>());

                                                                  FieldSizePayload{
                                                                    field_name: match l32 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l33 = *ptr0.add(36).cast::<*mut u8>();
                                                                          let l34 = *ptr0.add(40).cast::<usize>();
                                                                          let len35 = l34;
                                                                          let bytes35 = _rt::Vec::from_raw_parts(l33.cast(), len35, len35);

                                                                          _rt::string_lift(bytes35)
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    field_size: match l36 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l37 = *ptr0.add(48).cast::<i32>();

                                                                          l37 as u32
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                  }
                                                                };
                                                                ErrorCode::HttpRequestTrailerSize(e68)
                                                              }
                                                              25 => {
                                                                ErrorCode::HttpResponseIncomplete
                                                              }
                                                              26 => {
                                                                let e68 = {
                                                                  let l38 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l38 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l39 = *ptr0.add(36).cast::<i32>();

                                                                        l39 as u32
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseHeaderSectionSize(e68)
                                                              }
                                                              27 => {
                                                                let e68 = {
                                                                  let l40 = i32::from(*ptr0.add(32).cast::<u8>());
                                                                  let l44 = i32::from(*ptr0.add(44).cast::<u8>());

                                                                  FieldSizePayload{
                                                                    field_name: match l40 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l41 = *ptr0.add(36).cast::<*mut u8>();
                                                                          let l42 = *ptr0.add(40).cast::<usize>();
                                                                          let len43 = l42;
                                                                          let bytes43 = _rt::Vec::from_raw_parts(l41.cast(), len43, len43);

                                                                          _rt::string_lift(bytes43)
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    field_size: match l44 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l45 = *ptr0.add(48).cast::<i32>();

                                                                          l45 as u32
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseHeaderSize(e68)
                                                              }
                                                              28 => {
                                                                let e68 = {
                                                                  let l46 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l46 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l47 = *ptr0.add(40).cast::<i64>();

                                                                        l47 as u64
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseBodySize(e68)
                                                              }
                                                              29 => {
                                                                let e68 = {
                                                                  let l48 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l48 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l49 = *ptr0.add(36).cast::<i32>();

                                                                        l49 as u32
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseTrailerSectionSize(e68)
                                                              }
                                                              30 => {
                                                                let e68 = {
                                                                  let l50 = i32::from(*ptr0.add(32).cast::<u8>());
                                                                  let l54 = i32::from(*ptr0.add(44).cast::<u8>());

                                                                  FieldSizePayload{
                                                                    field_name: match l50 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l51 = *ptr0.add(36).cast::<*mut u8>();
                                                                          let l52 = *ptr0.add(40).cast::<usize>();
                                                                          let len53 = l52;
                                                                          let bytes53 = _rt::Vec::from_raw_parts(l51.cast(), len53, len53);

                                                                          _rt::string_lift(bytes53)
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    field_size: match l54 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l55 = *ptr0.add(48).cast::<i32>();

                                                                          l55 as u32
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseTrailerSize(e68)
                                                              }
                                                              31 => {
                                                                let e68 = {
                                                                  let l56 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l56 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l57 = *ptr0.add(36).cast::<*mut u8>();
                                                                        let l58 = *ptr0.add(40).cast::<usize>();
                                                                        let len59 = l58;
                                                                        let bytes59 = _rt::Vec::from_raw_parts(l57.cast(), len59, len59);

                                                                        _rt::string_lift(bytes59)
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseTransferCoding(e68)
                                                              }
                                                              32 => {
                                                                let e68 = {
                                                                  let l60 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l60 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l61 = *ptr0.add(36).cast::<*mut u8>();
                                                                        let l62 = *ptr0.add(40).cast::<usize>();
                                                                        let len63 = l62;
                                                                        let bytes63 = _rt::Vec::from_raw_parts(l61.cast(), len63, len63);

                                                                        _rt::string_lift(bytes63)
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseContentCoding(e68)
                                                              }
                                                              33 => {
                                                                ErrorCode::HttpResponseTimeout
                                                              }
                                                              34 => {
                                                                ErrorCode::HttpUpgradeFailed
                                                              }
                                                              35 => {
                                                                ErrorCode::HttpProtocolError
                                                              }
                                                              36 => {
                                                                ErrorCode::LoopDetected
                                                              }
                                                              37 => {
                                                                ErrorCode::ConfigurationError
                                                              }
                                                              n => {
                                                                debug_assert_eq!(n, 38, "invalid enum discriminant");
                                                                let e68 = {
                                                                  let l64 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l64 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l65 = *ptr0.add(36).cast::<*mut u8>();
                                                                        let l66 = *ptr0.add(40).cast::<usize>();
                                                                        let len67 = l66;
                                                                        let bytes67 = _rt::Vec::from_raw_parts(l65.cast(), len67, len67);

                                                                        _rt::string_lift(bytes67)
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::InternalError(e68)
                                                              }
                                                            };

                                                            v68
                                                        };
                                                        Err(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = ();
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingResponse {
                #[allow(unused_unsafe, clippy::all)]
                /// Construct an `outgoing-response`, with a default `status-code` of `200`.
                /// If a different `status-code` is needed, it must be set via the
                /// `set-status-code` method.
                ///
                /// * `headers` is the HTTP Headers for the Response.
                pub fn new(headers: Headers) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[constructor]outgoing-response"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((&headers).take_handle() as i32);
                        OutgoingResponse::from_handle(ret as u32)
                    }
                }
            }
            impl OutgoingResponse {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the HTTP Status Code for the Response.
                pub fn status_code(&self) -> StatusCode {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-response.status-code"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u16
                    }
                }
            }
            impl OutgoingResponse {
                #[allow(unused_unsafe, clippy::all)]
                /// Set the HTTP Status Code for the Response. Fails if the status-code
                /// given is not a valid http status code.
                pub fn set_status_code(&self, status_code: StatusCode) -> Result<(), ()> {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-response.set-status-code"]
                            fn wit_import(_: i32, _: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, _rt::as_i32(status_code));
                        match ret {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingResponse {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the headers associated with the Request.
                ///
                /// The returned `headers` resource is immutable: `set`, `append`, and
                /// `delete` operations will fail with `header-error.immutable`.
                ///
                /// This headers resource is a child: it must be dropped before the parent
                /// `outgoing-request` is dropped, or its ownership is transfered to
                /// another component by e.g. `outgoing-handler.handle`.
                pub fn headers(&self) -> Headers {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-response.headers"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Fields::from_handle(ret as u32)
                    }
                }
            }
            impl OutgoingResponse {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the resource corresponding to the outgoing Body for this Response.
                ///
                /// Returns success on the first call: the `outgoing-body` resource for
                /// this `outgoing-response` can be retrieved at most once. Subsequent
                /// calls will return error.
                pub fn body(&self) -> Result<OutgoingBody, ()> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-response.body"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    OutgoingBody::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingBody {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns a stream for writing the body contents.
                ///
                /// The returned `output-stream` is a child resource: it must be dropped
                /// before the parent `outgoing-body` resource is dropped (or finished),
                /// otherwise the `outgoing-body` drop or `finish` will trap.
                ///
                /// Returns success on the first call: the `output-stream` resource for
                /// this `outgoing-body` may be retrieved at most once. Subsequent calls
                /// will return error.
                pub fn write(&self) -> Result<OutputStream, ()> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-body.write"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::io::streams::OutputStream::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingBody {
                #[allow(unused_unsafe, clippy::all)]
                /// Finalize an outgoing body, optionally providing trailers. This must be
                /// called to signal that the response is complete. If the `outgoing-body`
                /// is dropped without calling `outgoing-body.finalize`, the implementation
                /// should treat the body as corrupted.
                ///
                /// Fails if the body's `outgoing-request` or `outgoing-response` was
                /// constructed with a Content-Length header, and the contents written
                /// to the body (via `write`) does not match the value given in the
                /// Content-Length.
                pub fn finish(
                    this: OutgoingBody,
                    trailers: Option<Trailers>,
                ) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 40]);
                        let (result0_0, result0_1) = match &trailers {
                            Some(e) => (1i32, (e).take_handle() as i32),
                            None => (0i32, 0i32),
                        };
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[static]outgoing-body.finish"]
                            fn wit_import(_: i32, _: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((&this).take_handle() as i32, result0_0, result0_1, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(8).cast::<u8>());
                                    let v65 = match l3 {
                                        0 => ErrorCode::DnsTimeout,
                                        1 => {
                                            let e65 = {
                                                let l4 = i32::from(*ptr1.add(16).cast::<u8>());
                                                let l8 = i32::from(*ptr1.add(28).cast::<u8>());

                                                DnsErrorPayload {
                                                    rcode: match l4 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l5 =
                                                                    *ptr1.add(20).cast::<*mut u8>();
                                                                let l6 =
                                                                    *ptr1.add(24).cast::<usize>();
                                                                let len7 = l6;
                                                                let bytes7 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l5.cast(),
                                                                        len7,
                                                                        len7,
                                                                    );

                                                                _rt::string_lift(bytes7)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    info_code: match l8 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l9 = i32::from(
                                                                    *ptr1.add(30).cast::<u16>(),
                                                                );

                                                                l9 as u16
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            ErrorCode::DnsError(e65)
                                        }
                                        2 => ErrorCode::DestinationNotFound,
                                        3 => ErrorCode::DestinationUnavailable,
                                        4 => ErrorCode::DestinationIpProhibited,
                                        5 => ErrorCode::DestinationIpUnroutable,
                                        6 => ErrorCode::ConnectionRefused,
                                        7 => ErrorCode::ConnectionTerminated,
                                        8 => ErrorCode::ConnectionTimeout,
                                        9 => ErrorCode::ConnectionReadTimeout,
                                        10 => ErrorCode::ConnectionWriteTimeout,
                                        11 => ErrorCode::ConnectionLimitReached,
                                        12 => ErrorCode::TlsProtocolError,
                                        13 => ErrorCode::TlsCertificateError,
                                        14 => {
                                            let e65 = {
                                                let l10 = i32::from(*ptr1.add(16).cast::<u8>());
                                                let l12 = i32::from(*ptr1.add(20).cast::<u8>());

                                                TlsAlertReceivedPayload {
                                                    alert_id: match l10 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l11 = i32::from(
                                                                    *ptr1.add(17).cast::<u8>(),
                                                                );

                                                                l11 as u8
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    alert_message: match l12 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l13 =
                                                                    *ptr1.add(24).cast::<*mut u8>();
                                                                let l14 =
                                                                    *ptr1.add(28).cast::<usize>();
                                                                let len15 = l14;
                                                                let bytes15 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l13.cast(),
                                                                        len15,
                                                                        len15,
                                                                    );

                                                                _rt::string_lift(bytes15)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            ErrorCode::TlsAlertReceived(e65)
                                        }
                                        15 => ErrorCode::HttpRequestDenied,
                                        16 => ErrorCode::HttpRequestLengthRequired,
                                        17 => {
                                            let e65 = {
                                                let l16 = i32::from(*ptr1.add(16).cast::<u8>());

                                                match l16 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l17 = *ptr1.add(24).cast::<i64>();

                                                            l17 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            ErrorCode::HttpRequestBodySize(e65)
                                        }
                                        18 => ErrorCode::HttpRequestMethodInvalid,
                                        19 => ErrorCode::HttpRequestUriInvalid,
                                        20 => ErrorCode::HttpRequestUriTooLong,
                                        21 => {
                                            let e65 = {
                                                let l18 = i32::from(*ptr1.add(16).cast::<u8>());

                                                match l18 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l19 = *ptr1.add(20).cast::<i32>();

                                                            l19 as u32
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            ErrorCode::HttpRequestHeaderSectionSize(e65)
                                        }
                                        22 => {
                                            let e65 = {
                                                let l20 = i32::from(*ptr1.add(16).cast::<u8>());

                                                match l20 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l21 = i32::from(
                                                                *ptr1.add(20).cast::<u8>(),
                                                            );
                                                            let l25 = i32::from(
                                                                *ptr1.add(32).cast::<u8>(),
                                                            );

                                                            FieldSizePayload{
                                                              field_name: match l21 {
                                                                0 => None,
                                                                1 => {
                                                                  let e = {
                                                                    let l22 = *ptr1.add(24).cast::<*mut u8>();
                                                                    let l23 = *ptr1.add(28).cast::<usize>();
                                                                    let len24 = l23;
                                                                    let bytes24 = _rt::Vec::from_raw_parts(l22.cast(), len24, len24);

                                                                    _rt::string_lift(bytes24)
                                                                  };
                                                                  Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                              },
                                                              field_size: match l25 {
                                                                0 => None,
                                                                1 => {
                                                                  let e = {
                                                                    let l26 = *ptr1.add(36).cast::<i32>();

                                                                    l26 as u32
                                                                  };
                                                                  Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                              },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            ErrorCode::HttpRequestHeaderSize(e65)
                                        }
                                        23 => {
                                            let e65 = {
                                                let l27 = i32::from(*ptr1.add(16).cast::<u8>());

                                                match l27 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l28 = *ptr1.add(20).cast::<i32>();

                                                            l28 as u32
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            ErrorCode::HttpRequestTrailerSectionSize(e65)
                                        }
                                        24 => {
                                            let e65 = {
                                                let l29 = i32::from(*ptr1.add(16).cast::<u8>());
                                                let l33 = i32::from(*ptr1.add(28).cast::<u8>());

                                                FieldSizePayload {
                                                    field_name: match l29 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l30 =
                                                                    *ptr1.add(20).cast::<*mut u8>();
                                                                let l31 =
                                                                    *ptr1.add(24).cast::<usize>();
                                                                let len32 = l31;
                                                                let bytes32 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l30.cast(),
                                                                        len32,
                                                                        len32,
                                                                    );

                                                                _rt::string_lift(bytes32)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    field_size: match l33 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l34 =
                                                                    *ptr1.add(32).cast::<i32>();

                                                                l34 as u32
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            ErrorCode::HttpRequestTrailerSize(e65)
                                        }
                                        25 => ErrorCode::HttpResponseIncomplete,
                                        26 => {
                                            let e65 = {
                                                let l35 = i32::from(*ptr1.add(16).cast::<u8>());

                                                match l35 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l36 = *ptr1.add(20).cast::<i32>();

                                                            l36 as u32
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            ErrorCode::HttpResponseHeaderSectionSize(e65)
                                        }
                                        27 => {
                                            let e65 = {
                                                let l37 = i32::from(*ptr1.add(16).cast::<u8>());
                                                let l41 = i32::from(*ptr1.add(28).cast::<u8>());

                                                FieldSizePayload {
                                                    field_name: match l37 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l38 =
                                                                    *ptr1.add(20).cast::<*mut u8>();
                                                                let l39 =
                                                                    *ptr1.add(24).cast::<usize>();
                                                                let len40 = l39;
                                                                let bytes40 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l38.cast(),
                                                                        len40,
                                                                        len40,
                                                                    );

                                                                _rt::string_lift(bytes40)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    field_size: match l41 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l42 =
                                                                    *ptr1.add(32).cast::<i32>();

                                                                l42 as u32
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            ErrorCode::HttpResponseHeaderSize(e65)
                                        }
                                        28 => {
                                            let e65 = {
                                                let l43 = i32::from(*ptr1.add(16).cast::<u8>());

                                                match l43 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l44 = *ptr1.add(24).cast::<i64>();

                                                            l44 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            ErrorCode::HttpResponseBodySize(e65)
                                        }
                                        29 => {
                                            let e65 = {
                                                let l45 = i32::from(*ptr1.add(16).cast::<u8>());

                                                match l45 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l46 = *ptr1.add(20).cast::<i32>();

                                                            l46 as u32
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            ErrorCode::HttpResponseTrailerSectionSize(e65)
                                        }
                                        30 => {
                                            let e65 = {
                                                let l47 = i32::from(*ptr1.add(16).cast::<u8>());
                                                let l51 = i32::from(*ptr1.add(28).cast::<u8>());

                                                FieldSizePayload {
                                                    field_name: match l47 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l48 =
                                                                    *ptr1.add(20).cast::<*mut u8>();
                                                                let l49 =
                                                                    *ptr1.add(24).cast::<usize>();
                                                                let len50 = l49;
                                                                let bytes50 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l48.cast(),
                                                                        len50,
                                                                        len50,
                                                                    );

                                                                _rt::string_lift(bytes50)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    field_size: match l51 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l52 =
                                                                    *ptr1.add(32).cast::<i32>();

                                                                l52 as u32
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            ErrorCode::HttpResponseTrailerSize(e65)
                                        }
                                        31 => {
                                            let e65 = {
                                                let l53 = i32::from(*ptr1.add(16).cast::<u8>());

                                                match l53 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l54 =
                                                                *ptr1.add(20).cast::<*mut u8>();
                                                            let l55 = *ptr1.add(24).cast::<usize>();
                                                            let len56 = l55;
                                                            let bytes56 = _rt::Vec::from_raw_parts(
                                                                l54.cast(),
                                                                len56,
                                                                len56,
                                                            );

                                                            _rt::string_lift(bytes56)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            ErrorCode::HttpResponseTransferCoding(e65)
                                        }
                                        32 => {
                                            let e65 = {
                                                let l57 = i32::from(*ptr1.add(16).cast::<u8>());

                                                match l57 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l58 =
                                                                *ptr1.add(20).cast::<*mut u8>();
                                                            let l59 = *ptr1.add(24).cast::<usize>();
                                                            let len60 = l59;
                                                            let bytes60 = _rt::Vec::from_raw_parts(
                                                                l58.cast(),
                                                                len60,
                                                                len60,
                                                            );

                                                            _rt::string_lift(bytes60)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            ErrorCode::HttpResponseContentCoding(e65)
                                        }
                                        33 => ErrorCode::HttpResponseTimeout,
                                        34 => ErrorCode::HttpUpgradeFailed,
                                        35 => ErrorCode::HttpProtocolError,
                                        36 => ErrorCode::LoopDetected,
                                        37 => ErrorCode::ConfigurationError,
                                        n => {
                                            debug_assert_eq!(n, 38, "invalid enum discriminant");
                                            let e65 = {
                                                let l61 = i32::from(*ptr1.add(16).cast::<u8>());

                                                match l61 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l62 =
                                                                *ptr1.add(20).cast::<*mut u8>();
                                                            let l63 = *ptr1.add(24).cast::<usize>();
                                                            let len64 = l63;
                                                            let bytes64 = _rt::Vec::from_raw_parts(
                                                                l62.cast(),
                                                                len64,
                                                                len64,
                                                            );

                                                            _rt::string_lift(bytes64)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            ErrorCode::InternalError(e65)
                                        }
                                    };

                                    v65
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureIncomingResponse {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns a pollable which becomes ready when either the Response has
                /// been received, or an error has occured. When this pollable is ready,
                /// the `get` method will return `some`.
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]future-incoming-response.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureIncomingResponse {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the incoming HTTP Response, or an error, once one is ready.
                ///
                /// The outer `option` represents future readiness. Users can wait on this
                /// `option` to become `some` using the `subscribe` method.
                ///
                /// The outer `result` is used to retrieve the response or error at most
                /// once. It will be success on the first call in which the outer option
                /// is `some`, and error on subsequent calls.
                ///
                /// The inner `result` represents that either the incoming HTTP Response
                /// status and headers have recieved successfully, or that an error
                /// occured. Errors may also occur while consuming the response body,
                /// but those will be reported by the `incoming-body` and its
                /// `output-stream` child.
                pub fn get(&self) -> Option<Result<Result<IncomingResponse, ErrorCode>, ()>> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 56]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 56]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:http/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]future-incoming-response.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = i32::from(*ptr0.add(16).cast::<u8>());

                                                match l3 {
                                                    0 => {
                                                        let e = {
                                                            let l4 = *ptr0.add(24).cast::<i32>();

                                                            IncomingResponse::from_handle(l4 as u32)
                                                        };
                                                        Ok(e)
                                                    }
                                                    1 => {
                                                        let e = {
                                                            let l5 = i32::from(
                                                                *ptr0.add(24).cast::<u8>(),
                                                            );
                                                            let v67 = match l5 {
                                                              0 => {
                                                                ErrorCode::DnsTimeout
                                                              }
                                                              1 => {
                                                                let e67 = {
                                                                  let l6 = i32::from(*ptr0.add(32).cast::<u8>());
                                                                  let l10 = i32::from(*ptr0.add(44).cast::<u8>());

                                                                  DnsErrorPayload{
                                                                    rcode: match l6 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l7 = *ptr0.add(36).cast::<*mut u8>();
                                                                          let l8 = *ptr0.add(40).cast::<usize>();
                                                                          let len9 = l8;
                                                                          let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                                                          _rt::string_lift(bytes9)
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    info_code: match l10 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l11 = i32::from(*ptr0.add(46).cast::<u16>());

                                                                          l11 as u16
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                  }
                                                                };
                                                                ErrorCode::DnsError(e67)
                                                              }
                                                              2 => {
                                                                ErrorCode::DestinationNotFound
                                                              }
                                                              3 => {
                                                                ErrorCode::DestinationUnavailable
                                                              }
                                                              4 => {
                                                                ErrorCode::DestinationIpProhibited
                                                              }
                                                              5 => {
                                                                ErrorCode::DestinationIpUnroutable
                                                              }
                                                              6 => {
                                                                ErrorCode::ConnectionRefused
                                                              }
                                                              7 => {
                                                                ErrorCode::ConnectionTerminated
                                                              }
                                                              8 => {
                                                                ErrorCode::ConnectionTimeout
                                                              }
                                                              9 => {
                                                                ErrorCode::ConnectionReadTimeout
                                                              }
                                                              10 => {
                                                                ErrorCode::ConnectionWriteTimeout
                                                              }
                                                              11 => {
                                                                ErrorCode::ConnectionLimitReached
                                                              }
                                                              12 => {
                                                                ErrorCode::TlsProtocolError
                                                              }
                                                              13 => {
                                                                ErrorCode::TlsCertificateError
                                                              }
                                                              14 => {
                                                                let e67 = {
                                                                  let l12 = i32::from(*ptr0.add(32).cast::<u8>());
                                                                  let l14 = i32::from(*ptr0.add(36).cast::<u8>());

                                                                  TlsAlertReceivedPayload{
                                                                    alert_id: match l12 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l13 = i32::from(*ptr0.add(33).cast::<u8>());

                                                                          l13 as u8
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    alert_message: match l14 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l15 = *ptr0.add(40).cast::<*mut u8>();
                                                                          let l16 = *ptr0.add(44).cast::<usize>();
                                                                          let len17 = l16;
                                                                          let bytes17 = _rt::Vec::from_raw_parts(l15.cast(), len17, len17);

                                                                          _rt::string_lift(bytes17)
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                  }
                                                                };
                                                                ErrorCode::TlsAlertReceived(e67)
                                                              }
                                                              15 => {
                                                                ErrorCode::HttpRequestDenied
                                                              }
                                                              16 => {
                                                                ErrorCode::HttpRequestLengthRequired
                                                              }
                                                              17 => {
                                                                let e67 = {
                                                                  let l18 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l18 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l19 = *ptr0.add(40).cast::<i64>();

                                                                        l19 as u64
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpRequestBodySize(e67)
                                                              }
                                                              18 => {
                                                                ErrorCode::HttpRequestMethodInvalid
                                                              }
                                                              19 => {
                                                                ErrorCode::HttpRequestUriInvalid
                                                              }
                                                              20 => {
                                                                ErrorCode::HttpRequestUriTooLong
                                                              }
                                                              21 => {
                                                                let e67 = {
                                                                  let l20 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l20 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l21 = *ptr0.add(36).cast::<i32>();

                                                                        l21 as u32
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpRequestHeaderSectionSize(e67)
                                                              }
                                                              22 => {
                                                                let e67 = {
                                                                  let l22 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l22 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l23 = i32::from(*ptr0.add(36).cast::<u8>());
                                                                        let l27 = i32::from(*ptr0.add(48).cast::<u8>());

                                                                        FieldSizePayload{
                                                                          field_name: match l23 {
                                                                            0 => None,
                                                                            1 => {
                                                                              let e = {
                                                                                let l24 = *ptr0.add(40).cast::<*mut u8>();
                                                                                let l25 = *ptr0.add(44).cast::<usize>();
                                                                                let len26 = l25;
                                                                                let bytes26 = _rt::Vec::from_raw_parts(l24.cast(), len26, len26);

                                                                                _rt::string_lift(bytes26)
                                                                              };
                                                                              Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                          },
                                                                          field_size: match l27 {
                                                                            0 => None,
                                                                            1 => {
                                                                              let e = {
                                                                                let l28 = *ptr0.add(52).cast::<i32>();

                                                                                l28 as u32
                                                                              };
                                                                              Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                          },
                                                                        }
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpRequestHeaderSize(e67)
                                                              }
                                                              23 => {
                                                                let e67 = {
                                                                  let l29 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l29 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l30 = *ptr0.add(36).cast::<i32>();

                                                                        l30 as u32
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpRequestTrailerSectionSize(e67)
                                                              }
                                                              24 => {
                                                                let e67 = {
                                                                  let l31 = i32::from(*ptr0.add(32).cast::<u8>());
                                                                  let l35 = i32::from(*ptr0.add(44).cast::<u8>());

                                                                  FieldSizePayload{
                                                                    field_name: match l31 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l32 = *ptr0.add(36).cast::<*mut u8>();
                                                                          let l33 = *ptr0.add(40).cast::<usize>();
                                                                          let len34 = l33;
                                                                          let bytes34 = _rt::Vec::from_raw_parts(l32.cast(), len34, len34);

                                                                          _rt::string_lift(bytes34)
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    field_size: match l35 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l36 = *ptr0.add(48).cast::<i32>();

                                                                          l36 as u32
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                  }
                                                                };
                                                                ErrorCode::HttpRequestTrailerSize(e67)
                                                              }
                                                              25 => {
                                                                ErrorCode::HttpResponseIncomplete
                                                              }
                                                              26 => {
                                                                let e67 = {
                                                                  let l37 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l37 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l38 = *ptr0.add(36).cast::<i32>();

                                                                        l38 as u32
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseHeaderSectionSize(e67)
                                                              }
                                                              27 => {
                                                                let e67 = {
                                                                  let l39 = i32::from(*ptr0.add(32).cast::<u8>());
                                                                  let l43 = i32::from(*ptr0.add(44).cast::<u8>());

                                                                  FieldSizePayload{
                                                                    field_name: match l39 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l40 = *ptr0.add(36).cast::<*mut u8>();
                                                                          let l41 = *ptr0.add(40).cast::<usize>();
                                                                          let len42 = l41;
                                                                          let bytes42 = _rt::Vec::from_raw_parts(l40.cast(), len42, len42);

                                                                          _rt::string_lift(bytes42)
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    field_size: match l43 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l44 = *ptr0.add(48).cast::<i32>();

                                                                          l44 as u32
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseHeaderSize(e67)
                                                              }
                                                              28 => {
                                                                let e67 = {
                                                                  let l45 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l45 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l46 = *ptr0.add(40).cast::<i64>();

                                                                        l46 as u64
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseBodySize(e67)
                                                              }
                                                              29 => {
                                                                let e67 = {
                                                                  let l47 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l47 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l48 = *ptr0.add(36).cast::<i32>();

                                                                        l48 as u32
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseTrailerSectionSize(e67)
                                                              }
                                                              30 => {
                                                                let e67 = {
                                                                  let l49 = i32::from(*ptr0.add(32).cast::<u8>());
                                                                  let l53 = i32::from(*ptr0.add(44).cast::<u8>());

                                                                  FieldSizePayload{
                                                                    field_name: match l49 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l50 = *ptr0.add(36).cast::<*mut u8>();
                                                                          let l51 = *ptr0.add(40).cast::<usize>();
                                                                          let len52 = l51;
                                                                          let bytes52 = _rt::Vec::from_raw_parts(l50.cast(), len52, len52);

                                                                          _rt::string_lift(bytes52)
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    field_size: match l53 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l54 = *ptr0.add(48).cast::<i32>();

                                                                          l54 as u32
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseTrailerSize(e67)
                                                              }
                                                              31 => {
                                                                let e67 = {
                                                                  let l55 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l55 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l56 = *ptr0.add(36).cast::<*mut u8>();
                                                                        let l57 = *ptr0.add(40).cast::<usize>();
                                                                        let len58 = l57;
                                                                        let bytes58 = _rt::Vec::from_raw_parts(l56.cast(), len58, len58);

                                                                        _rt::string_lift(bytes58)
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseTransferCoding(e67)
                                                              }
                                                              32 => {
                                                                let e67 = {
                                                                  let l59 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l59 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l60 = *ptr0.add(36).cast::<*mut u8>();
                                                                        let l61 = *ptr0.add(40).cast::<usize>();
                                                                        let len62 = l61;
                                                                        let bytes62 = _rt::Vec::from_raw_parts(l60.cast(), len62, len62);

                                                                        _rt::string_lift(bytes62)
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::HttpResponseContentCoding(e67)
                                                              }
                                                              33 => {
                                                                ErrorCode::HttpResponseTimeout
                                                              }
                                                              34 => {
                                                                ErrorCode::HttpUpgradeFailed
                                                              }
                                                              35 => {
                                                                ErrorCode::HttpProtocolError
                                                              }
                                                              36 => {
                                                                ErrorCode::LoopDetected
                                                              }
                                                              37 => {
                                                                ErrorCode::ConfigurationError
                                                              }
                                                              n => {
                                                                debug_assert_eq!(n, 38, "invalid enum discriminant");
                                                                let e67 = {
                                                                  let l63 = i32::from(*ptr0.add(32).cast::<u8>());

                                                                  match l63 {
                                                                    0 => None,
                                                                    1 => {
                                                                      let e = {
                                                                        let l64 = *ptr0.add(36).cast::<*mut u8>();
                                                                        let l65 = *ptr0.add(40).cast::<usize>();
                                                                        let len66 = l65;
                                                                        let bytes66 = _rt::Vec::from_raw_parts(l64.cast(), len66, len66);

                                                                        _rt::string_lift(bytes66)
                                                                      };
                                                                      Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                  }
                                                                };
                                                                ErrorCode::InternalError(e67)
                                                              }
                                                            };

                                                            v67
                                                        };
                                                        Err(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = ();
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod outgoing_handler {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type OutgoingRequest = super::super::super::wasi::http::types::OutgoingRequest;
            pub type RequestOptions = super::super::super::wasi::http::types::RequestOptions;
            pub type FutureIncomingResponse =
                super::super::super::wasi::http::types::FutureIncomingResponse;
            pub type ErrorCode = super::super::super::wasi::http::types::ErrorCode;
            #[allow(unused_unsafe, clippy::all)]
            /// This function is invoked with an outgoing HTTP Request, and it returns
            /// a resource `future-incoming-response` which represents an HTTP Response
            /// which may arrive in the future.
            ///
            /// The `options` argument accepts optional parameters for the HTTP
            /// protocol's transport layer.
            ///
            /// This function may return an error if the `outgoing-request` is invalid
            /// or not allowed to be made. Otherwise, protocol errors are reported
            /// through the `future-incoming-response`.
            pub fn handle(
                request: OutgoingRequest,
                options: Option<RequestOptions>,
            ) -> Result<FutureIncomingResponse, ErrorCode> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 40]);
                    let (result0_0, result0_1) = match &options {
                        Some(e) => (1i32, (e).take_handle() as i32),
                        None => (0i32, 0i32),
                    };
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:http/outgoing-handler@0.2.0")]
                    extern "C" {
                        #[link_name = "handle"]
                        fn wit_import(_: i32, _: i32, _: i32, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i32, _: i32, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import((&request).take_handle() as i32, result0_0, result0_1, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(8).cast::<i32>();

                                super::super::super::wasi::http::types::FutureIncomingResponse::from_handle(l3 as u32)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = i32::from(*ptr1.add(8).cast::<u8>());
                                use super::super::super::wasi::http::types::ErrorCode as V66;
                                let v66 = match l4 {
                                    0 => V66::DnsTimeout,
                                    1 => {
                                        let e66 = {
                                            let l5 = i32::from(*ptr1.add(16).cast::<u8>());
                                            let l9 = i32::from(*ptr1.add(28).cast::<u8>());

                                            super::super::super::wasi::http::types::DnsErrorPayload{
                                                      rcode: match l5 {
                                                        0 => None,
                                                        1 => {
                                                          let e = {
                                                            let l6 = *ptr1.add(20).cast::<*mut u8>();
                                                            let l7 = *ptr1.add(24).cast::<usize>();
                                                            let len8 = l7;
                                                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                            _rt::string_lift(bytes8)
                                                          };
                                                          Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                      },
                                                      info_code: match l9 {
                                                        0 => None,
                                                        1 => {
                                                          let e = {
                                                            let l10 = i32::from(*ptr1.add(30).cast::<u16>());

                                                            l10 as u16
                                                          };
                                                          Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                      },
                                                    }
                                        };
                                        V66::DnsError(e66)
                                    }
                                    2 => V66::DestinationNotFound,
                                    3 => V66::DestinationUnavailable,
                                    4 => V66::DestinationIpProhibited,
                                    5 => V66::DestinationIpUnroutable,
                                    6 => V66::ConnectionRefused,
                                    7 => V66::ConnectionTerminated,
                                    8 => V66::ConnectionTimeout,
                                    9 => V66::ConnectionReadTimeout,
                                    10 => V66::ConnectionWriteTimeout,
                                    11 => V66::ConnectionLimitReached,
                                    12 => V66::TlsProtocolError,
                                    13 => V66::TlsCertificateError,
                                    14 => {
                                        let e66 = {
                                            let l11 = i32::from(*ptr1.add(16).cast::<u8>());
                                            let l13 = i32::from(*ptr1.add(20).cast::<u8>());

                                            super::super::super::wasi::http::types::TlsAlertReceivedPayload{
                                                      alert_id: match l11 {
                                                        0 => None,
                                                        1 => {
                                                          let e = {
                                                            let l12 = i32::from(*ptr1.add(17).cast::<u8>());

                                                            l12 as u8
                                                          };
                                                          Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                      },
                                                      alert_message: match l13 {
                                                        0 => None,
                                                        1 => {
                                                          let e = {
                                                            let l14 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l15 = *ptr1.add(28).cast::<usize>();
                                                            let len16 = l15;
                                                            let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);

                                                            _rt::string_lift(bytes16)
                                                          };
                                                          Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                      },
                                                    }
                                        };
                                        V66::TlsAlertReceived(e66)
                                    }
                                    15 => V66::HttpRequestDenied,
                                    16 => V66::HttpRequestLengthRequired,
                                    17 => {
                                        let e66 = {
                                            let l17 = i32::from(*ptr1.add(16).cast::<u8>());

                                            match l17 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l18 = *ptr1.add(24).cast::<i64>();

                                                        l18 as u64
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        V66::HttpRequestBodySize(e66)
                                    }
                                    18 => V66::HttpRequestMethodInvalid,
                                    19 => V66::HttpRequestUriInvalid,
                                    20 => V66::HttpRequestUriTooLong,
                                    21 => {
                                        let e66 = {
                                            let l19 = i32::from(*ptr1.add(16).cast::<u8>());

                                            match l19 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l20 = *ptr1.add(20).cast::<i32>();

                                                        l20 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        V66::HttpRequestHeaderSectionSize(e66)
                                    }
                                    22 => {
                                        let e66 = {
                                            let l21 = i32::from(*ptr1.add(16).cast::<u8>());

                                            match l21 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l22 =
                                                            i32::from(*ptr1.add(20).cast::<u8>());
                                                        let l26 =
                                                            i32::from(*ptr1.add(32).cast::<u8>());

                                                        super::super::super::wasi::http::types::FieldSizePayload{
                                                            field_name: match l22 {
                                                              0 => None,
                                                              1 => {
                                                                let e = {
                                                                  let l23 = *ptr1.add(24).cast::<*mut u8>();
                                                                  let l24 = *ptr1.add(28).cast::<usize>();
                                                                  let len25 = l24;
                                                                  let bytes25 = _rt::Vec::from_raw_parts(l23.cast(), len25, len25);

                                                                  _rt::string_lift(bytes25)
                                                                };
                                                                Some(e)
                                                              }
                                                              _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            field_size: match l26 {
                                                              0 => None,
                                                              1 => {
                                                                let e = {
                                                                  let l27 = *ptr1.add(36).cast::<i32>();

                                                                  l27 as u32
                                                                };
                                                                Some(e)
                                                              }
                                                              _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                          }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        V66::HttpRequestHeaderSize(e66)
                                    }
                                    23 => {
                                        let e66 = {
                                            let l28 = i32::from(*ptr1.add(16).cast::<u8>());

                                            match l28 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l29 = *ptr1.add(20).cast::<i32>();

                                                        l29 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        V66::HttpRequestTrailerSectionSize(e66)
                                    }
                                    24 => {
                                        let e66 = {
                                            let l30 = i32::from(*ptr1.add(16).cast::<u8>());
                                            let l34 = i32::from(*ptr1.add(28).cast::<u8>());

                                            super::super::super::wasi::http::types::FieldSizePayload{
                                                      field_name: match l30 {
                                                        0 => None,
                                                        1 => {
                                                          let e = {
                                                            let l31 = *ptr1.add(20).cast::<*mut u8>();
                                                            let l32 = *ptr1.add(24).cast::<usize>();
                                                            let len33 = l32;
                                                            let bytes33 = _rt::Vec::from_raw_parts(l31.cast(), len33, len33);

                                                            _rt::string_lift(bytes33)
                                                          };
                                                          Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                      },
                                                      field_size: match l34 {
                                                        0 => None,
                                                        1 => {
                                                          let e = {
                                                            let l35 = *ptr1.add(32).cast::<i32>();

                                                            l35 as u32
                                                          };
                                                          Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                      },
                                                    }
                                        };
                                        V66::HttpRequestTrailerSize(e66)
                                    }
                                    25 => V66::HttpResponseIncomplete,
                                    26 => {
                                        let e66 = {
                                            let l36 = i32::from(*ptr1.add(16).cast::<u8>());

                                            match l36 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l37 = *ptr1.add(20).cast::<i32>();

                                                        l37 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        V66::HttpResponseHeaderSectionSize(e66)
                                    }
                                    27 => {
                                        let e66 = {
                                            let l38 = i32::from(*ptr1.add(16).cast::<u8>());
                                            let l42 = i32::from(*ptr1.add(28).cast::<u8>());

                                            super::super::super::wasi::http::types::FieldSizePayload{
                                                      field_name: match l38 {
                                                        0 => None,
                                                        1 => {
                                                          let e = {
                                                            let l39 = *ptr1.add(20).cast::<*mut u8>();
                                                            let l40 = *ptr1.add(24).cast::<usize>();
                                                            let len41 = l40;
                                                            let bytes41 = _rt::Vec::from_raw_parts(l39.cast(), len41, len41);

                                                            _rt::string_lift(bytes41)
                                                          };
                                                          Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                      },
                                                      field_size: match l42 {
                                                        0 => None,
                                                        1 => {
                                                          let e = {
                                                            let l43 = *ptr1.add(32).cast::<i32>();

                                                            l43 as u32
                                                          };
                                                          Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                      },
                                                    }
                                        };
                                        V66::HttpResponseHeaderSize(e66)
                                    }
                                    28 => {
                                        let e66 = {
                                            let l44 = i32::from(*ptr1.add(16).cast::<u8>());

                                            match l44 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l45 = *ptr1.add(24).cast::<i64>();

                                                        l45 as u64
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        V66::HttpResponseBodySize(e66)
                                    }
                                    29 => {
                                        let e66 = {
                                            let l46 = i32::from(*ptr1.add(16).cast::<u8>());

                                            match l46 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l47 = *ptr1.add(20).cast::<i32>();

                                                        l47 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        V66::HttpResponseTrailerSectionSize(e66)
                                    }
                                    30 => {
                                        let e66 = {
                                            let l48 = i32::from(*ptr1.add(16).cast::<u8>());
                                            let l52 = i32::from(*ptr1.add(28).cast::<u8>());

                                            super::super::super::wasi::http::types::FieldSizePayload{
                                                      field_name: match l48 {
                                                        0 => None,
                                                        1 => {
                                                          let e = {
                                                            let l49 = *ptr1.add(20).cast::<*mut u8>();
                                                            let l50 = *ptr1.add(24).cast::<usize>();
                                                            let len51 = l50;
                                                            let bytes51 = _rt::Vec::from_raw_parts(l49.cast(), len51, len51);

                                                            _rt::string_lift(bytes51)
                                                          };
                                                          Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                      },
                                                      field_size: match l52 {
                                                        0 => None,
                                                        1 => {
                                                          let e = {
                                                            let l53 = *ptr1.add(32).cast::<i32>();

                                                            l53 as u32
                                                          };
                                                          Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                      },
                                                    }
                                        };
                                        V66::HttpResponseTrailerSize(e66)
                                    }
                                    31 => {
                                        let e66 = {
                                            let l54 = i32::from(*ptr1.add(16).cast::<u8>());

                                            match l54 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l55 = *ptr1.add(20).cast::<*mut u8>();
                                                        let l56 = *ptr1.add(24).cast::<usize>();
                                                        let len57 = l56;
                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                            l55.cast(),
                                                            len57,
                                                            len57,
                                                        );

                                                        _rt::string_lift(bytes57)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        V66::HttpResponseTransferCoding(e66)
                                    }
                                    32 => {
                                        let e66 = {
                                            let l58 = i32::from(*ptr1.add(16).cast::<u8>());

                                            match l58 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l59 = *ptr1.add(20).cast::<*mut u8>();
                                                        let l60 = *ptr1.add(24).cast::<usize>();
                                                        let len61 = l60;
                                                        let bytes61 = _rt::Vec::from_raw_parts(
                                                            l59.cast(),
                                                            len61,
                                                            len61,
                                                        );

                                                        _rt::string_lift(bytes61)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        V66::HttpResponseContentCoding(e66)
                                    }
                                    33 => V66::HttpResponseTimeout,
                                    34 => V66::HttpUpgradeFailed,
                                    35 => V66::HttpProtocolError,
                                    36 => V66::LoopDetected,
                                    37 => V66::ConfigurationError,
                                    n => {
                                        debug_assert_eq!(n, 38, "invalid enum discriminant");
                                        let e66 = {
                                            let l62 = i32::from(*ptr1.add(16).cast::<u8>());

                                            match l62 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l63 = *ptr1.add(20).cast::<*mut u8>();
                                                        let l64 = *ptr1.add(24).cast::<usize>();
                                                        let len65 = l64;
                                                        let bytes65 = _rt::Vec::from_raw_parts(
                                                            l63.cast(),
                                                            len65,
                                                            len65,
                                                        );

                                                        _rt::string_lift(bytes65)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            }
                                        };
                                        V66::InternalError(e66)
                                    }
                                };

                                v66
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod io {
        #[allow(dead_code, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` epresents a single I/O event which may be ready, or not.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }

            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// If the list contains more elements than can be indexed with a `u32`
            /// value, this function traps.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being reaedy for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(vec0.len() * 4, 4);
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                    extern "C" {
                        #[link_name = "poll"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(result0, len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod error {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// A resource which represents some error information.
            ///
            /// The only method provided by this resource is `to-debug-string`,
            /// which provides some human-readable information about the error.
            ///
            /// In the `wasi:io` package, this resource is returned through the
            /// `wasi:io/streams/stream-error` type.
            ///
            /// To provide more specific error information, other interfaces may
            /// provide functions to further "downcast" this error into more specific
            /// error information. For example, `error`s returned in streams derived
            /// from filesystem types to be described using the filesystem's own
            /// error-code type, using the function
            /// `wasi:filesystem/types/filesystem-error-code`, which takes a parameter
            /// `borrow<error>` and returns
            /// `option<wasi:filesystem/types/error-code>`.
            ///
            /// The set of functions which can "downcast" an `error` into a more
            /// concrete type is open.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Error {
                handle: _rt::Resource<Error>,
            }

            impl Error {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Error {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/error@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]error"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Error {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns a string that is suitable to assist humans in debugging
                /// this error.
                ///
                /// WARNING: The returned string should not be consumed mechanically!
                /// It may change across platforms, hosts, or other implementation
                /// details. Parsing this string is a major platform-compatibility
                /// hazard.
                pub fn to_debug_string(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/error@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]error.to-debug-string"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod streams {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Error = super::super::super::wasi::io::error::Error;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An error for input-stream and output-stream operations.
            pub enum StreamError {
                /// The last operation (a write or flush) failed before completion.
                ///
                /// More information is available in the `error` payload.
                LastOperationFailed(Error),
                /// The stream is closed: no more input will be accepted by the
                /// stream. A closed output-stream will return this error on all
                /// future operations.
                Closed,
            }
            impl ::core::fmt::Debug for StreamError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        StreamError::LastOperationFailed(e) => f
                            .debug_tuple("StreamError::LastOperationFailed")
                            .field(e)
                            .finish(),
                        StreamError::Closed => f.debug_tuple("StreamError::Closed").finish(),
                    }
                }
            }
            impl ::core::fmt::Display for StreamError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for StreamError {}
            /// An input bytestream.
            ///
            /// `input-stream`s are *non-blocking* to the extent practical on underlying
            /// platforms. I/O operations always return promptly; if fewer bytes are
            /// promptly available than requested, they return the number of bytes promptly
            /// available, which could even be zero. To wait for data to be available,
            /// use the `subscribe` function to obtain a `pollable` which can be polled
            /// for using `wasi:io/poll`.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct InputStream {
                handle: _rt::Resource<InputStream>,
            }

            impl InputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for InputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]input-stream"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// An output bytestream.
            ///
            /// `output-stream`s are *non-blocking* to the extent practical on
            /// underlying platforms. Except where specified otherwise, I/O operations also
            /// always return promptly, after the number of bytes that can be written
            /// promptly, which could even be zero. To wait for the stream to be ready to
            /// accept data, the `subscribe` function to obtain a `pollable` which can be
            /// polled for using `wasi:io/poll`.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct OutputStream {
                handle: _rt::Resource<OutputStream>,
            }

            impl OutputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for OutputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]output-stream"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Perform a non-blocking read from the stream.
                ///
                /// This function returns a list of bytes containing the read data,
                /// when successful. The returned list will contain up to `len` bytes;
                /// it may return fewer than requested, but not more. The list is
                /// empty when no bytes are available for reading at this time. The
                /// pollable given by `subscribe` will be ready when more bytes are
                /// available.
                ///
                /// This function fails with a `stream-error` when the operation
                /// encounters an error, giving `last-operation-failed`, or when the
                /// stream is closed, giving `closed`.
                ///
                /// When the caller gives a `len` of 0, it represents a request to
                /// read 0 bytes. If the stream is still open, this call should
                /// succeed and return an empty list, or otherwise fail with `closed`.
                ///
                /// The `len` parameter is a `u64`, which could represent a list of u8 which
                /// is not possible to allocate in wasm32, or not desirable to allocate as
                /// as a return value by the callee. The callee may return a list of bytes
                /// less than `len` in size while more bytes are available for reading.
                pub fn read(&self, len: u64) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]input-stream.read"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;

                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v7 = match l5 {
                                        0 => {
                                            let e7 = {
                                                let l6 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l6 as u32)
                                            };
                                            StreamError::LastOperationFailed(e7)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v7
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Read bytes from a stream, after blocking until at least one byte can
                /// be read. Except for blocking, behavior is identical to `read`.
                pub fn blocking_read(&self, len: u64) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]input-stream.blocking-read"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;

                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v7 = match l5 {
                                        0 => {
                                            let e7 = {
                                                let l6 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l6 as u32)
                                            };
                                            StreamError::LastOperationFailed(e7)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v7
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Skip bytes from a stream. Returns number of bytes skipped.
                ///
                /// Behaves identical to `read`, except instead of returning a list
                /// of bytes, returns the number of bytes consumed from the stream.
                pub fn skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]input-stream.skip"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(12).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Skip bytes from a stream, after blocking until at least one byte
                /// can be skipped. Except for blocking behavior, identical to `skip`.
                pub fn blocking_skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]input-stream.blocking-skip"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(12).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a `pollable` which will resolve once either the specified stream
                /// has bytes available to read or the other end of the stream has been
                /// closed.
                /// The created `pollable` is a child resource of the `input-stream`.
                /// Implementations may trap if the `input-stream` is dropped before
                /// all derived `pollable`s created with this function are dropped.
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]input-stream.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Check readiness for writing. This function never blocks.
                ///
                /// Returns the number of bytes permitted for the next call to `write`,
                /// or an error. Calling `write` with more bytes than this function has
                /// permitted will trap.
                ///
                /// When this function returns 0 bytes, the `subscribe` pollable will
                /// become ready when this function will report at least 1 byte, or an
                /// error.
                pub fn check_write(&self) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.check-write"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(12).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Perform a write. This function never blocks.
                ///
                /// Precondition: check-write gave permit of Ok(n) and contents has a
                /// length of less than or equal to n. Otherwise, this function will trap.
                ///
                /// returns Err(closed) without writing if the stream has closed since
                /// the last call to check-write provided a permit.
                pub fn write(&self, contents: &[u8]) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.write"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr1.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Perform a write of up to 4096 bytes, and then flush the stream. Block
                /// until all of these operations are complete, or an error occurs.
                ///
                /// This is a convenience wrapper around the use of `check-write`,
                /// `subscribe`, `write`, and `flush`, and is implemented with the
                /// following pseudo-code:
                ///
                /// ```text
                /// let pollable = this.subscribe();
                /// while !contents.is_empty() {
                /// // Wait for the stream to become writable
                /// poll-one(pollable);
                /// let Ok(n) = this.check-write(); // eliding error handling
                /// let len = min(n, contents.len());
                /// let (chunk, rest) = contents.split_at(len);
                /// this.write(chunk  );            // eliding error handling
                /// contents = rest;
                /// }
                /// this.flush();
                /// // Wait for completion of `flush`
                /// poll-one(pollable);
                /// // Check for any errors that arose during `flush`
                /// let _ = this.check-write();         // eliding error handling
                /// ```
                pub fn blocking_write_and_flush(&self, contents: &[u8]) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-and-flush"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr1.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Request to flush buffered output. This function never blocks.
                ///
                /// This tells the output-stream that the caller intends any buffered
                /// output to be flushed. the output which is expected to be flushed
                /// is all that has been passed to `write` prior to this call.
                ///
                /// Upon calling this function, the `output-stream` will not accept any
                /// writes (`check-write` will return `ok(0)`) until the flush has
                /// completed. The `subscribe` pollable will become ready when the
                /// flush has completed and the stream can accept more writes.
                pub fn flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.flush"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v4 = match l2 {
                                        0 => {
                                            let e4 = {
                                                let l3 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                                            };
                                            StreamError::LastOperationFailed(e4)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v4
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Request to flush buffered output, and block until flush completes
                /// and stream is ready for writing again.
                pub fn blocking_flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.blocking-flush"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v4 = match l2 {
                                        0 => {
                                            let e4 = {
                                                let l3 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                                            };
                                            StreamError::LastOperationFailed(e4)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v4
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a `pollable` which will resolve once the output-stream
                /// is ready for more writing, or an error has occured. When this
                /// pollable is ready, `check-write` will return `ok(n)` with n>0, or an
                /// error.
                ///
                /// If the stream is closed, this pollable is always ready immediately.
                ///
                /// The created `pollable` is a child resource of the `output-stream`.
                /// Implementations may trap if the `output-stream` is dropped before
                /// all derived `pollable`s created with this function are dropped.
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Write zeroes to a stream.
                ///
                /// this should be used precisely like `write` with the exact same
                /// preconditions (must use check-write first), but instead of
                /// passing a list of bytes, you simply pass the number of zero-bytes
                /// that should be written.
                pub fn write_zeroes(&self, len: u64) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.write-zeroes"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v4 = match l2 {
                                        0 => {
                                            let e4 = {
                                                let l3 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                                            };
                                            StreamError::LastOperationFailed(e4)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v4
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Perform a write of up to 4096 zeroes, and then flush the stream.
                /// Block until all of these operations are complete, or an error
                /// occurs.
                ///
                /// This is a convenience wrapper around the use of `check-write`,
                /// `subscribe`, `write-zeroes`, and `flush`, and is implemented with
                /// the following pseudo-code:
                ///
                /// ```text
                /// let pollable = this.subscribe();
                /// while num_zeroes != 0 {
                /// // Wait for the stream to become writable
                /// poll-one(pollable);
                /// let Ok(n) = this.check-write(); // eliding error handling
                /// let len = min(n, num_zeroes);
                /// this.write-zeroes(len);         // eliding error handling
                /// num_zeroes -= len;
                /// }
                /// this.flush();
                /// // Wait for completion of `flush`
                /// poll-one(pollable);
                /// // Check for any errors that arose during `flush`
                /// let _ = this.check-write();         // eliding error handling
                /// ```
                pub fn blocking_write_zeroes_and_flush(&self, len: u64) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-zeroes-and-flush"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&len), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v4 = match l2 {
                                        0 => {
                                            let e4 = {
                                                let l3 = *ptr0.add(8).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                                            };
                                            StreamError::LastOperationFailed(e4)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v4
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Read from one stream and write to another.
                ///
                /// The behavior of splice is equivelant to:
                /// 1. calling `check-write` on the `output-stream`
                /// 2. calling `read` on the `input-stream` with the smaller of the
                /// `check-write` permitted length and the `len` provided to `splice`
                /// 3. calling `write` on the `output-stream` with that read data.
                ///
                /// Any error reported by the call to `check-write`, `read`, or
                /// `write` ends the splice and reports that error.
                ///
                /// This function returns the number of bytes transferred; it may be less
                /// than `len`.
                pub fn splice(&self, src: &InputStream, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.splice"]
                            fn wit_import(_: i32, _: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            (src).handle() as i32,
                            _rt::as_i64(&len),
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(12).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Read from one stream and write to another, with blocking.
                ///
                /// This is similar to `splice`, except that it blocks until the
                /// `output-stream` is ready for writing, and the `input-stream`
                /// is ready for reading, before performing the `splice`.
                pub fn blocking_splice(
                    &self,
                    src: &InputStream,
                    len: u64,
                ) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]output-stream.blocking-splice"]
                            fn wit_import(_: i32, _: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            (src).handle() as i32,
                            _rt::as_i64(&len),
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(12).cast::<i32>();

                                                super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod keyvalue {
        #[allow(dead_code, clippy::all)]
        pub mod wasi_keyvalue_error {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// An error resource type for keyvalue operations.
            ///
            /// Common errors:
            /// - Connectivity errors (e.g. network errors): when the client cannot establish
            /// a connection to the keyvalue service.
            /// - Authentication and Authorization errors: when the client fails to authenticate
            /// or does not have the required permissions to perform the operation.
            /// - Data errors: when the client sends incompatible or corrupted data.
            /// - Resource errors: when the system runs out of resources (e.g. memory).
            /// - Internal errors: unexpected errors on the server side.
            ///
            /// Currently, this provides only one function to return a string representation
            /// of the error. In the future, this will be extended to provide more information
            /// about the error.
            /// Soon: switch to `resource error { ... }`

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Error {
                handle: _rt::Resource<Error>,
            }

            impl Error {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Error {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:keyvalue/wasi-keyvalue-error@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]error"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Error {
                #[allow(unused_unsafe, clippy::all)]
                pub fn trace(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:keyvalue/wasi-keyvalue-error@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]error.trace"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type InputStream = super::super::super::wasi::io::streams::InputStream;
            pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
            pub type Error = super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error;
            /// A bucket is a collection of key-value pairs. Each key-value pair is stored
            /// as a entry in the bucket, and the bucket itself acts as a collection of all
            /// these entries.
            ///
            /// It is worth noting that the exact terminology for bucket in key-value stores
            /// can very depending on the specific implementation. For example,
            /// 1. Amazon DynamoDB calls a collection of key-value pairs a table
            /// 2. Redis has hashes, sets, and sorted sets as different types of collections
            /// 3. Cassandra calls a collection of key-value pairs a column family
            /// 4. MongoDB calls a collection of key-value pairs a collection
            /// 5. Riak calls a collection of key-value pairs a bucket
            /// 6. Memcached calls a collection of key-value pairs a slab
            /// 7. Azure Cosmos DB calls a collection of key-value pairs a container
            ///
            /// In this interface, we use the term `bucket` to refer to a collection of key-value
            /// Soon: switch to `resource bucket { ... }`

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Bucket {
                handle: _rt::Resource<Bucket>,
            }

            impl Bucket {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Bucket {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:keyvalue/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]bucket"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// A key is a unique identifier for a value in a bucket. The key is used to
            /// retrieve the value from the bucket.
            pub type Key = _rt::String;
            /// A value is the data stored in a key-value pair. The value can be of any type
            /// that can be represented in a byte array. It provides a way to write the value
            /// to the output-stream defined in the `wasi-io` interface.
            /// Soon: switch to `resource value { ... }`

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct OutgoingValue {
                handle: _rt::Resource<OutgoingValue>,
            }

            impl OutgoingValue {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for OutgoingValue {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:keyvalue/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]outgoing-value"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            pub type OutgoingValueBodyAsync = OutputStream;
            pub type OutgoingValueBodySync = _rt::Vec<u8>;
            /// A incoming-value is a wrapper around a value. It provides a way to read the value
            /// from the `input-stream` defined in the `wasi-io` interface.
            ///
            /// The incoming-value provides two ways to consume the value:
            /// 1. `incoming-value-consume-sync` consumes the value synchronously and returns the
            /// value as a `list<u8>`.
            /// 2. `incoming-value-consume-async` consumes the value asynchronously and returns the
            /// value as an `input-stream`.
            /// In addition, it provides a `incoming-value-size` function to get the size of the value.
            /// This is useful when the value is large and the caller wants to allocate a buffer of
            /// the right size to consume the value.
            /// Soon: switch to `resource incoming-value { ... }`

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct IncomingValue {
                handle: _rt::Resource<IncomingValue>,
            }

            impl IncomingValue {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for IncomingValue {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:keyvalue/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]incoming-value"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            pub type IncomingValueAsyncBody = InputStream;
            pub type IncomingValueSyncBody = _rt::Vec<u8>;
            impl Bucket {
                #[allow(unused_unsafe, clippy::all)]
                /// Opens a bucket with the given name.
                ///
                /// If any error occurs, including if the bucket does not exist, it returns an `Err(error)`.
                pub fn open_bucket(name: &str) -> Result<Bucket, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:keyvalue/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[static]bucket.open-bucket"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    Bucket::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = *ptr1.add(4).cast::<i32>();

                                    super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l4 as u32)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingValue {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new_outgoing_value() -> OutgoingValue {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:keyvalue/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[static]outgoing-value.new-outgoing-value"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        OutgoingValue::from_handle(ret as u32)
                    }
                }
            }
            impl OutgoingValue {
                #[allow(unused_unsafe, clippy::all)]
                /// Writes the value to the output-stream asynchronously.
                /// If any other error occurs, it returns an `Err(error)`.
                pub fn outgoing_value_write_body_async(
                    &self,
                ) -> Result<OutgoingValueBodyAsync, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:keyvalue/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-value.outgoing-value-write-body-async"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::io::streams::OutputStream::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l3 as u32)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl OutgoingValue {
                #[allow(unused_unsafe, clippy::all)]
                /// Writes the value to the output-stream synchronously.
                /// If any other error occurs, it returns an `Err(error)`.
                pub fn outgoing_value_write_body_sync(
                    &self,
                    value: &OutgoingValueBodySync,
                ) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:keyvalue/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]outgoing-value.outgoing-value-write-body-sync"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l3 as u32)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl IncomingValue {
                #[allow(unused_unsafe, clippy::all)]
                /// Consumes the value synchronously and returns the value as a list of bytes.
                /// If any other error occurs, it returns an `Err(error)`.
                pub fn incoming_value_consume_sync(&self) -> Result<IncomingValueSyncBody, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:keyvalue/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-value.incoming-value-consume-sync"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;

                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l5 as u32)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl IncomingValue {
                #[allow(unused_unsafe, clippy::all)]
                /// Consumes the value asynchronously and returns the value as an `input-stream`.
                /// If any other error occurs, it returns an `Err(error)`.
                pub fn incoming_value_consume_async(
                    &self,
                ) -> Result<IncomingValueAsyncBody, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:keyvalue/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-value.incoming-value-consume-async"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::io::streams::InputStream::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l3 as u32)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl IncomingValue {
                #[allow(unused_unsafe, clippy::all)]
                /// The size of the value in bytes.
                /// If the size is unknown or unavailable, this function returns an `Err(error)`.
                pub fn incoming_value_size(&self) -> Result<u64, Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:keyvalue/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]incoming-value.incoming-value-size"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i32>();

                                    super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l3 as u32)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod eventual_batch {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Bucket = super::super::super::wasi::keyvalue::types::Bucket;
            pub type Error = super::super::super::wasi::keyvalue::types::Error;
            pub type Key = super::super::super::wasi::keyvalue::types::Key;
            pub type IncomingValue = super::super::super::wasi::keyvalue::types::IncomingValue;
            pub type OutgoingValue = super::super::super::wasi::keyvalue::types::OutgoingValue;
            #[allow(unused_unsafe, clippy::all)]
            /// Get the values associated with the keys in the bucket. It returns a list of
            /// incoming-value that can be consumed to get the value associated with the key.
            ///
            /// If any of the keys do not exist in the bucket, it returns a `none` value for
            /// that key in the list.
            ///
            /// Note that the key-value pairs are guaranteed to be returned in the same order
            ///
            /// MAY show an out-of-date value if there are concurrent writes to the bucket.
            ///
            /// If any other error occurs, it returns an `Err(error)`.
            pub fn get_many(
                bucket: &Bucket,
                keys: &[Key],
            ) -> Result<_rt::Vec<Option<IncomingValue>>, Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec1 = keys;
                    let len1 = vec1.len();
                    let layout1 = _rt::alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
                    let result1 = if layout1.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout1);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec1.into_iter().enumerate() {
                        let base = result1.add(i * 8);
                        {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            *base.add(4).cast::<usize>() = len0;
                            *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                        }
                    }
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:keyvalue/eventual-batch@0.1.0")]
                    extern "C" {
                        #[link_name = "get-many"]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import((bucket).handle() as i32, result1, len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    if layout1.size() != 0 {
                        _rt::alloc::dealloc(result1.cast(), layout1);
                    }
                    match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr2.add(4).cast::<*mut u8>();
                                let l5 = *ptr2.add(8).cast::<usize>();
                                let base8 = l4;
                                let len8 = l5;
                                let mut result8 = _rt::Vec::with_capacity(len8);
                                for i in 0..len8 {
                                    let base = base8.add(i * 8);
                                    let e8 = {
                                        let l6 = i32::from(*base.add(0).cast::<u8>());

                                        match l6 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l7 = *base.add(4).cast::<i32>();

                                                    super::super::super::wasi::keyvalue::types::IncomingValue::from_handle(l7 as u32)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        }
                                    };
                                    result8.push(e8);
                                }
                                _rt::cabi_dealloc(base8, len8 * 8, 4);

                                result8
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr2.add(4).cast::<i32>();

                                super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l9 as u32)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get all the keys in the bucket. It returns a list of keys.
            ///
            /// Note that the keys are not guaranteed to be returned in any particular order.
            ///
            /// If the bucket is empty, it returns an empty list.
            ///
            /// MAY show an out-of-date list of keys if there are concurrent writes to the bucket.
            ///
            /// If any error occurs, it returns an `Err(error)`.
            pub fn keys(bucket: &Bucket) -> Result<_rt::Vec<Key>, Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:keyvalue/eventual-batch@0.1.0")]
                    extern "C" {
                        #[link_name = "keys"]
                        fn wit_import(_: i32, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import((bucket).handle() as i32, ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base7 = l2;
                                let len7 = l3;
                                let mut result7 = _rt::Vec::with_capacity(len7);
                                for i in 0..len7 {
                                    let base = base7.add(i * 8);
                                    let e7 = {
                                        let l4 = *base.add(0).cast::<*mut u8>();
                                        let l5 = *base.add(4).cast::<usize>();
                                        let len6 = l5;
                                        let bytes6 =
                                            _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                        _rt::string_lift(bytes6)
                                    };
                                    result7.push(e7);
                                }
                                _rt::cabi_dealloc(base7, len7 * 8, 4);

                                result7
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l8 = *ptr0.add(4).cast::<i32>();

                                super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l8 as u32)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Set the values associated with the keys in the bucket. If the key already
            /// exists in the bucket, it overwrites the value.
            ///
            /// Note that the key-value pairs are not guaranteed to be set in the order
            /// they are provided.
            ///
            /// If any of the keys do not exist in the bucket, it creates a new key-value pair.
            ///
            /// If any other error occurs, it returns an `Err(error)`. When an error occurs, it
            /// does not rollback the key-value pairs that were already set. Thus, this batch operation
            /// does not guarantee atomicity, implying that some key-value pairs could be
            /// set while others might fail.
            ///
            /// Other concurrent operations may also be able to see the partial results.
            pub fn set_many(
                bucket: &Bucket,
                key_values: &[(Key, &OutgoingValue)],
            ) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec2 = key_values;
                    let len2 = vec2.len();
                    let layout2 = _rt::alloc::Layout::from_size_align_unchecked(vec2.len() * 12, 4);
                    let result2 = if layout2.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout2);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec2.into_iter().enumerate() {
                        let base = result2.add(i * 12);
                        {
                            let (t0_0, t0_1) = e;
                            let vec1 = t0_0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base.add(4).cast::<usize>() = len1;
                            *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                            *base.add(8).cast::<i32>() = (t0_1).handle() as i32;
                        }
                    }
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:keyvalue/eventual-batch@0.1.0")]
                    extern "C" {
                        #[link_name = "set-many"]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import((bucket).handle() as i32, result2, len2, ptr3);
                    let l4 = i32::from(*ptr3.add(0).cast::<u8>());
                    if layout2.size() != 0 {
                        _rt::alloc::dealloc(result2.cast(), layout2);
                    }
                    match l4 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr3.add(4).cast::<i32>();

                                super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l5 as u32)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Delete the key-value pairs associated with the keys in the bucket.
            ///
            /// Note that the key-value pairs are not guaranteed to be deleted in the order
            /// they are provided.
            ///
            /// If any of the keys do not exist in the bucket, it skips the key.
            ///
            /// If any other error occurs, it returns an `Err(error)`. When an error occurs, it
            /// does not rollback the key-value pairs that were already deleted. Thus, this batch operation
            /// does not guarantee atomicity, implying that some key-value pairs could be
            /// deleted while others might fail.
            ///
            /// Other concurrent operations may also be able to see the partial results.
            pub fn delete_many(bucket: &Bucket, keys: &[Key]) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec1 = keys;
                    let len1 = vec1.len();
                    let layout1 = _rt::alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
                    let result1 = if layout1.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout1);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec1.into_iter().enumerate() {
                        let base = result1.add(i * 8);
                        {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            *base.add(4).cast::<usize>() = len0;
                            *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                        }
                    }
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:keyvalue/eventual-batch@0.1.0")]
                    extern "C" {
                        #[link_name = "delete-many"]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import((bucket).handle() as i32, result1, len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    if layout1.size() != 0 {
                        _rt::alloc::dealloc(result1.cast(), layout1);
                    }
                    match l3 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr2.add(4).cast::<i32>();

                                super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l4 as u32)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod eventual {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Bucket = super::super::super::wasi::keyvalue::types::Bucket;
            pub type Error = super::super::super::wasi::keyvalue::types::Error;
            pub type IncomingValue = super::super::super::wasi::keyvalue::types::IncomingValue;
            pub type Key = super::super::super::wasi::keyvalue::types::Key;
            pub type OutgoingValue = super::super::super::wasi::keyvalue::types::OutgoingValue;
            #[allow(unused_unsafe, clippy::all)]
            /// Get the value associated with the key in the bucket.
            ///
            /// The value is returned as an option. If the key-value pair exists in the
            /// bucket, it returns `Ok(value)`. If the key does not exist in the
            /// bucket, it returns `Ok(none)`.
            ///
            /// If any other error occurs, it returns an `Err(error)`.
            pub fn get(bucket: &Bucket, key: &Key) -> Result<Option<IncomingValue>, Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = key;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:keyvalue/eventual@0.1.0")]
                    extern "C" {
                        #[link_name = "get"]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import((bucket).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = i32::from(*ptr1.add(4).cast::<u8>());

                                match l3 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l4 = *ptr1.add(8).cast::<i32>();

                                            super::super::super::wasi::keyvalue::types::IncomingValue::from_handle(l4 as u32)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr1.add(4).cast::<i32>();

                                super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l5 as u32)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Set the value associated with the key in the bucket. If the key already
            /// exists in the bucket, it overwrites the value.
            ///
            /// If the key does not exist in the bucket, it creates a new key-value pair.
            ///
            /// If any other error occurs, it returns an `Err(error)`.
            pub fn set(
                bucket: &Bucket,
                key: &Key,
                outgoing_value: &OutgoingValue,
            ) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = key;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:keyvalue/eventual@0.1.0")]
                    extern "C" {
                        #[link_name = "set"]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(
                        (bucket).handle() as i32,
                        ptr0.cast_mut(),
                        len0,
                        (outgoing_value).handle() as i32,
                        ptr1,
                    );
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<i32>();

                                super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l3 as u32)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Delete the key-value pair associated with the key in the bucket.
            ///
            /// If the key does not exist in the bucket, it does nothing.
            ///
            /// If any other error occurs, it returns an `Err(error)`.
            pub fn delete(bucket: &Bucket, key: &Key) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = key;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:keyvalue/eventual@0.1.0")]
                    extern "C" {
                        #[link_name = "delete"]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import((bucket).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<i32>();

                                super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l3 as u32)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Check if the key exists in the bucket.
            ///
            /// If the key exists in the bucket, it returns `Ok(true)`. If the key does
            /// not exist in the bucket, it returns `Ok(false)`.
            ///
            /// If any other error occurs, it returns an `Err(error)`.
            pub fn exists(bucket: &Bucket, key: &Key) -> Result<bool, Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = key;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:keyvalue/eventual@0.1.0")]
                    extern "C" {
                        #[link_name = "exists"]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import((bucket).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = i32::from(*ptr1.add(4).cast::<u8>());

                                _rt::bool_lift(l3 as u8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(4).cast::<i32>();

                                super::super::super::wasi::keyvalue::wasi_keyvalue_error::Error::from_handle(l4 as u32)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod logging {
        #[allow(dead_code, clippy::all)]
        pub mod logging {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            /// A log level, describing a kind of message.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Level {
                /// Describes messages about the values of variables and the flow of
                /// control within a program.
                Trace,
                /// Describes messages likely to be of interest to someone debugging a
                /// program.
                Debug,
                /// Describes messages likely to be of interest to someone monitoring a
                /// program.
                Info,
                /// Describes messages indicating hazardous situations.
                Warn,
                /// Describes messages indicating serious errors.
                Error,
                /// Describes messages indicating fatal errors.
                Critical,
            }
            impl ::core::fmt::Debug for Level {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Level::Trace => f.debug_tuple("Level::Trace").finish(),
                        Level::Debug => f.debug_tuple("Level::Debug").finish(),
                        Level::Info => f.debug_tuple("Level::Info").finish(),
                        Level::Warn => f.debug_tuple("Level::Warn").finish(),
                        Level::Error => f.debug_tuple("Level::Error").finish(),
                        Level::Critical => f.debug_tuple("Level::Critical").finish(),
                    }
                }
            }

            impl Level {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Level {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Level::Trace,
                        1 => Level::Debug,
                        2 => Level::Info,
                        3 => Level::Warn,
                        4 => Level::Error,
                        5 => Level::Critical,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            /// Emit a log message.
            ///
            /// A log message has a `level` describing what kind of message is being
            /// sent, a context, which is an uninterpreted string meant to help
            /// consumers group similar messages, and a string containing the message
            /// text.
            pub fn log(level: Level, context: &str, message: &str) {
                unsafe {
                    let vec0 = context;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = message;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:logging/logging")]
                    extern "C" {
                        #[link_name = "log"]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(
                        level.clone() as i32,
                        ptr0.cast_mut(),
                        len0,
                        ptr1.cast_mut(),
                        len1,
                    );
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod sockets {
        #[allow(dead_code, clippy::all)]
        pub mod network {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// An opaque resource that represents access to (a subset of) the network.
            /// This enables context-based security for networking.
            /// There is no need for this to map 1:1 to a physical network interface.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Network {
                handle: _rt::Resource<Network>,
            }

            impl Network {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Network {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:sockets/network@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]network"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Error codes.
            ///
            /// In theory, every API can return any error code.
            /// In practice, API's typically only return the errors documented per API
            /// combined with a couple of errors that are always possible:
            /// - `unknown`
            /// - `access-denied`
            /// - `not-supported`
            /// - `out-of-memory`
            /// - `concurrency-conflict`
            ///
            /// See each individual API for what the POSIX equivalents are. They sometimes differ per API.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum ErrorCode {
                /// Unknown error
                Unknown,
                /// Access denied.
                ///
                /// POSIX equivalent: EACCES, EPERM
                AccessDenied,
                /// The operation is not supported.
                ///
                /// POSIX equivalent: EOPNOTSUPP
                NotSupported,
                /// One of the arguments is invalid.
                ///
                /// POSIX equivalent: EINVAL
                InvalidArgument,
                /// Not enough memory to complete the operation.
                ///
                /// POSIX equivalent: ENOMEM, ENOBUFS, EAI_MEMORY
                OutOfMemory,
                /// The operation timed out before it could finish completely.
                Timeout,
                /// This operation is incompatible with another asynchronous operation that is already in progress.
                ///
                /// POSIX equivalent: EALREADY
                ConcurrencyConflict,
                /// Trying to finish an asynchronous operation that:
                /// - has not been started yet, or:
                /// - was already finished by a previous `finish-*` call.
                ///
                /// Note: this is scheduled to be removed when `future`s are natively supported.
                NotInProgress,
                /// The operation has been aborted because it could not be completed immediately.
                ///
                /// Note: this is scheduled to be removed when `future`s are natively supported.
                WouldBlock,
                /// The operation is not valid in the socket's current state.
                InvalidState,
                /// A new socket resource could not be created because of a system limit.
                NewSocketLimit,
                /// A bind operation failed because the provided address is not an address that the `network` can bind to.
                AddressNotBindable,
                /// A bind operation failed because the provided address is already in use or because there are no ephemeral ports available.
                AddressInUse,
                /// The remote address is not reachable
                RemoteUnreachable,
                /// The TCP connection was forcefully rejected
                ConnectionRefused,
                /// The TCP connection was reset.
                ConnectionReset,
                /// A TCP connection was aborted.
                ConnectionAborted,
                /// The size of a datagram sent to a UDP socket exceeded the maximum
                /// supported size.
                DatagramTooLarge,
                /// Name does not exist or has no suitable associated IP addresses.
                NameUnresolvable,
                /// A temporary failure in name resolution occurred.
                TemporaryResolverFailure,
                /// A permanent failure in name resolution occurred.
                PermanentResolverFailure,
            }
            impl ErrorCode {
                pub fn name(&self) -> &'static str {
                    match self {
                        ErrorCode::Unknown => "unknown",
                        ErrorCode::AccessDenied => "access-denied",
                        ErrorCode::NotSupported => "not-supported",
                        ErrorCode::InvalidArgument => "invalid-argument",
                        ErrorCode::OutOfMemory => "out-of-memory",
                        ErrorCode::Timeout => "timeout",
                        ErrorCode::ConcurrencyConflict => "concurrency-conflict",
                        ErrorCode::NotInProgress => "not-in-progress",
                        ErrorCode::WouldBlock => "would-block",
                        ErrorCode::InvalidState => "invalid-state",
                        ErrorCode::NewSocketLimit => "new-socket-limit",
                        ErrorCode::AddressNotBindable => "address-not-bindable",
                        ErrorCode::AddressInUse => "address-in-use",
                        ErrorCode::RemoteUnreachable => "remote-unreachable",
                        ErrorCode::ConnectionRefused => "connection-refused",
                        ErrorCode::ConnectionReset => "connection-reset",
                        ErrorCode::ConnectionAborted => "connection-aborted",
                        ErrorCode::DatagramTooLarge => "datagram-too-large",
                        ErrorCode::NameUnresolvable => "name-unresolvable",
                        ErrorCode::TemporaryResolverFailure => "temporary-resolver-failure",
                        ErrorCode::PermanentResolverFailure => "permanent-resolver-failure",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                                          ErrorCode::Unknown => "Unknown error",
                                          ErrorCode::AccessDenied => "Access denied.

                                          POSIX equivalent: EACCES, EPERM",
                                          ErrorCode::NotSupported => "The operation is not supported.

                                          POSIX equivalent: EOPNOTSUPP",
                                          ErrorCode::InvalidArgument => "One of the arguments is invalid.

                                          POSIX equivalent: EINVAL",
                                          ErrorCode::OutOfMemory => "Not enough memory to complete the operation.

                                          POSIX equivalent: ENOMEM, ENOBUFS, EAI_MEMORY",
                                          ErrorCode::Timeout => "The operation timed out before it could finish completely.",
                                          ErrorCode::ConcurrencyConflict => "This operation is incompatible with another asynchronous operation that is already in progress.

                                          POSIX equivalent: EALREADY",
                                          ErrorCode::NotInProgress => "Trying to finish an asynchronous operation that:
                                          - has not been started yet, or:
                                          - was already finished by a previous `finish-*` call.

                                          Note: this is scheduled to be removed when `future`s are natively supported.",
                                          ErrorCode::WouldBlock => "The operation has been aborted because it could not be completed immediately.

                                          Note: this is scheduled to be removed when `future`s are natively supported.",
                                          ErrorCode::InvalidState => "The operation is not valid in the socket's current state.",
                                          ErrorCode::NewSocketLimit => "A new socket resource could not be created because of a system limit.",
                                          ErrorCode::AddressNotBindable => "A bind operation failed because the provided address is not an address that the `network` can bind to.",
                                          ErrorCode::AddressInUse => "A bind operation failed because the provided address is already in use or because there are no ephemeral ports available.",
                                          ErrorCode::RemoteUnreachable => "The remote address is not reachable",
                                          ErrorCode::ConnectionRefused => "The TCP connection was forcefully rejected",
                                          ErrorCode::ConnectionReset => "The TCP connection was reset.",
                                          ErrorCode::ConnectionAborted => "A TCP connection was aborted.",
                                          ErrorCode::DatagramTooLarge => "The size of a datagram sent to a UDP socket exceeded the maximum
                                          supported size.",
                                          ErrorCode::NameUnresolvable => "Name does not exist or has no suitable associated IP addresses.",
                                          ErrorCode::TemporaryResolverFailure => "A temporary failure in name resolution occurred.",
                                          ErrorCode::PermanentResolverFailure => "A permanent failure in name resolution occurred.",
                                        }
                }
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ErrorCode")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for ErrorCode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for ErrorCode {}

            impl ErrorCode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ErrorCode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => ErrorCode::Unknown,
                        1 => ErrorCode::AccessDenied,
                        2 => ErrorCode::NotSupported,
                        3 => ErrorCode::InvalidArgument,
                        4 => ErrorCode::OutOfMemory,
                        5 => ErrorCode::Timeout,
                        6 => ErrorCode::ConcurrencyConflict,
                        7 => ErrorCode::NotInProgress,
                        8 => ErrorCode::WouldBlock,
                        9 => ErrorCode::InvalidState,
                        10 => ErrorCode::NewSocketLimit,
                        11 => ErrorCode::AddressNotBindable,
                        12 => ErrorCode::AddressInUse,
                        13 => ErrorCode::RemoteUnreachable,
                        14 => ErrorCode::ConnectionRefused,
                        15 => ErrorCode::ConnectionReset,
                        16 => ErrorCode::ConnectionAborted,
                        17 => ErrorCode::DatagramTooLarge,
                        18 => ErrorCode::NameUnresolvable,
                        19 => ErrorCode::TemporaryResolverFailure,
                        20 => ErrorCode::PermanentResolverFailure,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum IpAddressFamily {
                /// Similar to `AF_INET` in POSIX.
                Ipv4,
                /// Similar to `AF_INET6` in POSIX.
                Ipv6,
            }
            impl ::core::fmt::Debug for IpAddressFamily {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        IpAddressFamily::Ipv4 => f.debug_tuple("IpAddressFamily::Ipv4").finish(),
                        IpAddressFamily::Ipv6 => f.debug_tuple("IpAddressFamily::Ipv6").finish(),
                    }
                }
            }

            impl IpAddressFamily {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> IpAddressFamily {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => IpAddressFamily::Ipv4,
                        1 => IpAddressFamily::Ipv6,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            pub type Ipv4Address = (u8, u8, u8, u8);
            pub type Ipv6Address = (u16, u16, u16, u16, u16, u16, u16, u16);
            #[derive(Clone, Copy)]
            pub enum IpAddress {
                Ipv4(Ipv4Address),
                Ipv6(Ipv6Address),
            }
            impl ::core::fmt::Debug for IpAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        IpAddress::Ipv4(e) => f.debug_tuple("IpAddress::Ipv4").field(e).finish(),
                        IpAddress::Ipv6(e) => f.debug_tuple("IpAddress::Ipv6").field(e).finish(),
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Ipv4SocketAddress {
                /// sin_port
                pub port: u16,
                /// sin_addr
                pub address: Ipv4Address,
            }
            impl ::core::fmt::Debug for Ipv4SocketAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Ipv4SocketAddress")
                        .field("port", &self.port)
                        .field("address", &self.address)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Ipv6SocketAddress {
                /// sin6_port
                pub port: u16,
                /// sin6_flowinfo
                pub flow_info: u32,
                /// sin6_addr
                pub address: Ipv6Address,
                /// sin6_scope_id
                pub scope_id: u32,
            }
            impl ::core::fmt::Debug for Ipv6SocketAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Ipv6SocketAddress")
                        .field("port", &self.port)
                        .field("flow-info", &self.flow_info)
                        .field("address", &self.address)
                        .field("scope-id", &self.scope_id)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum IpSocketAddress {
                Ipv4(Ipv4SocketAddress),
                Ipv6(Ipv6SocketAddress),
            }
            impl ::core::fmt::Debug for IpSocketAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        IpSocketAddress::Ipv4(e) => {
                            f.debug_tuple("IpSocketAddress::Ipv4").field(e).finish()
                        }
                        IpSocketAddress::Ipv6(e) => {
                            f.debug_tuple("IpSocketAddress::Ipv6").field(e).finish()
                        }
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod ip_name_lookup {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub type Network = super::super::super::wasi::sockets::network::Network;
            pub type ErrorCode = super::super::super::wasi::sockets::network::ErrorCode;
            pub type IpAddress = super::super::super::wasi::sockets::network::IpAddress;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct ResolveAddressStream {
                handle: _rt::Resource<ResolveAddressStream>,
            }

            impl ResolveAddressStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for ResolveAddressStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]resolve-address-stream"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            /// Resolve an internet host name to a list of IP addresses.
            ///
            /// Unicode domain names are automatically converted to ASCII using IDNA encoding.
            /// If the input is an IP address string, the address is parsed and returned
            /// as-is without making any external requests.
            ///
            /// See the wasi-socket proposal README.md for a comparison with getaddrinfo.
            ///
            /// This function never blocks. It either immediately fails or immediately
            /// returns successfully with a `resolve-address-stream` that can be used
            /// to (asynchronously) fetch the results.
            ///
            /// # Typical errors
            /// - `invalid-argument`: `name` is a syntactically invalid domain name or IP address.
            ///
            /// # References:
            /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html>
            /// - <https://man7.org/linux/man-pages/man3/getaddrinfo.3.html>
            /// - <https://learn.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo>
            /// - <https://man.freebsd.org/cgi/man.cgi?query=getaddrinfo&sektion=3>
            pub fn resolve_addresses(
                network: &Network,
                name: &str,
            ) -> Result<ResolveAddressStream, ErrorCode> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.0")]
                    extern "C" {
                        #[link_name = "resolve-addresses"]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import((network).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<i32>();

                                ResolveAddressStream::from_handle(l3 as u32)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = i32::from(*ptr1.add(4).cast::<u8>());

                                super::super::super::wasi::sockets::network::ErrorCode::_lift(
                                    l4 as u8,
                                )
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            impl ResolveAddressStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the next address from the resolver.
                ///
                /// This function should be called multiple times. On each call, it will
                /// return the next address in connection order preference. If all
                /// addresses have been exhausted, this function returns `none`.
                ///
                /// This function never returns IPv4-mapped IPv6 addresses.
                ///
                /// # Typical errors
                /// - `name-unresolvable`:          Name does not exist or has no suitable associated IP addresses. (EAI_NONAME, EAI_NODATA, EAI_ADDRFAMILY)
                /// - `temporary-resolver-failure`: A temporary failure in name resolution occurred. (EAI_AGAIN)
                /// - `permanent-resolver-failure`: A permanent failure in name resolution occurred. (EAI_FAIL)
                /// - `would-block`:                A result is not available yet. (EWOULDBLOCK, EAGAIN)
                pub fn resolve_next_address(&self) -> Result<Option<IpAddress>, ErrorCode> {
                    unsafe {
                        #[repr(align(2))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 22]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 22]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]resolve-address-stream.resolve-next-address"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(2).cast::<u8>());

                                    match l2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                                use super::super::super::wasi::sockets::network::IpAddress as V16;
                                                let v16 = match l3 {
                                                    0 => {
                                                        let e16 = {
                                                            let l4 = i32::from(
                                                                *ptr0.add(6).cast::<u8>(),
                                                            );
                                                            let l5 = i32::from(
                                                                *ptr0.add(7).cast::<u8>(),
                                                            );
                                                            let l6 = i32::from(
                                                                *ptr0.add(8).cast::<u8>(),
                                                            );
                                                            let l7 = i32::from(
                                                                *ptr0.add(9).cast::<u8>(),
                                                            );

                                                            (l4 as u8, l5 as u8, l6 as u8, l7 as u8)
                                                        };
                                                        V16::Ipv4(e16)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 1,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e16 = {
                                                            let l8 = i32::from(
                                                                *ptr0.add(6).cast::<u16>(),
                                                            );
                                                            let l9 = i32::from(
                                                                *ptr0.add(8).cast::<u16>(),
                                                            );
                                                            let l10 = i32::from(
                                                                *ptr0.add(10).cast::<u16>(),
                                                            );
                                                            let l11 = i32::from(
                                                                *ptr0.add(12).cast::<u16>(),
                                                            );
                                                            let l12 = i32::from(
                                                                *ptr0.add(14).cast::<u16>(),
                                                            );
                                                            let l13 = i32::from(
                                                                *ptr0.add(16).cast::<u16>(),
                                                            );
                                                            let l14 = i32::from(
                                                                *ptr0.add(18).cast::<u16>(),
                                                            );
                                                            let l15 = i32::from(
                                                                *ptr0.add(20).cast::<u16>(),
                                                            );

                                                            (
                                                                l8 as u16, l9 as u16, l10 as u16,
                                                                l11 as u16, l12 as u16, l13 as u16,
                                                                l14 as u16, l15 as u16,
                                                            )
                                                        };
                                                        V16::Ipv6(e16)
                                                    }
                                                };

                                                v16
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l17 = i32::from(*ptr0.add(2).cast::<u8>());

                                    super::super::super::wasi::sockets::network::ErrorCode::_lift(
                                        l17 as u8,
                                    )
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ResolveAddressStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a `pollable` which will resolve once the stream is ready for I/O.
                ///
                /// Note: this function is here for WASI Preview2 only.
                /// It's planned to be removed when `future` is natively supported in Preview3.
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]resolve-address-stream.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod instance_network {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            pub type Network = super::super::super::wasi::sockets::network::Network;
            #[allow(unused_unsafe, clippy::all)]
            /// Get a handle to the default network.
            pub fn instance_network() -> Network {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:sockets/instance-network@0.2.0")]
                    extern "C" {
                        #[link_name = "instance-network"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    super::super::super::wasi::sockets::network::Network::from_handle(ret as u32)
                }
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:golem-rust:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 20894] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x9c\xa2\x01\x01A\x02\
\x01AT\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\
\x16[method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]p\
ollable.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\
\x03\x01\x12wasi:io/poll@0.2.0\x05\0\x02\x03\0\0\x08pollable\x01B*\x02\x03\x02\x01\
\x01\x04\0\x08pollable\x03\0\0\x01z\x04\0\x0anode-index\x03\0\x02\x01r\x01\x05va\
lues\x04\0\x03uri\x03\0\x04\x01p\x03\x01k\x03\x01o\x02y\x07\x01p\x7f\x01j\x01\x07\
\x01\x07\x01o\x02\x05w\x01q\x16\x0crecord-value\x01\x06\0\x0dvariant-value\x01\x08\
\0\x0aenum-value\x01y\0\x0bflags-value\x01\x09\0\x0btuple-value\x01\x06\0\x0alis\
t-value\x01\x06\0\x0coption-value\x01\x07\0\x0cresult-value\x01\x0a\0\x07prim-u8\
\x01}\0\x08prim-u16\x01{\0\x08prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\
\0\x08prim-s16\x01|\0\x08prim-s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\
\0\x0cprim-float64\x01u\0\x09prim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-str\
ing\x01s\0\x06handle\x01\x0b\0\x04\0\x08wit-node\x03\0\x0c\x01p\x0d\x01r\x01\x05\
nodes\x0e\x04\0\x09wit-value\x03\0\x0f\x01q\x04\x0eprotocol-error\x01s\0\x06deni\
ed\x01s\0\x09not-found\x01s\0\x15remote-internal-error\x01s\0\x04\0\x09rpc-error\
\x03\0\x11\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-invoke-result\x03\x01\x01i\x13\
\x01@\x01\x08location\x05\0\x15\x04\0\x15[constructor]wasm-rpc\x01\x16\x01h\x13\x01\
p\x10\x01j\x01\x10\x01\x12\x01@\x03\x04self\x17\x0dfunction-names\x0ffunction-pa\
rams\x18\0\x19\x04\0![method]wasm-rpc.invoke-and-await\x01\x1a\x01j\0\x01\x12\x01\
@\x03\x04self\x17\x0dfunction-names\x0ffunction-params\x18\0\x1b\x04\0\x17[metho\
d]wasm-rpc.invoke\x01\x1c\x01i\x14\x01@\x03\x04self\x17\x0dfunction-names\x0ffun\
ction-params\x18\0\x1d\x04\0'[method]wasm-rpc.async-invoke-and-await\x01\x1e\x01\
h\x14\x01i\x01\x01@\x01\x04self\x1f\0\x20\x04\0&[method]future-invoke-result.sub\
scribe\x01!\x01k\x19\x01@\x01\x04self\x1f\0\"\x04\0\x20[method]future-invoke-res\
ult.get\x01#\x03\x01\x15golem:rpc/types@0.1.0\x05\x02\x01B\x0f\x02\x03\x02\x01\x01\
\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07instant\x03\0\x02\x01w\x04\0\x08duratio\
n\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\x01@\0\0\x05\x04\0\x0aresolution\x01\
\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\0\x11subscribe-instant\x01\x09\x01@\
\x01\x04when\x05\0\x08\x04\0\x12subscribe-duration\x01\x0a\x03\x01!wasi:clocks/m\
onotonic-clock@0.2.0\x05\x03\x02\x03\0\x01\x03uri\x02\x03\0\x02\x08duration\x01B\
g\x02\x03\x02\x01\x04\x04\0\x03uri\x03\0\0\x02\x03\x02\x01\x05\x04\0\x08duration\
\x03\0\x02\x01w\x04\0\x0boplog-index\x03\0\x04\x01w\x04\0\x11component-version\x03\
\0\x06\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04uuid\x03\0\x08\x01r\x01\x04u\
uid\x09\x04\0\x0ccomponent-id\x03\0\x0a\x01r\x02\x0ccomponent-id\x0b\x0bworker-n\
ames\x04\0\x09worker-id\x03\0\x0c\x01r\x02\x09worker-id\x0d\x09oplog-idx\x05\x04\
\0\x0apromise-id\x03\0\x0e\x01r\x01\x05values\x04\0\x0aaccount-id\x03\0\x10\x01k\
u\x01r\x05\x0cmax-attemptsy\x09min-delay\x03\x09max-delay\x03\x0amultiplieru\x11\
max-jitter-factor\x12\x04\0\x0cretry-policy\x03\0\x13\x01q\x03\x0fpersist-nothin\
g\0\0\x1bpersist-remote-side-effects\0\0\x05smart\0\0\x04\0\x11persistence-level\
\x03\0\x15\x01m\x02\x09automatic\x0esnapshot-based\x04\0\x0bupdate-mode\x03\0\x17\
\x01m\x06\x05equal\x09not-equal\x0dgreater-equal\x07greater\x0aless-equal\x04les\
s\x04\0\x11filter-comparator\x03\0\x19\x01m\x04\x05equal\x09not-equal\x04like\x08\
not-like\x04\0\x18string-filter-comparator\x03\0\x1b\x01m\x07\x07running\x04idle\
\x09suspended\x0binterrupted\x08retrying\x06failed\x06exited\x04\0\x0dworker-sta\
tus\x03\0\x1d\x01r\x02\x0acomparator\x1c\x05values\x04\0\x12worker-name-filter\x03\
\0\x1f\x01r\x02\x0acomparator\x1a\x05value\x1e\x04\0\x14worker-status-filter\x03\
\0!\x01r\x02\x0acomparator\x1a\x05valuew\x04\0\x15worker-version-filter\x03\0#\x01\
r\x02\x0acomparator\x1a\x05valuew\x04\0\x18worker-created-at-filter\x03\0%\x01r\x03\
\x04names\x0acomparator\x1c\x05values\x04\0\x11worker-env-filter\x03\0'\x01q\x05\
\x04name\x01\x20\0\x06status\x01\"\0\x07version\x01$\0\x0acreated-at\x01&\0\x03e\
nv\x01(\0\x04\0\x16worker-property-filter\x03\0)\x01p*\x01r\x01\x07filters+\x04\0\
\x11worker-all-filter\x03\0,\x01p-\x01r\x01\x07filters.\x04\0\x11worker-any-filt\
er\x03\0/\x01ps\x01o\x02ss\x01p2\x01r\x06\x09worker-id\x0d\x04args1\x03env3\x06s\
tatus\x1e\x11component-versionw\x0bretry-countw\x04\0\x0fworker-metadata\x03\04\x04\
\0\x0bget-workers\x03\x01\x01k0\x01i6\x01@\x03\x0ccomponent-id\x0b\x06filter7\x07\
precise\x7f\08\x04\0\x18[constructor]get-workers\x019\x01h6\x01p5\x01k;\x01@\x01\
\x04self:\0<\x04\0\x1c[method]get-workers.get-next\x01=\x01@\0\0\x0f\x04\0\x0ecr\
eate-promise\x01>\x01p}\x01@\x01\x0apromise-id\x0f\0?\x04\0\x0dawait-promise\x01\
@\x01@\x02\x0apromise-id\x0f\x04data?\0\x7f\x04\0\x10complete-promise\x01A\x01@\x01\
\x0apromise-id\x0f\x01\0\x04\0\x0edelete-promise\x01B\x01@\0\0\x05\x04\0\x0fget-\
oplog-index\x01C\x01@\x01\x09oplog-idx\x05\x01\0\x04\0\x0fset-oplog-index\x01D\x01\
@\x01\x08replicas}\x01\0\x04\0\x0coplog-commit\x01E\x04\0\x14mark-begin-operatio\
n\x01C\x01@\x01\x05begin\x05\x01\0\x04\0\x12mark-end-operation\x01F\x01@\0\0\x14\
\x04\0\x10get-retry-policy\x01G\x01@\x01\x10new-retry-policy\x14\x01\0\x04\0\x10\
set-retry-policy\x01H\x01@\0\0\x16\x04\0\x1bget-oplog-persistence-level\x01I\x01\
@\x01\x15new-persistence-level\x16\x01\0\x04\0\x1bset-oplog-persistence-level\x01\
J\x01@\0\0\x7f\x04\0\x14get-idempotence-mode\x01K\x01@\x01\x0aidempotent\x7f\x01\
\0\x04\0\x14set-idempotence-mode\x01L\x01@\0\0\x09\x04\0\x18generate-idempotency\
-key\x01M\x01@\x03\x09worker-id\x0d\x0etarget-version\x07\x04mode\x18\x01\0\x04\0\
\x0dupdate-worker\x01N\x01@\0\05\x04\0\x11get-self-metadata\x01O\x01k5\x01@\x01\x09\
worker-id\x0d\0\xd0\0\x04\0\x13get-worker-metadata\x01Q\x03\x01\x14golem:api/hos\
t@1.1.0\x05\x06\x01B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08datetime\x03\
\0\0\x01@\0\0\x01\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x03\x01\x1cwa\
si:clocks/wall-clock@0.2.0\x05\x07\x02\x03\0\x04\x08datetime\x02\x03\0\x01\x09wi\
t-value\x02\x03\0\x03\x0aaccount-id\x02\x03\0\x03\x11component-version\x02\x03\0\
\x03\x0boplog-index\x02\x03\0\x03\x0cretry-policy\x02\x03\0\x03\x04uuid\x02\x03\0\
\x03\x09worker-id\x01Be\x02\x03\x02\x01\x08\x04\0\x08datetime\x03\0\0\x02\x03\x02\
\x01\x09\x04\0\x09wit-value\x03\0\x02\x02\x03\x02\x01\x0a\x04\0\x0aaccount-id\x03\
\0\x04\x02\x03\x02\x01\x0b\x04\0\x11component-version\x03\0\x06\x02\x03\x02\x01\x0c\
\x04\0\x0boplog-index\x03\0\x08\x02\x03\x02\x01\x0d\x04\0\x0cretry-policy\x03\0\x0a\
\x02\x03\x02\x01\x0e\x04\0\x04uuid\x03\0\x0c\x02\x03\x02\x01\x0f\x04\0\x09worker\
-id\x03\0\x0e\x01k\x09\x01q\x05\x0aread-local\0\0\x0bwrite-local\0\0\x0bread-rem\
ote\0\0\x0cwrite-remote\0\0\x14write-remote-batched\x01\x10\0\x04\0\x15wrapped-f\
unction-type\x03\0\x11\x01o\x02ss\x01p\x13\x01r\x04\x0finstallation-id\x0d\x04na\
mes\x07versions\x0aparameters\x14\x04\0\x1fplugin-installation-description\x03\0\
\x15\x01ps\x01k\x0f\x01p\x16\x01r\x0a\x09timestamp\x01\x09worker-id\x0f\x11compo\
nent-version\x07\x04args\x17\x03env\x14\x0aaccount-id\x05\x06parent\x18\x0ecompo\
nent-sizew\x20initial-total-linear-memory-sizew\x16initial-active-plugins\x19\x04\
\0\x11create-parameters\x03\0\x1a\x01r\x05\x09timestamp\x01\x0dfunction-names\x07\
request\x03\x08response\x03\x15wrapped-function-type\x12\x04\0$imported-function\
-invoked-parameters\x03\0\x1c\x01p\x03\x01r\x04\x09timestamp\x01\x0dfunction-nam\
es\x07request\x1e\x0fidempotency-keys\x04\0$exported-function-invoked-parameters\
\x03\0\x1f\x01r\x03\x09timestamp\x01\x08response\x03\x0dconsumed-fuelx\x04\0&exp\
orted-function-completed-parameters\x03\0!\x01r\x02\x09timestamp\x01\x05errors\x04\
\0\x10error-parameters\x03\0#\x01r\x03\x09timestamp\x01\x05start\x09\x03end\x09\x04\
\0\x0fjump-parameters\x03\0%\x01r\x02\x09timestamp\x01\x0cretry-policy\x0b\x04\0\
\x1echange-retry-policy-parameters\x03\0'\x01r\x02\x09timestamp\x01\x0bbegin-ind\
ex\x09\x04\0\x1cend-atomic-region-parameters\x03\0)\x01r\x02\x09timestamp\x01\x0b\
begin-index\x09\x04\0\x1bend-remote-write-parameters\x03\0+\x01k\x1e\x01r\x03\x0f\
idempotency-keys\x0dfunction-names\x05input-\x04\0'exported-function-invocation-\
parameters\x03\0.\x01q\x02\x11exported-function\x01/\0\x0dmanual-update\x01\x07\0\
\x04\0\x11worker-invocation\x03\00\x01r\x02\x09timestamp\x01\x0ainvocation1\x04\0\
$pending-worker-invocation-parameters\x03\02\x01p}\x01q\x02\x0bauto-update\0\0\x0e\
snapshot-based\x014\0\x04\0\x12update-description\x03\05\x01r\x03\x09timestamp\x01\
\x0etarget-version\x07\x12update-description6\x04\0\x19pending-update-parameters\
\x03\07\x01r\x04\x09timestamp\x01\x0etarget-version\x07\x12new-component-sizew\x12\
new-active-plugins\x19\x04\0\x1csuccessful-update-parameters\x03\09\x01ks\x01r\x03\
\x09timestamp\x01\x0etarget-version\x07\x07details;\x04\0\x18failed-update-param\
eters\x03\0<\x01r\x02\x09timestamp\x01\x05deltaw\x04\0\x16grow-memory-parameters\
\x03\0>\x01w\x04\0\x12worker-resource-id\x03\0@\x01r\x02\x09timestamp\x01\x0bres\
ource-id\xc1\0\x04\0\x1acreate-resource-parameters\x03\0B\x01r\x02\x09timestamp\x01\
\x0bresource-id\xc1\0\x04\0\x18drop-resource-parameters\x03\0D\x01r\x04\x09times\
tamp\x01\x0bresource-id\xc1\0\x0dresource-names\x0fresource-params\x1e\x04\0\x1c\
describe-resource-parameters\x03\0F\x01m\x08\x06stdout\x06stderr\x05trace\x05deb\
ug\x04info\x04warn\x05error\x08critical\x04\0\x09log-level\x03\0H\x01r\x04\x09ti\
mestamp\x01\x05level\xc9\0\x07contexts\x07messages\x04\0\x0elog-parameters\x03\0\
J\x01r\x02\x09timestamp\x01\x06plugin\x16\x04\0\x1aactivate-plugin-parameters\x03\
\0L\x01r\x02\x09timestamp\x01\x06plugin\x16\x04\0\x1cdeactivate-plugin-parameter\
s\x03\0N\x01q\x1b\x06create\x01\x1b\0\x19imported-function-invoked\x01\x1d\0\x19\
exported-function-invoked\x01\x20\0\x1bexported-function-completed\x01\"\0\x07su\
spend\x01\x01\0\x05error\x01$\0\x05no-op\x01\x01\0\x04jump\x01&\0\x0binterrupted\
\x01\x01\0\x06exited\x01\x01\0\x13change-retry-policy\x01(\0\x13begin-atomic-reg\
ion\x01\x01\0\x11end-atomic-region\x01*\0\x12begin-remote-write\x01\x01\0\x10end\
-remote-write\x01,\0\x19pending-worker-invocation\x013\0\x0epending-update\x018\0\
\x11successful-update\x01:\0\x0dfailed-update\x01=\0\x0bgrow-memory\x01?\0\x0fcr\
eate-resource\x01\xc3\0\0\x0ddrop-resource\x01\xc5\0\0\x11describe-resource\x01\xc7\
\0\0\x03log\x01\xcb\0\0\x07restart\x01\x01\0\x0factivate-plugin\x01\xcd\0\0\x11d\
eactivate-plugin\x01\xcf\0\0\x04\0\x0boplog-entry\x03\0P\x04\0\x09get-oplog\x03\x01\
\x04\0\x0csearch-oplog\x03\x01\x01iR\x01@\x02\x09worker-id\x0f\x05start\x09\0\xd4\
\0\x04\0\x16[constructor]get-oplog\x01U\x01hR\x01p\xd1\0\x01k\xd7\0\x01@\x01\x04\
self\xd6\0\0\xd8\0\x04\0\x1a[method]get-oplog.get-next\x01Y\x01iS\x01@\x02\x09wo\
rker-id\x0f\x04texts\0\xda\0\x04\0\x19[constructor]search-oplog\x01[\x01hS\x01o\x02\
\x09\xd1\0\x01p\xdd\0\x01k\xde\0\x01@\x01\x04self\xdc\0\0\xdf\0\x04\0\x1d[method\
]search-oplog.get-next\x01`\x03\x01\x15golem:api/oplog@1.1.0\x05\x10\x01B\x04\x04\
\0\x05error\x03\x01\x01h\0\x01@\x01\x04self\x01\0s\x04\0\x1d[method]error.to-deb\
ug-string\x01\x02\x03\x01\x13wasi:io/error@0.2.0\x05\x11\x02\x03\0\x06\x05error\x01\
B(\x02\x03\x02\x01\x12\x04\0\x05error\x03\0\0\x02\x03\x02\x01\x01\x04\0\x08polla\
ble\x03\0\x02\x01i\x01\x01q\x02\x15last-operation-failed\x01\x04\0\x06closed\0\0\
\x04\0\x0cstream-error\x03\0\x05\x04\0\x0cinput-stream\x03\x01\x04\0\x0doutput-s\
tream\x03\x01\x01h\x07\x01p}\x01j\x01\x0a\x01\x06\x01@\x02\x04self\x09\x03lenw\0\
\x0b\x04\0\x19[method]input-stream.read\x01\x0c\x04\0\"[method]input-stream.bloc\
king-read\x01\x0c\x01j\x01w\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0d\x04\0\x19\
[method]input-stream.skip\x01\x0e\x04\0\"[method]input-stream.blocking-skip\x01\x0e\
\x01i\x03\x01@\x01\x04self\x09\0\x0f\x04\0\x1e[method]input-stream.subscribe\x01\
\x10\x01h\x08\x01@\x01\x04self\x11\0\x0d\x04\0![method]output-stream.check-write\
\x01\x12\x01j\0\x01\x06\x01@\x02\x04self\x11\x08contents\x0a\0\x13\x04\0\x1b[met\
hod]output-stream.write\x01\x14\x04\0.[method]output-stream.blocking-write-and-f\
lush\x01\x14\x01@\x01\x04self\x11\0\x13\x04\0\x1b[method]output-stream.flush\x01\
\x15\x04\0$[method]output-stream.blocking-flush\x01\x15\x01@\x01\x04self\x11\0\x0f\
\x04\0\x1f[method]output-stream.subscribe\x01\x16\x01@\x02\x04self\x11\x03lenw\0\
\x13\x04\0\"[method]output-stream.write-zeroes\x01\x17\x04\05[method]output-stre\
am.blocking-write-zeroes-and-flush\x01\x17\x01@\x03\x04self\x11\x03src\x09\x03le\
nw\0\x0d\x04\0\x1c[method]output-stream.splice\x01\x18\x04\0%[method]output-stre\
am.blocking-splice\x01\x18\x03\x01\x15wasi:io/streams@0.2.0\x05\x13\x02\x03\0\x07\
\x0cinput-stream\x02\x03\0\x07\x0doutput-stream\x01B+\x02\x03\x02\x01\x14\x04\0\x0c\
input-stream\x03\0\0\x02\x03\x02\x01\x15\x04\0\x0doutput-stream\x03\0\x02\x01s\x04\
\0\x0econtainer-name\x03\0\x04\x01s\x04\0\x0bobject-name\x03\0\x06\x01w\x04\0\x09\
timestamp\x03\0\x08\x01w\x04\0\x0bobject-size\x03\0\x0a\x01s\x04\0\x05error\x03\0\
\x0c\x01r\x02\x04name\x05\x0acreated-at\x09\x04\0\x12container-metadata\x03\0\x0e\
\x01r\x04\x04name\x07\x09container\x05\x0acreated-at\x09\x04size\x0b\x04\0\x0fob\
ject-metadata\x03\0\x10\x01r\x02\x09container\x05\x06object\x07\x04\0\x09object-\
id\x03\0\x12\x04\0\x0eoutgoing-value\x03\x01\x04\0\x0eincoming-value\x03\x01\x04\
\0\x19incoming-value-async-body\x03\0\x01\x01p}\x04\0\x18incoming-value-sync-bod\
y\x03\0\x17\x01i\x14\x01@\0\0\x19\x04\0)[static]outgoing-value.new-outgoing-valu\
e\x01\x1a\x01h\x14\x01i\x03\x01j\x01\x1c\0\x01@\x01\x04self\x1b\0\x1d\x04\00[met\
hod]outgoing-value.outgoing-value-write-body\x01\x1e\x01h\x15\x01j\x01\x18\x01\x0d\
\x01@\x01\x04self\x1f\0\x20\x04\02[method]incoming-value.incoming-value-consume-\
sync\x01!\x01i\x16\x01j\x01\"\x01\x0d\x01@\x01\x04self\x1f\0#\x04\03[method]inco\
ming-value.incoming-value-consume-async\x01$\x01@\x01\x04self\x1f\0w\x04\0\x1b[m\
ethod]incoming-value.size\x01%\x03\x01\x14wasi:blobstore/types\x05\x16\x02\x03\0\
\x08\x12container-metadata\x02\x03\0\x08\x05error\x02\x03\0\x08\x0eincoming-valu\
e\x02\x03\0\x08\x0fobject-metadata\x02\x03\0\x08\x0bobject-name\x02\x03\0\x08\x0e\
outgoing-value\x01B;\x02\x03\x02\x01\x14\x04\0\x0cinput-stream\x03\0\0\x02\x03\x02\
\x01\x15\x04\0\x0doutput-stream\x03\0\x02\x02\x03\x02\x01\x17\x04\0\x12container\
-metadata\x03\0\x04\x02\x03\x02\x01\x18\x04\0\x05error\x03\0\x06\x02\x03\x02\x01\
\x19\x04\0\x0eincoming-value\x03\0\x08\x02\x03\x02\x01\x1a\x04\0\x0fobject-metad\
ata\x03\0\x0a\x02\x03\x02\x01\x1b\x04\0\x0bobject-name\x03\0\x0c\x02\x03\x02\x01\
\x1c\x04\0\x0eoutgoing-value\x03\0\x0e\x04\0\x09container\x03\x01\x04\0\x13strea\
m-object-names\x03\x01\x01h\x10\x01j\x01s\x01\x07\x01@\x01\x04self\x12\0\x13\x04\
\0\x16[method]container.name\x01\x14\x01j\x01\x05\x01\x07\x01@\x01\x04self\x12\0\
\x15\x04\0\x16[method]container.info\x01\x16\x01i\x09\x01j\x01\x17\x01\x07\x01@\x04\
\x04self\x12\x04name\x0d\x05startw\x03endw\0\x18\x04\0\x1a[method]container.get-\
data\x01\x19\x01h\x0f\x01j\0\x01\x07\x01@\x03\x04self\x12\x04name\x0d\x04data\x1a\
\0\x1b\x04\0\x1c[method]container.write-data\x01\x1c\x01i\x11\x01j\x01\x1d\x01\x07\
\x01@\x01\x04self\x12\0\x1e\x04\0\x1e[method]container.list-objects\x01\x1f\x01@\
\x02\x04self\x12\x04name\x0d\0\x1b\x04\0\x1f[method]container.delete-object\x01\x20\
\x01p\x0d\x01@\x02\x04self\x12\x05names!\0\x1b\x04\0\x20[method]container.delete\
-objects\x01\"\x01j\x01\x7f\x01\x07\x01@\x02\x04self\x12\x04name\x0d\0#\x04\0\x1c\
[method]container.has-object\x01$\x01j\x01\x0b\x01\x07\x01@\x02\x04self\x12\x04n\
ame\x0d\0%\x04\0\x1d[method]container.object-info\x01&\x01@\x01\x04self\x12\0\x1b\
\x04\0\x17[method]container.clear\x01'\x01h\x11\x01o\x02!\x7f\x01j\x01)\x01\x07\x01\
@\x02\x04self(\x03lenw\0*\x04\04[method]stream-object-names.read-stream-object-n\
ames\x01+\x01o\x02w\x7f\x01j\x01,\x01\x07\x01@\x02\x04self(\x03numw\0-\x04\04[me\
thod]stream-object-names.skip-stream-object-names\x01.\x03\x01\x18wasi:blobstore\
/container\x05\x1d\x02\x03\0\x09\x09container\x02\x03\0\x08\x0econtainer-name\x02\
\x03\0\x08\x09object-id\x01B\x16\x02\x03\x02\x01\x1e\x04\0\x09container\x03\0\0\x02\
\x03\x02\x01\x18\x04\0\x05error\x03\0\x02\x02\x03\x02\x01\x1f\x04\0\x0econtainer\
-name\x03\0\x04\x02\x03\x02\x01\x20\x04\0\x09object-id\x03\0\x06\x01i\x01\x01j\x01\
\x08\x01\x03\x01@\x01\x04name\x05\0\x09\x04\0\x10create-container\x01\x0a\x04\0\x0d\
get-container\x01\x0a\x01j\0\x01\x03\x01@\x01\x04name\x05\0\x0b\x04\0\x10delete-\
container\x01\x0c\x01j\x01\x7f\x01\x03\x01@\x01\x04name\x05\0\x0d\x04\0\x10conta\
iner-exists\x01\x0e\x01@\x02\x03src\x07\x04dest\x07\0\x0b\x04\0\x0bcopy-object\x01\
\x0f\x04\0\x0bmove-object\x01\x0f\x03\x01\x18wasi:blobstore/blobstore\x05!\x02\x03\
\0\x07\x05error\x01Br\x02\x03\x02\x01\x14\x04\0\x0cinput-stream\x03\0\0\x02\x03\x02\
\x01\x15\x04\0\x0doutput-stream\x03\0\x02\x02\x03\x02\x01\"\x04\0\x05error\x03\0\
\x04\x02\x03\x02\x01\x08\x04\0\x08datetime\x03\0\x06\x01w\x04\0\x08filesize\x03\0\
\x08\x01m\x08\x07unknown\x0cblock-device\x10character-device\x09directory\x04fif\
o\x0dsymbolic-link\x0cregular-file\x06socket\x04\0\x0fdescriptor-type\x03\0\x0a\x01\
n\x06\x04read\x05write\x13file-integrity-sync\x13data-integrity-sync\x14requeste\
d-write-sync\x10mutate-directory\x04\0\x10descriptor-flags\x03\0\x0c\x01n\x01\x0e\
symlink-follow\x04\0\x0apath-flags\x03\0\x0e\x01n\x04\x06create\x09directory\x09\
exclusive\x08truncate\x04\0\x0aopen-flags\x03\0\x10\x01w\x04\0\x0alink-count\x03\
\0\x12\x01k\x07\x01r\x06\x04type\x0b\x0alink-count\x13\x04size\x09\x15data-acces\
s-timestamp\x14\x1bdata-modification-timestamp\x14\x17status-change-timestamp\x14\
\x04\0\x0fdescriptor-stat\x03\0\x15\x01q\x03\x09no-change\0\0\x03now\0\0\x09time\
stamp\x01\x07\0\x04\0\x0dnew-timestamp\x03\0\x17\x01r\x02\x04type\x0b\x04names\x04\
\0\x0fdirectory-entry\x03\0\x19\x01m%\x06access\x0bwould-block\x07already\x0ebad\
-descriptor\x04busy\x08deadlock\x05quota\x05exist\x0efile-too-large\x15illegal-b\
yte-sequence\x0bin-progress\x0binterrupted\x07invalid\x02io\x0cis-directory\x04l\
oop\x0etoo-many-links\x0cmessage-size\x0dname-too-long\x09no-device\x08no-entry\x07\
no-lock\x13insufficient-memory\x12insufficient-space\x0dnot-directory\x09not-emp\
ty\x0fnot-recoverable\x0bunsupported\x06no-tty\x0eno-such-device\x08overflow\x0d\
not-permitted\x04pipe\x09read-only\x0cinvalid-seek\x0etext-file-busy\x0ccross-de\
vice\x04\0\x0aerror-code\x03\0\x1b\x01m\x06\x06normal\x0asequential\x06random\x09\
will-need\x09dont-need\x08no-reuse\x04\0\x06advice\x03\0\x1d\x01r\x02\x05lowerw\x05\
upperw\x04\0\x13metadata-hash-value\x03\0\x1f\x04\0\x0adescriptor\x03\x01\x04\0\x16\
directory-entry-stream\x03\x01\x01h!\x01i\x01\x01j\x01$\x01\x1c\x01@\x02\x04self\
#\x06offset\x09\0%\x04\0\"[method]descriptor.read-via-stream\x01&\x01i\x03\x01j\x01\
'\x01\x1c\x01@\x02\x04self#\x06offset\x09\0(\x04\0#[method]descriptor.write-via-\
stream\x01)\x01@\x01\x04self#\0(\x04\0$[method]descriptor.append-via-stream\x01*\
\x01j\0\x01\x1c\x01@\x04\x04self#\x06offset\x09\x06length\x09\x06advice\x1e\0+\x04\
\0\x19[method]descriptor.advise\x01,\x01@\x01\x04self#\0+\x04\0\x1c[method]descr\
iptor.sync-data\x01-\x01j\x01\x0d\x01\x1c\x01@\x01\x04self#\0.\x04\0\x1c[method]\
descriptor.get-flags\x01/\x01j\x01\x0b\x01\x1c\x01@\x01\x04self#\00\x04\0\x1b[me\
thod]descriptor.get-type\x011\x01@\x02\x04self#\x04size\x09\0+\x04\0\x1b[method]\
descriptor.set-size\x012\x01@\x03\x04self#\x15data-access-timestamp\x18\x1bdata-\
modification-timestamp\x18\0+\x04\0\x1c[method]descriptor.set-times\x013\x01p}\x01\
o\x024\x7f\x01j\x015\x01\x1c\x01@\x03\x04self#\x06length\x09\x06offset\x09\06\x04\
\0\x17[method]descriptor.read\x017\x01j\x01\x09\x01\x1c\x01@\x03\x04self#\x06buf\
fer4\x06offset\x09\08\x04\0\x18[method]descriptor.write\x019\x01i\"\x01j\x01:\x01\
\x1c\x01@\x01\x04self#\0;\x04\0![method]descriptor.read-directory\x01<\x04\0\x17\
[method]descriptor.sync\x01-\x01@\x02\x04self#\x04paths\0+\x04\0&[method]descrip\
tor.create-directory-at\x01=\x01j\x01\x16\x01\x1c\x01@\x01\x04self#\0>\x04\0\x17\
[method]descriptor.stat\x01?\x01@\x03\x04self#\x0apath-flags\x0f\x04paths\0>\x04\
\0\x1a[method]descriptor.stat-at\x01@\x01@\x05\x04self#\x0apath-flags\x0f\x04pat\
hs\x15data-access-timestamp\x18\x1bdata-modification-timestamp\x18\0+\x04\0\x1f[\
method]descriptor.set-times-at\x01A\x01@\x05\x04self#\x0eold-path-flags\x0f\x08o\
ld-paths\x0enew-descriptor#\x08new-paths\0+\x04\0\x1a[method]descriptor.link-at\x01\
B\x01i!\x01j\x01\xc3\0\x01\x1c\x01@\x05\x04self#\x0apath-flags\x0f\x04paths\x0ao\
pen-flags\x11\x05flags\x0d\0\xc4\0\x04\0\x1a[method]descriptor.open-at\x01E\x01j\
\x01s\x01\x1c\x01@\x02\x04self#\x04paths\0\xc6\0\x04\0\x1e[method]descriptor.rea\
dlink-at\x01G\x04\0&[method]descriptor.remove-directory-at\x01=\x01@\x04\x04self\
#\x08old-paths\x0enew-descriptor#\x08new-paths\0+\x04\0\x1c[method]descriptor.re\
name-at\x01H\x01@\x03\x04self#\x08old-paths\x08new-paths\0+\x04\0\x1d[method]des\
criptor.symlink-at\x01I\x04\0![method]descriptor.unlink-file-at\x01=\x01@\x02\x04\
self#\x05other#\0\x7f\x04\0![method]descriptor.is-same-object\x01J\x01j\x01\x20\x01\
\x1c\x01@\x01\x04self#\0\xcb\0\x04\0\x20[method]descriptor.metadata-hash\x01L\x01\
@\x03\x04self#\x0apath-flags\x0f\x04paths\0\xcb\0\x04\0#[method]descriptor.metad\
ata-hash-at\x01M\x01h\"\x01k\x1a\x01j\x01\xcf\0\x01\x1c\x01@\x01\x04self\xce\0\0\
\xd0\0\x04\03[method]directory-entry-stream.read-directory-entry\x01Q\x01h\x05\x01\
k\x1c\x01@\x01\x03err\xd2\0\0\xd3\0\x04\0\x15filesystem-error-code\x01T\x03\x01\x1b\
wasi:filesystem/types@0.2.0\x05#\x02\x03\0\x0b\x0adescriptor\x01B\x07\x02\x03\x02\
\x01$\x04\0\x0adescriptor\x03\0\0\x01i\x01\x01o\x02\x02s\x01p\x03\x01@\0\0\x04\x04\
\0\x0fget-directories\x01\x05\x03\x01\x1ewasi:filesystem/preopens@0.2.0\x05%\x01\
B\xc0\x01\x02\x03\x02\x01\x05\x04\0\x08duration\x03\0\0\x02\x03\x02\x01\x14\x04\0\
\x0cinput-stream\x03\0\x02\x02\x03\x02\x01\x15\x04\0\x0doutput-stream\x03\0\x04\x02\
\x03\x02\x01\x12\x04\0\x08io-error\x03\0\x06\x02\x03\x02\x01\x01\x04\0\x08pollab\
le\x03\0\x08\x01q\x0a\x03get\0\0\x04head\0\0\x04post\0\0\x03put\0\0\x06delete\0\0\
\x07connect\0\0\x07options\0\0\x05trace\0\0\x05patch\0\0\x05other\x01s\0\x04\0\x06\
method\x03\0\x0a\x01q\x03\x04HTTP\0\0\x05HTTPS\0\0\x05other\x01s\0\x04\0\x06sche\
me\x03\0\x0c\x01ks\x01k{\x01r\x02\x05rcode\x0e\x09info-code\x0f\x04\0\x11DNS-err\
or-payload\x03\0\x10\x01k}\x01r\x02\x08alert-id\x12\x0dalert-message\x0e\x04\0\x1a\
TLS-alert-received-payload\x03\0\x13\x01ky\x01r\x02\x0afield-name\x0e\x0afield-s\
ize\x15\x04\0\x12field-size-payload\x03\0\x16\x01kw\x01k\x17\x01q'\x0bDNS-timeou\
t\0\0\x09DNS-error\x01\x11\0\x15destination-not-found\0\0\x17destination-unavail\
able\0\0\x19destination-IP-prohibited\0\0\x19destination-IP-unroutable\0\0\x12co\
nnection-refused\0\0\x15connection-terminated\0\0\x12connection-timeout\0\0\x17c\
onnection-read-timeout\0\0\x18connection-write-timeout\0\0\x18connection-limit-r\
eached\0\0\x12TLS-protocol-error\0\0\x15TLS-certificate-error\0\0\x12TLS-alert-r\
eceived\x01\x14\0\x13HTTP-request-denied\0\0\x1cHTTP-request-length-required\0\0\
\x16HTTP-request-body-size\x01\x18\0\x1bHTTP-request-method-invalid\0\0\x18HTTP-\
request-URI-invalid\0\0\x19HTTP-request-URI-too-long\0\0\x20HTTP-request-header-\
section-size\x01\x15\0\x18HTTP-request-header-size\x01\x19\0!HTTP-request-traile\
r-section-size\x01\x15\0\x19HTTP-request-trailer-size\x01\x17\0\x18HTTP-response\
-incomplete\0\0!HTTP-response-header-section-size\x01\x15\0\x19HTTP-response-hea\
der-size\x01\x17\0\x17HTTP-response-body-size\x01\x18\0\"HTTP-response-trailer-s\
ection-size\x01\x15\0\x1aHTTP-response-trailer-size\x01\x17\0\x1dHTTP-response-t\
ransfer-coding\x01\x0e\0\x1cHTTP-response-content-coding\x01\x0e\0\x15HTTP-respo\
nse-timeout\0\0\x13HTTP-upgrade-failed\0\0\x13HTTP-protocol-error\0\0\x0dloop-de\
tected\0\0\x13configuration-error\0\0\x0einternal-error\x01\x0e\0\x04\0\x0aerror\
-code\x03\0\x1a\x01q\x03\x0einvalid-syntax\0\0\x09forbidden\0\0\x09immutable\0\0\
\x04\0\x0cheader-error\x03\0\x1c\x01s\x04\0\x09field-key\x03\0\x1e\x01p}\x04\0\x0b\
field-value\x03\0\x20\x04\0\x06fields\x03\x01\x04\0\x07headers\x03\0\"\x04\0\x08\
trailers\x03\0\"\x04\0\x10incoming-request\x03\x01\x04\0\x10outgoing-request\x03\
\x01\x04\0\x0frequest-options\x03\x01\x04\0\x11response-outparam\x03\x01\x01{\x04\
\0\x0bstatus-code\x03\0)\x04\0\x11incoming-response\x03\x01\x04\0\x0dincoming-bo\
dy\x03\x01\x04\0\x0ffuture-trailers\x03\x01\x04\0\x11outgoing-response\x03\x01\x04\
\0\x0doutgoing-body\x03\x01\x04\0\x18future-incoming-response\x03\x01\x01i\"\x01\
@\0\01\x04\0\x13[constructor]fields\x012\x01o\x02\x1f!\x01p3\x01j\x011\x01\x1d\x01\
@\x01\x07entries4\05\x04\0\x18[static]fields.from-list\x016\x01h\"\x01p!\x01@\x02\
\x04self7\x04name\x1f\08\x04\0\x12[method]fields.get\x019\x01@\x02\x04self7\x04n\
ame\x1f\0\x7f\x04\0\x12[method]fields.has\x01:\x01j\0\x01\x1d\x01@\x03\x04self7\x04\
name\x1f\x05value8\0;\x04\0\x12[method]fields.set\x01<\x01@\x02\x04self7\x04name\
\x1f\0;\x04\0\x15[method]fields.delete\x01=\x01@\x03\x04self7\x04name\x1f\x05val\
ue!\0;\x04\0\x15[method]fields.append\x01>\x01@\x01\x04self7\04\x04\0\x16[method\
]fields.entries\x01?\x01@\x01\x04self7\01\x04\0\x14[method]fields.clone\x01@\x01\
h%\x01@\x01\x04self\xc1\0\0\x0b\x04\0\x1f[method]incoming-request.method\x01B\x01\
@\x01\x04self\xc1\0\0\x0e\x04\0([method]incoming-request.path-with-query\x01C\x01\
k\x0d\x01@\x01\x04self\xc1\0\0\xc4\0\x04\0\x1f[method]incoming-request.scheme\x01\
E\x04\0\"[method]incoming-request.authority\x01C\x01i#\x01@\x01\x04self\xc1\0\0\xc6\
\0\x04\0\x20[method]incoming-request.headers\x01G\x01i,\x01j\x01\xc8\0\0\x01@\x01\
\x04self\xc1\0\0\xc9\0\x04\0\x20[method]incoming-request.consume\x01J\x01i&\x01@\
\x01\x07headers\xc6\0\0\xcb\0\x04\0\x1d[constructor]outgoing-request\x01L\x01h&\x01\
i/\x01j\x01\xce\0\0\x01@\x01\x04self\xcd\0\0\xcf\0\x04\0\x1d[method]outgoing-req\
uest.body\x01P\x01@\x01\x04self\xcd\0\0\x0b\x04\0\x1f[method]outgoing-request.me\
thod\x01Q\x01j\0\0\x01@\x02\x04self\xcd\0\x06method\x0b\0\xd2\0\x04\0#[method]ou\
tgoing-request.set-method\x01S\x01@\x01\x04self\xcd\0\0\x0e\x04\0([method]outgoi\
ng-request.path-with-query\x01T\x01@\x02\x04self\xcd\0\x0fpath-with-query\x0e\0\xd2\
\0\x04\0,[method]outgoing-request.set-path-with-query\x01U\x01@\x01\x04self\xcd\0\
\0\xc4\0\x04\0\x1f[method]outgoing-request.scheme\x01V\x01@\x02\x04self\xcd\0\x06\
scheme\xc4\0\0\xd2\0\x04\0#[method]outgoing-request.set-scheme\x01W\x04\0\"[meth\
od]outgoing-request.authority\x01T\x01@\x02\x04self\xcd\0\x09authority\x0e\0\xd2\
\0\x04\0&[method]outgoing-request.set-authority\x01X\x01@\x01\x04self\xcd\0\0\xc6\
\0\x04\0\x20[method]outgoing-request.headers\x01Y\x01i'\x01@\0\0\xda\0\x04\0\x1c\
[constructor]request-options\x01[\x01h'\x01k\x01\x01@\x01\x04self\xdc\0\0\xdd\0\x04\
\0'[method]request-options.connect-timeout\x01^\x01@\x02\x04self\xdc\0\x08durati\
on\xdd\0\0\xd2\0\x04\0+[method]request-options.set-connect-timeout\x01_\x04\0*[m\
ethod]request-options.first-byte-timeout\x01^\x04\0.[method]request-options.set-\
first-byte-timeout\x01_\x04\0-[method]request-options.between-bytes-timeout\x01^\
\x04\01[method]request-options.set-between-bytes-timeout\x01_\x01i(\x01i.\x01j\x01\
\xe1\0\x01\x1b\x01@\x02\x05param\xe0\0\x08response\xe2\0\x01\0\x04\0\x1d[static]\
response-outparam.set\x01c\x01h+\x01@\x01\x04self\xe4\0\0*\x04\0\x20[method]inco\
ming-response.status\x01e\x01@\x01\x04self\xe4\0\0\xc6\0\x04\0![method]incoming-\
response.headers\x01f\x01@\x01\x04self\xe4\0\0\xc9\0\x04\0![method]incoming-resp\
onse.consume\x01g\x01h,\x01i\x03\x01j\x01\xe9\0\0\x01@\x01\x04self\xe8\0\0\xea\0\
\x04\0\x1c[method]incoming-body.stream\x01k\x01i-\x01@\x01\x04this\xc8\0\0\xec\0\
\x04\0\x1c[static]incoming-body.finish\x01m\x01h-\x01i\x09\x01@\x01\x04self\xee\0\
\0\xef\0\x04\0![method]future-trailers.subscribe\x01p\x01i$\x01k\xf1\0\x01j\x01\xf2\
\0\x01\x1b\x01j\x01\xf3\0\0\x01k\xf4\0\x01@\x01\x04self\xee\0\0\xf5\0\x04\0\x1b[\
method]future-trailers.get\x01v\x01@\x01\x07headers\xc6\0\0\xe1\0\x04\0\x1e[cons\
tructor]outgoing-response\x01w\x01h.\x01@\x01\x04self\xf8\0\0*\x04\0%[method]out\
going-response.status-code\x01y\x01@\x02\x04self\xf8\0\x0bstatus-code*\0\xd2\0\x04\
\0)[method]outgoing-response.set-status-code\x01z\x01@\x01\x04self\xf8\0\0\xc6\0\
\x04\0![method]outgoing-response.headers\x01{\x01@\x01\x04self\xf8\0\0\xcf\0\x04\
\0\x1e[method]outgoing-response.body\x01|\x01h/\x01i\x05\x01j\x01\xfe\0\0\x01@\x01\
\x04self\xfd\0\0\xff\0\x04\0\x1b[method]outgoing-body.write\x01\x80\x01\x01j\0\x01\
\x1b\x01@\x02\x04this\xce\0\x08trailers\xf2\0\0\x81\x01\x04\0\x1c[static]outgoin\
g-body.finish\x01\x82\x01\x01h0\x01@\x01\x04self\x83\x01\0\xef\0\x04\0*[method]f\
uture-incoming-response.subscribe\x01\x84\x01\x01i+\x01j\x01\x85\x01\x01\x1b\x01\
j\x01\x86\x01\0\x01k\x87\x01\x01@\x01\x04self\x83\x01\0\x88\x01\x04\0$[method]fu\
ture-incoming-response.get\x01\x89\x01\x01h\x07\x01k\x1b\x01@\x01\x03err\x8a\x01\
\0\x8b\x01\x04\0\x0fhttp-error-code\x01\x8c\x01\x03\x01\x15wasi:http/types@0.2.0\
\x05&\x02\x03\0\x0d\x10outgoing-request\x02\x03\0\x0d\x0frequest-options\x02\x03\
\0\x0d\x18future-incoming-response\x02\x03\0\x0d\x0aerror-code\x01B\x0f\x02\x03\x02\
\x01'\x04\0\x10outgoing-request\x03\0\0\x02\x03\x02\x01(\x04\0\x0frequest-option\
s\x03\0\x02\x02\x03\x02\x01)\x04\0\x18future-incoming-response\x03\0\x04\x02\x03\
\x02\x01*\x04\0\x0aerror-code\x03\0\x06\x01i\x01\x01i\x03\x01k\x09\x01i\x05\x01j\
\x01\x0b\x01\x07\x01@\x02\x07request\x08\x07options\x0a\0\x0c\x04\0\x06handle\x01\
\x0d\x03\x01\x20wasi:http/outgoing-handler@0.2.0\x05+\x01B\x04\x04\0\x05error\x03\
\x01\x01h\0\x01@\x01\x04self\x01\0s\x04\0\x13[method]error.trace\x01\x02\x03\x01\
'wasi:keyvalue/wasi-keyvalue-error@0.1.0\x05,\x02\x03\0\x0f\x05error\x01B,\x02\x03\
\x02\x01\x14\x04\0\x0cinput-stream\x03\0\0\x02\x03\x02\x01\x15\x04\0\x0doutput-s\
tream\x03\0\x02\x02\x03\x02\x01-\x04\0\x05error\x03\0\x04\x04\0\x06bucket\x03\x01\
\x01s\x04\0\x03key\x03\0\x07\x04\0\x0eoutgoing-value\x03\x01\x04\0\x19outgoing-v\
alue-body-async\x03\0\x03\x01p}\x04\0\x18outgoing-value-body-sync\x03\0\x0b\x04\0\
\x0eincoming-value\x03\x01\x04\0\x19incoming-value-async-body\x03\0\x01\x01p}\x04\
\0\x18incoming-value-sync-body\x03\0\x0f\x01i\x06\x01i\x05\x01j\x01\x11\x01\x12\x01\
@\x01\x04names\0\x13\x04\0\x1a[static]bucket.open-bucket\x01\x14\x01i\x09\x01@\0\
\0\x15\x04\0)[static]outgoing-value.new-outgoing-value\x01\x16\x01h\x09\x01i\x0a\
\x01j\x01\x18\x01\x12\x01@\x01\x04self\x17\0\x19\x04\06[method]outgoing-value.ou\
tgoing-value-write-body-async\x01\x1a\x01j\0\x01\x12\x01@\x02\x04self\x17\x05val\
ue\x0c\0\x1b\x04\05[method]outgoing-value.outgoing-value-write-body-sync\x01\x1c\
\x01h\x0d\x01j\x01\x10\x01\x12\x01@\x01\x04self\x1d\0\x1e\x04\02[method]incoming\
-value.incoming-value-consume-sync\x01\x1f\x01i\x0e\x01j\x01\x20\x01\x12\x01@\x01\
\x04self\x1d\0!\x04\03[method]incoming-value.incoming-value-consume-async\x01\"\x01\
j\x01w\x01\x12\x01@\x01\x04self\x1d\0#\x04\0*[method]incoming-value.incoming-val\
ue-size\x01$\x03\x01\x19wasi:keyvalue/types@0.1.0\x05.\x02\x03\0\x10\x06bucket\x02\
\x03\0\x10\x05error\x02\x03\0\x10\x03key\x02\x03\0\x10\x0eincoming-value\x02\x03\
\0\x10\x0eoutgoing-value\x01B\x1e\x02\x03\x02\x01/\x04\0\x06bucket\x03\0\0\x02\x03\
\x02\x010\x04\0\x05error\x03\0\x02\x02\x03\x02\x011\x04\0\x03key\x03\0\x04\x02\x03\
\x02\x012\x04\0\x0eincoming-value\x03\0\x06\x02\x03\x02\x013\x04\0\x0eoutgoing-v\
alue\x03\0\x08\x01h\x01\x01p\x05\x01i\x07\x01k\x0c\x01p\x0d\x01i\x03\x01j\x01\x0e\
\x01\x0f\x01@\x02\x06bucket\x0a\x04keys\x0b\0\x10\x04\0\x08get-many\x01\x11\x01j\
\x01\x0b\x01\x0f\x01@\x01\x06bucket\x0a\0\x12\x04\0\x04keys\x01\x13\x01h\x09\x01\
o\x02\x05\x14\x01p\x15\x01j\0\x01\x0f\x01@\x02\x06bucket\x0a\x0akey-values\x16\0\
\x17\x04\0\x08set-many\x01\x18\x01@\x02\x06bucket\x0a\x04keys\x0b\0\x17\x04\0\x0b\
delete-many\x01\x19\x03\x01\"wasi:keyvalue/eventual-batch@0.1.0\x054\x01B\x1a\x02\
\x03\x02\x01/\x04\0\x06bucket\x03\0\0\x02\x03\x02\x010\x04\0\x05error\x03\0\x02\x02\
\x03\x02\x012\x04\0\x0eincoming-value\x03\0\x04\x02\x03\x02\x011\x04\0\x03key\x03\
\0\x06\x02\x03\x02\x013\x04\0\x0eoutgoing-value\x03\0\x08\x01h\x01\x01i\x05\x01k\
\x0b\x01i\x03\x01j\x01\x0c\x01\x0d\x01@\x02\x06bucket\x0a\x03key\x07\0\x0e\x04\0\
\x03get\x01\x0f\x01h\x09\x01j\0\x01\x0d\x01@\x03\x06bucket\x0a\x03key\x07\x0eout\
going-value\x10\0\x11\x04\0\x03set\x01\x12\x01@\x02\x06bucket\x0a\x03key\x07\0\x11\
\x04\0\x06delete\x01\x13\x01j\x01\x7f\x01\x0d\x01@\x02\x06bucket\x0a\x03key\x07\0\
\x14\x04\0\x06exists\x01\x15\x03\x01\x1cwasi:keyvalue/eventual@0.1.0\x055\x01B\x04\
\x01m\x06\x05trace\x05debug\x04info\x04warn\x05error\x08critical\x04\0\x05level\x03\
\0\0\x01@\x03\x05level\x01\x07contexts\x07messages\x01\0\x04\0\x03log\x01\x02\x03\
\x01\x14wasi:logging/logging\x056\x01B\x11\x04\0\x07network\x03\x01\x01m\x15\x07\
unknown\x0daccess-denied\x0dnot-supported\x10invalid-argument\x0dout-of-memory\x07\
timeout\x14concurrency-conflict\x0fnot-in-progress\x0bwould-block\x0dinvalid-sta\
te\x10new-socket-limit\x14address-not-bindable\x0eaddress-in-use\x12remote-unrea\
chable\x12connection-refused\x10connection-reset\x12connection-aborted\x12datagr\
am-too-large\x11name-unresolvable\x1atemporary-resolver-failure\x1apermanent-res\
olver-failure\x04\0\x0aerror-code\x03\0\x01\x01m\x02\x04ipv4\x04ipv6\x04\0\x11ip\
-address-family\x03\0\x03\x01o\x04}}}}\x04\0\x0cipv4-address\x03\0\x05\x01o\x08{\
{{{{{{{\x04\0\x0cipv6-address\x03\0\x07\x01q\x02\x04ipv4\x01\x06\0\x04ipv6\x01\x08\
\0\x04\0\x0aip-address\x03\0\x09\x01r\x02\x04port{\x07address\x06\x04\0\x13ipv4-\
socket-address\x03\0\x0b\x01r\x04\x04port{\x09flow-infoy\x07address\x08\x08scope\
-idy\x04\0\x13ipv6-socket-address\x03\0\x0d\x01q\x02\x04ipv4\x01\x0c\0\x04ipv6\x01\
\x0e\0\x04\0\x11ip-socket-address\x03\0\x0f\x03\x01\x1awasi:sockets/network@0.2.\
0\x057\x02\x03\0\x14\x07network\x02\x03\0\x14\x0aerror-code\x02\x03\0\x14\x0aip-\
address\x01B\x16\x02\x03\x02\x01\x01\x04\0\x08pollable\x03\0\0\x02\x03\x02\x018\x04\
\0\x07network\x03\0\x02\x02\x03\x02\x019\x04\0\x0aerror-code\x03\0\x04\x02\x03\x02\
\x01:\x04\0\x0aip-address\x03\0\x06\x04\0\x16resolve-address-stream\x03\x01\x01h\
\x08\x01k\x07\x01j\x01\x0a\x01\x05\x01@\x01\x04self\x09\0\x0b\x04\03[method]reso\
lve-address-stream.resolve-next-address\x01\x0c\x01i\x01\x01@\x01\x04self\x09\0\x0d\
\x04\0([method]resolve-address-stream.subscribe\x01\x0e\x01h\x03\x01i\x08\x01j\x01\
\x10\x01\x05\x01@\x02\x07network\x0f\x04names\0\x11\x04\0\x11resolve-addresses\x01\
\x12\x03\x01!wasi:sockets/ip-name-lookup@0.2.0\x05;\x01B\x05\x02\x03\x02\x018\x04\
\0\x07network\x03\0\0\x01i\x01\x01@\0\0\x02\x04\0\x10instance-network\x01\x03\x03\
\x01#wasi:sockets/instance-network@0.2.0\x05<\x04\x01\x15golem:rust/golem-rust\x04\
\0\x0b\x10\x01\0\x0agolem-rust\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0d\
wit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
